package gt.edu.usac.compiler;
import java_cup.runtime.*;
import java.util.LinkedList;
import Data.*;


//CODIGO PARA INSERTAR EN JAVA
parser code {:
        
    LinkedList<Parametro> currentParams = new LinkedList<>();
    


    private int count = 0;

    private void increaseCount() {
        count++;
    }
    
    public int getCount() {
        return count;
    }


    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }
:}
/*
*
*Seccion de terminales
*/
terminal LPAREN,RPAREN,COMMA,SEMI,DOT,COLON,LBRACE,RBRACE,LBRACKET,RBRACKET,NEG,AT;
terminal INT,LONG,FLOAT,DOUBLE,DECIMAL,STRING;
terminal CHAR,BOOL,PLUS,MINUS,TIMES,DIV;
//terminal ASIGN,EQUAL,NOTEQUAL,NOT,LT,GT;
//terminal LET,LGT,AND,OR,WHILE,DO;
//terminal FOR,FOREACH,CONTINUE,BREAK,IN,OBJECT;
//terminal CLASS,SWITCH,CASE,DEFAULT,TRY,CATCH;
//terminal FINALLY,PRIVATE,NAMESPACE,PUBLIC,PROTECTED,RETURN;
//terminal NULL,IF,ELSE,TRUE,FALSE,GET;
//terminal VOID,TYPEOF,INTERFACE,OVERRIDE,STRUCT,THROW;
//terminal REF,ENUM,CONST,STATIC,THIS,IS;
//terminal NEW,USING;
terminal double doubleValue;
terminal int intValue;
terminal String identifier;
terminal char charValue;

nonterminal funcion;
nonterminal Tipo tipo; 
nonterminal ParamList params;
nonterminal Parametro param;

//Seccion de No terminales

funcion::= tipo:t identifier:i LPAREN params:ps RPAREN{:RESULT = new Funcion(t,i,(ParamList)ps);:}
;

params::=param:p {:RESULT = new ParamList().append((Parametro)p);:}
|params:ps COMMA param:p {:RESULT = (ParamList)ps.append((Parametro)p);:}
;

param::=tipo:t identifier:i {:RESULT = new Parametro((Tipo)t,i);:}
;

tipo::=INT    {:RESULT = Tipo.INT;:}
|LONG   {:RESULT = Tipo.LONG;:}
    |FLOAT  {:RESULT = Tipo.FLOAT;:}
    |DOUBLE {:RESULT = Tipo.DOUBLE;:}
    |DECIMAL{:RESULT = Tipo.DECIMAL;:} 
    |STRING {:RESULT = Tipo.STRING;:}
    |CHAR   {:RESULT = Tipo.CHAR;:}
    |BOOL   {:RESULT = Tipo.BOOL;:}
;