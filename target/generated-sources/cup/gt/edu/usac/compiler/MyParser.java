
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java.util.*;
import Data.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\035\003" +
    "\000\002\035\004\000\002\026\003\000\002\026\004\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\041\011\000\002\034\003\000\002" +
    "\034\004\000\002\034\004\000\002\030\011\000\002\030" +
    "\013\000\002\030\015\000\002\030\010\000\002\030\012" +
    "\000\002\030\014\000\002\030\014\000\002\030\013\000" +
    "\002\027\013\000\002\027\012\000\002\022\011\000\002" +
    "\022\010\000\002\032\003\000\002\032\005\000\002\031" +
    "\003\000\002\031\003\000\002\031\004\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\033\004\000\002" +
    "\033\004\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\017\011\000\002\017\010\000\002\021\015\000" +
    "\002\021\014\000\002\020\004\000\002\020\004\000\002" +
    "\037\016\000\002\036\011\000\002\036\007\000\002\036" +
    "\010\000\002\036\006\000\002\015\006\000\002\010\005" +
    "\000\002\010\007\000\002\040\003\000\002\040\005\000" +
    "\002\011\005\000\002\011\006\000\002\012\003\000\002" +
    "\012\004\000\002\006\003\000\002\006\005\000\002\007" +
    "\004\000\002\005\011\000\002\005\012\000\002\005\011" +
    "\000\002\005\012\000\002\005\010\000\002\005\011\000" +
    "\002\005\010\000\002\005\011\000\002\005\011\000\002" +
    "\005\010\000\002\005\004\000\002\042\003\000\002\043" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\002\005\000\002\002\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\056\003\026\004\020\006\007\010\013\017" +
    "\030\022\027\023\012\024\011\025\042\026\037\027\006" +
    "\030\024\031\043\032\005\033\017\041\014\046\036\051" +
    "\046\053\021\061\025\064\031\067\047\001\002\000\060" +
    "\002\ufff4\003\ufff4\015\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\041\ufff4" +
    "\046\ufff4\051\ufff4\053\ufff4\057\ufff4\060\ufff4\061\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000\004\041\uff8f" +
    "\001\002\000\004\041\uff92\001\002\000\012\004\020\006" +
    "\007\010\013\022\027\001\002\000\060\002\ufff7\003\ufff7" +
    "\015\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\041\ufff7\046\ufff7\051\ufff7" +
    "\053\ufff7\057\ufff7\060\ufff7\061\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\001\002\000\004\041\uff95\001\002\000\004" +
    "\006\346\001\002\000\012\004\020\006\007\010\013\022" +
    "\027\001\002\000\010\006\065\021\342\041\uff8d\001\002" +
    "\000\004\002\341\001\002\000\004\020\340\001\002\000" +
    "\004\041\uff8e\001\002\000\004\004\336\001\002\000\004" +
    "\006\313\001\002\000\046\002\uffff\003\103\023\012\024" +
    "\011\025\042\026\037\027\006\030\024\031\043\032\005" +
    "\033\017\041\014\046\036\051\046\053\021\061\025\064" +
    "\031\067\047\001\002\000\060\002\ufff1\003\ufff1\015\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\041\ufff1\046\ufff1\051\ufff1\053\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\001\002\000\004\041\uff91\001\002\000\020\020\307" +
    "\022\057\041\310\042\063\043\064\044\055\045\060\001" +
    "\002\000\010\014\303\015\304\020\104\001\002\000\020" +
    "\002\uff9b\004\uff9b\005\uff9b\007\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\001\002\000\006\041\257\062\260\001\002\000\004" +
    "\006\234\001\002\000\060\002\ufff6\003\ufff6\015\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\041\ufff6\046\ufff6\051\ufff6\053\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\001\002\000\060\002\ufff8\003\ufff8\015\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\041\ufff8\046\ufff8\051\ufff8\053\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002" +
    "\000\004\041\211\001\002\000\060\002\ufff5\003\ufff5\015" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\041\ufff5\046\ufff5\051\ufff5\053" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\001\002\000\004\006\173\001\002\000\004\041" +
    "\uff93\001\002\000\056\002\ufffa\003\ufffa\015\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\041\ufffa\046\ufffa\051\ufffa\053\ufffa\060\ufffa" +
    "\061\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002\000" +
    "\016\002\ufffe\004\162\005\165\010\163\011\164\012\161" +
    "\001\002\000\004\041\uff94\001\002\000\004\041\uff90\001" +
    "\002\000\060\002\ufff2\003\ufff2\015\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\041\ufff2\046\ufff2\051\ufff2\053\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\001\002\000" +
    "\060\002\ufff3\003\ufff3\015\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\041" +
    "\ufff3\046\ufff3\051\ufff3\053\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000\004\014" +
    "\075\001\002\000\004\070\051\001\002\000\004\002\000" +
    "\001\002\000\004\071\052\001\002\000\004\006\053\001" +
    "\002\000\016\022\057\041\062\042\063\043\064\044\055" +
    "\045\060\001\002\000\030\007\uffd0\020\uffd0\021\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\063\uffd0\001\002\000\030\007\uff98\020\uff98\021\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\054\uff98\055\uff98\056\uff98" +
    "\063\uff98\001\002\000\004\007\073\001\002\000\030\007" +
    "\uff9a\020\uff9a\021\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\063\uff9a\001\002\000\030\007" +
    "\uff97\020\uff97\021\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\054\uff97\055\uff97\056\uff97\063\uff97\001\002\000\030\007" +
    "\uffd1\020\uffd1\021\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\063\uffd1\001\002\000\016\006" +
    "\065\007\uffd2\020\uffd2\055\uffd2\056\uffd2\063\uffd2\001\002" +
    "\000\030\007\uff99\020\uff99\021\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\054\uff99\055\uff99\056\uff99\063\uff99\001\002" +
    "\000\030\007\uff96\020\uff96\021\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\054\uff96\055\uff96\056\uff96\063\uff96\001\002" +
    "\000\006\007\067\041\070\001\002\000\006\007\071\041" +
    "\072\001\002\000\106\002\uffb7\003\uffb7\007\uffb7\015\uffb7" +
    "\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\046\uffb7\051\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002\000\006\007" +
    "\uffb5\041\uffb5\001\002\000\106\002\uffb6\003\uffb6\007\uffb6" +
    "\015\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\046\uffb6\051\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000" +
    "\006\007\uffb4\041\uffb4\001\002\000\004\020\074\001\002" +
    "\000\060\002\uffea\003\uffea\015\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\041\uffea\046\uffea\051\uffea\053\uffea\057\uffea\060\uffea\061" +
    "\uffea\064\uffea\065\uffea\066\uffea\067\uffea\001\002\000\054" +
    "\003\uffa5\015\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\041\uffa5\046\uffa5" +
    "\051\uffa5\053\uffa5\057\uffa5\060\uffa5\061\uffa5\064\uffa5\066" +
    "\uffa5\067\uffa5\001\002\000\046\003\103\015\100\023\012" +
    "\024\011\025\042\026\037\027\006\030\024\031\043\032" +
    "\005\033\017\041\014\046\036\051\046\053\021\061\025" +
    "\064\031\067\047\001\002\000\004\041\152\001\002\000" +
    "\062\002\uffa4\003\uffa4\015\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\041" +
    "\uffa4\046\uffa4\051\uffa4\052\uffa4\053\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\001\002\000" +
    "\046\003\103\015\100\023\012\024\011\025\042\026\037" +
    "\027\006\030\024\031\043\032\005\033\017\041\014\046" +
    "\036\051\046\053\021\061\025\064\031\067\047\001\002" +
    "\000\004\046\105\001\002\000\004\020\104\001\002\000" +
    "\060\002\uffeb\003\uffeb\015\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\041" +
    "\uffeb\046\uffeb\051\uffeb\053\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\001\002\000\004\006" +
    "\106\001\002\000\024\022\057\041\112\042\063\043\064" +
    "\044\055\045\060\047\110\050\111\054\115\001\002\000" +
    "\016\021\131\035\132\036\133\037\134\040\136\054\135" +
    "\001\002\000\010\007\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\010\007\uffd3\055\uffd3\056\uffd3\001\002\000\026\006\065" +
    "\007\uffd7\021\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\054" +
    "\uffd2\055\uffd7\056\uffd7\001\002\000\010\007\uffda\055\uffda" +
    "\056\uffda\001\002\000\010\007\uffd8\055\uffd8\056\uffd8\001" +
    "\002\000\004\041\127\001\002\000\010\007\120\055\121" +
    "\056\122\001\002\000\024\022\057\041\112\042\063\043" +
    "\064\044\055\045\060\047\110\050\111\054\115\001\002" +
    "\000\004\020\125\001\002\000\004\055\124\001\002\000" +
    "\004\056\123\001\002\000\024\022\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054\uffce\001" +
    "\002\000\024\022\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\047\uffcf\050\uffcf\054\uffcf\001\002\000\060\002" +
    "\uffdd\003\uffdd\015\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\041\uffdd\046" +
    "\uffdd\051\uffdd\053\uffdd\057\uffdd\060\uffdd\061\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\001\002\000\010\007\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\010\007\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\016\022\057\041\062\042\063\043\064\044" +
    "\055\045\060\001\002\000\004\021\140\001\002\000\016" +
    "\022\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\001" +
    "\002\000\016\022\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\001\002\000\016\022\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\001\002\000\004\021\137\001\002" +
    "\000\016\022\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\001\002\000\016\022\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\001\002\000\016\022\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002\000\010\007\uffd5" +
    "\055\uffd5\056\uffd5\001\002\000\056\002\ufff9\003\ufff9\015" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\041\ufff9\046\ufff9\051\ufff9\053" +
    "\ufff9\060\ufff9\061\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\001\002\000\004\046\144\001\002\000\004\006\145\001" +
    "\002\000\024\022\057\041\112\042\063\043\064\044\055" +
    "\045\060\047\110\050\111\054\115\001\002\000\010\007" +
    "\147\055\121\056\122\001\002\000\004\020\150\001\002" +
    "\000\060\002\uffde\003\uffde\015\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\041\uffde\046\uffde\051\uffde\053\uffde\057\uffde\060\uffde\061" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\010" +
    "\016\154\020\155\021\153\001\002\000\010\016\uffb9\020" +
    "\uffb9\021\uffb9\001\002\000\016\022\057\041\062\042\063" +
    "\043\064\044\055\045\060\001\002\000\004\041\156\001" +
    "\002\000\060\002\uffbb\003\uffbb\015\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\041\uffbb\046\uffbb\051\uffbb\053\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002\000" +
    "\010\016\uffb8\020\uffb8\021\uffb8\001\002\000\004\020\160" +
    "\001\002\000\060\002\uffba\003\uffba\015\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\041\uffba\046\uffba\051\uffba\053\uffba\057\uffba\060" +
    "\uffba\061\uffba\064\uffba\065\uffba\066\uffba\067\uffba\001\002" +
    "\000\012\004\020\006\007\010\013\022\027\001\002\000" +
    "\012\004\020\006\007\010\013\022\027\001\002\000\012" +
    "\004\020\006\007\010\013\022\027\001\002\000\012\004" +
    "\020\006\007\010\013\022\027\001\002\000\012\004\020" +
    "\006\007\010\013\022\027\001\002\000\020\002\uffa0\004" +
    "\uffa0\005\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\001\002" +
    "\000\020\002\uff9f\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\001\002\000\020\002\uffa1\004\uffa1\005\165" +
    "\007\uffa1\010\uffa1\011\164\012\161\001\002\000\020\002" +
    "\uffa3\004\uffa3\005\165\007\uffa3\010\uffa3\011\164\012\161" +
    "\001\002\000\020\002\uff9e\004\uff9e\005\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\001\002\000\024\022\057\041\112" +
    "\042\063\043\064\044\055\045\060\047\110\050\111\054" +
    "\115\001\002\000\010\007\175\055\121\056\122\001\002" +
    "\000\004\014\075\001\002\000\052\003\103\015\100\023" +
    "\012\024\011\025\042\026\037\027\006\030\024\031\043" +
    "\032\005\033\017\041\014\046\036\051\046\053\021\057" +
    "\177\060\203\061\025\064\031\067\047\001\002\000\004" +
    "\020\210\001\002\000\052\003\uffe9\015\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\041\uffe9\046\uffe9\051\uffe9\053\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\064\uffe9\067\uffe9\001\002\000\060\002\uffdb" +
    "\003\uffdb\015\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\041\uffdb\046\uffdb" +
    "\051\uffdb\053\uffdb\057\uffdb\060\uffdb\061\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\052\003\ufffc\015\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\041\ufffc\046\ufffc\051\ufffc\053\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\064\ufffc\067\ufffc\001\002\000" +
    "\004\020\207\001\002\000\052\003\103\015\100\023\012" +
    "\024\011\025\042\026\037\027\006\030\024\031\043\032" +
    "\005\033\017\041\014\046\036\051\046\053\021\057\177" +
    "\060\203\061\025\064\031\067\047\001\002\000\060\002" +
    "\uffdc\003\uffdc\015\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\041\uffdc\046" +
    "\uffdc\051\uffdc\053\uffdc\057\uffdc\060\uffdc\061\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\001\002\000\052\003\ufffb\015" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\041\ufffb\046\ufffb\051\ufffb\053" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\064\ufffb\067\ufffb\001\002" +
    "\000\052\003\uffe8\015\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\041\uffe8" +
    "\046\uffe8\051\uffe8\053\uffe8\057\uffe8\060\uffe8\061\uffe8\064" +
    "\uffe8\067\uffe8\001\002\000\052\003\uffe7\015\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\041\uffe7\046\uffe7\051\uffe7\053\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\064\uffe7\067\uffe7\001\002\000\012\006" +
    "\212\016\uffb9\020\uffb9\021\uffb9\001\002\000\026\007\216" +
    "\024\011\025\042\026\037\027\006\030\024\031\043\032" +
    "\005\033\017\041\215\001\002\000\006\007\uffb3\016\uffb3" +
    "\001\002\000\006\007\226\016\225\001\002\000\004\041" +
    "\uff8d\001\002\000\004\014\075\001\002\000\004\041\220" +
    "\001\002\000\006\007\uffb1\016\uffb1\001\002\000\046\003" +
    "\103\015\100\023\012\024\011\025\042\026\037\027\006" +
    "\030\024\031\043\032\005\033\017\041\014\046\036\051" +
    "\046\053\021\061\025\064\031\067\047\001\002\000\046" +
    "\003\103\015\100\023\012\024\011\025\042\026\037\027" +
    "\006\030\024\031\043\032\005\033\017\041\014\046\036" +
    "\051\046\053\021\061\025\064\031\067\047\001\002\000" +
    "\004\002\uffac\001\002\000\004\002\uffb0\001\002\000\024" +
    "\024\011\025\042\026\037\027\006\030\024\031\043\032" +
    "\005\033\017\041\215\001\002\000\004\014\075\001\002" +
    "\000\046\003\103\015\100\023\012\024\011\025\042\026" +
    "\037\027\006\030\024\031\043\032\005\033\017\041\014" +
    "\046\036\051\046\053\021\061\025\064\031\067\047\001" +
    "\002\000\046\003\103\015\100\023\012\024\011\025\042" +
    "\026\037\027\006\030\024\031\043\032\005\033\017\041" +
    "\014\046\036\051\046\053\021\061\025\064\031\067\047" +
    "\001\002\000\004\002\uffab\001\002\000\004\002\uffaf\001" +
    "\002\000\006\007\uffb2\016\uffb2\001\002\000\004\041\235" +
    "\001\002\000\004\007\236\001\002\000\004\014\075\001" +
    "\002\000\004\066\241\001\002\000\004\065\251\001\002" +
    "\000\016\022\057\041\062\042\063\043\064\044\055\045" +
    "\060\001\002\000\004\063\243\001\002\000\044\003\103" +
    "\023\012\024\011\025\042\026\037\027\006\030\024\031" +
    "\043\032\005\033\017\041\014\046\036\051\046\053\021" +
    "\061\025\064\031\067\047\001\002\000\052\003\103\023" +
    "\012\024\011\025\042\026\037\027\006\030\024\031\043" +
    "\032\005\033\017\041\014\046\036\051\046\053\021\060" +
    "\246\061\025\064\031\065\uffbd\066\241\067\047\001\002" +
    "\000\004\065\uffbf\001\002\000\004\020\247\001\002\000" +
    "\006\065\uffbe\066\241\001\002\000\004\065\uffc0\001\002" +
    "\000\004\063\252\001\002\000\044\003\103\023\012\024" +
    "\011\025\042\026\037\027\006\030\024\031\043\032\005" +
    "\033\017\041\014\046\036\051\046\053\021\061\025\064" +
    "\031\067\047\001\002\000\046\003\103\023\012\024\011" +
    "\025\042\026\037\027\006\030\024\031\043\032\005\033" +
    "\017\041\014\046\036\051\046\053\021\060\254\061\025" +
    "\064\031\067\047\001\002\000\004\020\255\001\002\000" +
    "\004\015\100\001\002\000\060\002\uffc1\003\uffc1\015\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\041\uffc1\046\uffc1\051\uffc1\053\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\001\002\000\004\006\267\001\002\000\004\006\261" +
    "\001\002\000\004\007\262\001\002\000\004\014\075\001" +
    "\002\000\046\003\103\015\100\023\012\024\011\025\042" +
    "\026\037\027\006\030\024\031\043\032\005\033\017\041" +
    "\014\046\036\051\046\053\021\061\025\064\031\067\047" +
    "\001\002\000\046\003\103\015\100\023\012\024\011\025" +
    "\042\026\037\027\006\030\024\031\043\032\005\033\017" +
    "\041\014\046\036\051\046\053\021\061\025\064\031\067" +
    "\047\001\002\000\004\002\uffa7\001\002\000\004\002\uffa8" +
    "\001\002\000\026\007\271\024\011\025\042\026\037\027" +
    "\006\030\024\031\043\032\005\033\017\041\215\001\002" +
    "\000\006\007\276\016\225\001\002\000\004\014\075\001" +
    "\002\000\046\003\103\015\100\023\012\024\011\025\042" +
    "\026\037\027\006\030\024\031\043\032\005\033\017\041" +
    "\014\046\036\051\046\053\021\061\025\064\031\067\047" +
    "\001\002\000\046\003\103\015\100\023\012\024\011\025" +
    "\042\026\037\027\006\030\024\031\043\032\005\033\017" +
    "\041\014\046\036\051\046\053\021\061\025\064\031\067" +
    "\047\001\002\000\004\002\uffaa\001\002\000\004\002\uffae" +
    "\001\002\000\004\014\075\001\002\000\046\003\103\015" +
    "\100\023\012\024\011\025\042\026\037\027\006\030\024" +
    "\031\043\032\005\033\017\041\014\046\036\051\046\053" +
    "\021\061\025\064\031\067\047\001\002\000\046\003\103" +
    "\015\100\023\012\024\011\025\042\026\037\027\006\030" +
    "\024\031\043\032\005\033\017\041\014\046\036\051\046" +
    "\053\021\061\025\064\031\067\047\001\002\000\004\002" +
    "\uffa9\001\002\000\004\002\uffad\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffa6\001\002\000\060\002\uffec\003" +
    "\uffec\015\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\041\uffec\046\uffec\051" +
    "\uffec\053\uffec\057\uffec\060\uffec\061\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\001\002\000\004\020\312\001\002\000" +
    "\060\002\uffed\003\uffed\015\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\041" +
    "\uffed\046\uffed\051\uffed\053\uffed\057\uffed\060\uffed\061\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\006\006" +
    "\065\020\311\001\002\000\060\002\uffee\003\uffee\015\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\041\uffee\046\uffee\051\uffee\053\uffee" +
    "\057\uffee\060\uffee\061\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\001\002\000\060\002\uffef\003\uffef\015\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\041\uffef\046\uffef\051\uffef\053\uffef\057\uffef" +
    "\060\uffef\061\uffef\064\uffef\065\uffef\066\uffef\067\uffef\001" +
    "\002\000\024\022\057\041\112\042\063\043\064\044\055" +
    "\045\060\047\110\050\111\054\115\001\002\000\010\007" +
    "\315\055\121\056\122\001\002\000\004\014\075\001\002" +
    "\000\046\003\103\015\100\023\012\024\011\025\042\026" +
    "\037\027\006\030\024\031\043\032\005\033\017\041\014" +
    "\046\036\051\046\053\021\061\025\064\031\067\047\001" +
    "\002\000\046\003\103\015\100\023\012\024\011\025\042" +
    "\026\037\027\006\030\024\031\043\032\005\033\017\041" +
    "\014\046\036\051\046\053\021\061\025\064\031\067\047" +
    "\001\002\000\062\002\uffe3\003\uffe3\015\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\041\uffe3\046\uffe3\051\uffe3\052\321\053\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\001\002\000\006\014\075\053\021\001\002\000\060\002" +
    "\uffe2\003\uffe2\015\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\041\uffe2\046" +
    "\uffe2\051\uffe2\053\uffe2\057\uffe2\060\uffe2\061\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\001\002\000\046\003\103\015" +
    "\100\023\012\024\011\025\042\026\037\027\006\030\024" +
    "\031\043\032\005\033\017\041\014\046\036\051\046\053" +
    "\021\061\025\064\031\067\047\001\002\000\046\003\103" +
    "\015\100\023\012\024\011\025\042\026\037\027\006\030" +
    "\024\031\043\032\005\033\017\041\014\046\036\051\046" +
    "\053\021\061\025\064\031\067\047\001\002\000\060\002" +
    "\uffdf\003\uffdf\015\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\041\uffdf\046" +
    "\uffdf\051\uffdf\053\uffdf\057\uffdf\060\uffdf\061\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\001\002\000\060\002\uffe1\003" +
    "\uffe1\015\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\041\uffe1\046\uffe1\051" +
    "\uffe1\053\uffe1\057\uffe1\060\uffe1\061\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\001\002\000\062\002\uffe6\003\uffe6\015" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\041\uffe6\046\uffe6\051\uffe6\052" +
    "\330\053\uffe6\057\uffe6\060\uffe6\061\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\001\002\000\006\014\075\053\021\001" +
    "\002\000\060\002\uffe5\003\uffe5\015\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\041\uffe5\046\uffe5\051\uffe5\053\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\046\003\103\015\100\023\012\024\011\025\042\026\037" +
    "\027\006\030\024\031\043\032\005\033\017\041\014\046" +
    "\036\051\046\053\021\061\025\064\031\067\047\001\002" +
    "\000\046\003\103\015\100\023\012\024\011\025\042\026" +
    "\037\027\006\030\024\031\043\032\005\033\017\041\014" +
    "\046\036\051\046\053\021\061\025\064\031\067\047\001" +
    "\002\000\060\002\uffe0\003\uffe0\015\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\041\uffe0\046\uffe0\051\uffe0\053\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000" +
    "\060\002\uffe4\003\uffe4\015\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\041" +
    "\uffe4\046\uffe4\051\uffe4\053\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002\000\012\004" +
    "\020\006\007\010\013\022\027\001\002\000\020\002\uffa2" +
    "\004\uffa2\005\165\007\uffa2\010\uffa2\011\164\012\161\001" +
    "\002\000\060\002\ufff0\003\ufff0\015\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\041\ufff0\046\ufff0\051\ufff0\053\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002\000" +
    "\004\002\001\001\002\000\016\022\057\041\062\042\063" +
    "\043\064\044\055\045\060\001\002\000\004\020\344\001" +
    "\002\000\060\002\uffbc\003\uffbc\015\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\041\uffbc\046\uffbc\051\uffbc\053\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000" +
    "\020\002\uff9d\004\uff9d\005\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\001\002\000\024\024\011\025\042\026\037\027" +
    "\006\030\024\031\043\032\005\033\017\041\350\001\002" +
    "\000\004\007\u0101\001\002\000\006\021\370\041\uff8d\001" +
    "\002\000\004\041\352\001\002\000\004\021\353\001\002" +
    "\000\014\022\057\042\063\043\064\044\055\045\060\001" +
    "\002\000\004\020\355\001\002\000\004\041\356\001\002" +
    "\000\004\035\357\001\002\000\014\022\057\042\063\043" +
    "\064\044\055\045\060\001\002\000\004\020\361\001\002" +
    "\000\004\041\362\001\002\000\006\004\363\010\364\001" +
    "\002\000\004\004\367\001\002\000\004\010\366\001\002" +
    "\000\004\007\uffc5\001\002\000\004\007\uffc2\001\002\000" +
    "\004\007\uffc3\001\002\000\014\022\057\042\063\043\064" +
    "\044\055\045\060\001\002\000\004\020\372\001\002\000" +
    "\004\041\373\001\002\000\004\035\374\001\002\000\014" +
    "\022\057\042\063\043\064\044\055\045\060\001\002\000" +
    "\004\020\376\001\002\000\004\041\377\001\002\000\006" +
    "\004\363\010\364\001\002\000\004\007\uffc4\001\002\000" +
    "\004\014\075\001\002\000\052\003\103\015\100\023\012" +
    "\024\011\025\042\026\037\027\006\030\024\031\043\032" +
    "\005\033\017\041\014\046\036\051\046\053\021\057\177" +
    "\060\203\061\025\064\031\067\047\001\002\000\060\002" +
    "\uffc6\003\uffc6\015\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\041\uffc6\046" +
    "\uffc6\051\uffc6\053\uffc6\057\uffc6\060\uffc6\061\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\001\002\000\052\003\103\015" +
    "\100\023\012\024\011\025\042\026\037\027\006\030\024" +
    "\031\043\032\005\033\017\041\014\046\036\051\046\053" +
    "\021\057\177\060\203\061\025\064\031\067\047\001\002" +
    "\000\060\002\uffc7\003\uffc7\015\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\041\uffc7\046\uffc7\051\uffc7\053\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\016" +
    "\004\162\005\165\007\u0107\010\163\011\164\012\161\001" +
    "\002\000\020\002\uff9c\004\uff9c\005\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\040\002\040\003\014\004\033\005\047\010" +
    "\043\011\015\013\037\015\044\017\034\022\031\026\021" +
    "\027\007\030\032\037\003\041\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\076\010\043\011\015" +
    "\013\141\015\044\017\034\022\031\027\007\030\032\037" +
    "\003\041\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\304\014\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\053\014\060\024\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\076\010\043\011\015\013\037\015\044\017\034\022" +
    "\031\026\100\027\007\030\032\037\003\041\022\043\101" +
    "\001\001\000\004\040\150\001\001\000\002\001\001\000" +
    "\032\004\076\010\043\011\015\013\141\015\044\017\034" +
    "\022\031\027\007\030\032\037\003\041\022\043\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\053\014\060\023\113\024" +
    "\106\031\112\032\115\001\001\000\004\025\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\116\001\001\000\014\011\053\014\060\023\113\024" +
    "\106\031\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\053\014\060\024\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\053\014\060\023\113\024" +
    "\106\031\112\032\145\001\001\000\004\033\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\053\014\060\024\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\171\001\001" +
    "\000\004\002\170\001\001\000\004\002\167\001\001\000" +
    "\004\002\166\001\001\000\004\002\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\053\014\060\023\113" +
    "\024\106\031\112\032\173\001\001\000\004\033\116\001" +
    "\001\000\004\042\175\001\001\000\036\004\076\010\043" +
    "\011\015\013\177\015\044\017\034\022\031\027\007\030" +
    "\032\034\201\035\203\037\003\041\022\043\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\076\010\043" +
    "\011\015\013\177\015\044\017\034\022\031\027\007\030" +
    "\032\034\205\037\003\041\022\043\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\216\006\213\007\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\076\010\043\011\015\013\037\015" +
    "\044\017\034\022\031\026\221\027\007\030\032\037\003" +
    "\041\022\043\222\001\001\000\032\004\076\010\043\011" +
    "\015\013\141\015\044\017\034\022\031\027\007\030\032" +
    "\037\003\041\022\043\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\216\007\232\001\001\000\004" +
    "\042\226\001\001\000\034\004\076\010\043\011\015\013" +
    "\037\015\044\017\034\022\031\026\227\027\007\030\032" +
    "\037\003\041\022\043\230\001\001\000\032\004\076\010" +
    "\043\011\015\013\141\015\044\017\034\022\031\027\007" +
    "\030\032\037\003\041\022\043\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\236\001\001\000\004\036" +
    "\237\001\001\000\002\001\001\000\010\011\053\014\060" +
    "\024\241\001\001\000\002\001\001\000\032\004\076\010" +
    "\043\011\015\013\037\015\044\017\034\022\031\026\243" +
    "\027\007\030\032\037\003\041\022\001\001\000\032\004" +
    "\076\010\043\011\015\013\141\015\044\017\034\022\031" +
    "\027\007\030\032\036\244\037\003\041\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\076\010" +
    "\043\011\015\013\037\015\044\017\034\022\031\026\252" +
    "\027\007\030\032\037\003\041\022\001\001\000\030\004" +
    "\076\010\043\011\015\013\141\015\044\017\034\022\031" +
    "\027\007\030\032\037\003\041\022\001\001\000\002\001" +
    "\001\000\004\043\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\262\001\001\000\034\004\076\010\043\011\015\013\037" +
    "\015\044\017\034\022\031\026\263\027\007\030\032\037" +
    "\003\041\022\043\264\001\001\000\032\004\076\010\043" +
    "\011\015\013\141\015\044\017\034\022\031\027\007\030" +
    "\032\037\003\041\022\043\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\216\006\267\007\212\001" +
    "\001\000\002\001\001\000\004\042\271\001\001\000\034" +
    "\004\076\010\043\011\015\013\037\015\044\017\034\022" +
    "\031\026\272\027\007\030\032\037\003\041\022\043\273" +
    "\001\001\000\032\004\076\010\043\011\015\013\141\015" +
    "\044\017\034\022\031\027\007\030\032\037\003\041\022" +
    "\043\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\276\001\001\000\034\004\076\010\043\011\015" +
    "\013\037\015\044\017\034\022\031\026\277\027\007\030" +
    "\032\037\003\041\022\043\300\001\001\000\032\004\076" +
    "\010\043\011\015\013\141\015\044\017\034\022\031\027" +
    "\007\030\032\037\003\041\022\043\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\053\014\060\023\113\024\106\031\112\032\313" +
    "\001\001\000\004\033\116\001\001\000\004\042\315\001" +
    "\001\000\034\004\076\010\043\011\015\013\037\015\044" +
    "\017\034\022\031\026\316\027\007\030\032\037\003\041" +
    "\022\043\317\001\001\000\032\004\076\010\043\011\015" +
    "\013\141\015\044\017\034\022\031\027\007\030\032\037" +
    "\003\041\022\043\326\001\001\000\002\001\001\000\006" +
    "\030\321\042\322\001\001\000\002\001\001\000\034\004" +
    "\076\010\043\011\015\013\037\015\044\017\034\022\031" +
    "\026\323\027\007\030\032\037\003\041\022\043\324\001" +
    "\001\000\032\004\076\010\043\011\015\013\141\015\044" +
    "\017\034\022\031\027\007\030\032\037\003\041\022\043" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\330\042\331\001\001\000\002\001" +
    "\001\000\034\004\076\010\043\011\015\013\037\015\044" +
    "\017\034\022\031\026\332\027\007\030\032\037\003\041" +
    "\022\043\333\001\001\000\032\004\076\010\043\011\015" +
    "\013\141\015\044\017\034\022\031\027\007\030\032\037" +
    "\003\041\022\043\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\053\014\060" +
    "\024\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\350\021\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\377\001\001\000\002\001\001\000\004\042" +
    "\u0101\001\001\000\036\004\076\010\043\011\015\013\177" +
    "\015\044\017\034\022\031\027\007\030\032\034\201\035" +
    "\u0103\037\003\041\022\043\u0102\001\001\000\002\001\001" +
    "\000\034\004\076\010\043\011\015\013\177\015\044\017" +
    "\034\022\031\027\007\030\032\034\205\037\003\041\022" +
    "\043\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    int tabs = 0;
    boolean lock = false;
    StringBuilder salida = new StringBuilder();

    LinkedList<Expresion> expresiones = new LinkedList<>();
    LinkedList<Expresion> secundaria = new LinkedList();
    
    private void addLine(){
        salida.append("\n");
    }
    private void addText(String valor){
        salida.append(valor);
    }
    private void addTabs(){
        salida.append("\n");
        for (int i = 0; i < tabs; i++) {
            salida.append("\t");
        }
    }
        public String getSalida(){
        String exit = salida.toString();
        String[] lineas = salida.toString().split("\n");
        StringBuilder nuevo = new StringBuilder();
        for (int i = lineas.length-1; i >= 0; i--) {
            if (!lineas[i].isEmpty()&&!lineas[i].isBlank()) {
                nuevo.append(lineas[i]).append("\n");
            }
        }
        ArrayList<Integer> cantTabs = contarTabs(nuevo.toString().split("\n"));
        int maxTabs = maxTabNum(cantTabs);
        
        Extras.Formatter formatter= new Extras.Formatter();
        //formatter.Reformat(nuevo.toString().split("\n"), 0, maxTabs, 0, lineas.length, 0);
        return nuevo.toString();
    }
        
  
       public ArrayList<Integer> contarTabs(String[] lineas){
        ArrayList<Integer> cantTabs = new ArrayList<>();
        for (int i = 0; i < lineas.length; i++) {
            char[] caracteres = lineas[i].toCharArray();
            int contador = 0;
            for (int j = 0; j < caracteres.length; j++) {
                if (caracteres[j] == '\t') {
                    contador++;
                }
            }
            cantTabs.add(contador);
            contador = 0;
        }
        maxTabNum(cantTabs);
        System.out.println(cantTabs.toString());
        return cantTabs;
    }

    public int maxTabNum(ArrayList<Integer> cantTabs) {
        int salida = 0;
        for (int i = 0; i < cantTabs.size(); i++) {
            if (cantTabs.get(i) > salida) {
                salida = cantTabs.get(i);
            }
        }
        System.out.println("NUMERO MAXIMO TABS: "+salida);
        return salida;
    }
     public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + MyParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == MyParserSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action_part00000000(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ids 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = getSalida();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentencias 
            {
              String RESULT =null;
		RESULT = getSalida();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error LBRACE 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciasCiclo ::= sentenciaCiclo 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciasCiclo ::= sentenciasCiclo sentenciaCiclo 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencia 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencias sentencia 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= do 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= while 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= for 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= switch 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignacion 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= declaracion 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= console 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= llamada SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= RETURN valor SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= RETURN identifier SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= RETURN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= RETURN llamada 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= error SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // console ::= CONSOLE DOT WRITE LPAREN valorCondicion RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("console",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaCiclo ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaCiclo ::= BREAK SEMI 
            {
              String RESULT =null;
		RESULT = "break;";addLine();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaCiclo ::= CONTINUE SEMI 
            {
              String RESULT =null;
		RESULT = "continue;";addLine();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // do ::= DO llaveApertura sentencias llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // do ::= DO llaveApertura llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicionCompleta ::= condicionIf 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionCompleta ::= condicionCompleta signoLogico condicionIf 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c1+" "+s+" "+c2;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionIf ::= condicion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionIf ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionIf ::= NOT identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = "!"+i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= valorCondicion signoCondicion valorCondicion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v1+" "+s+" "+v2;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= TRUE 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= FALSE 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorCondicion ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valorCondicion ::= valor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valorCondicion ::= llamada 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = l;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // signoLogico ::= AND AND 
            {
              String RESULT =null;
		RESULT = "&&";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // signoLogico ::= OR OR 
            {
              String RESULT =null;
		RESULT = "||";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // signoCondicion ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // signoCondicion ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // signoCondicion ::= LET 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signoCondicion ::= LGT 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // signoCondicion ::= ASIGN ASIGN 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // signoCondicion ::= NOT ASIGN 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracionFor ::= tipo identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracionFor ::= identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forVariation ::= PLUS PLUS 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forVariation ::= MINUS MINUS 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias BREAK SEMI llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI multiCase 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // multiCase ::= CASE valorCondicion COLON sentencias multiCase 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // multiCase ::= CASE valorCondicion COLON sentencias 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= identifier ASIGN valorCondicion SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion ::= tipo identifiers SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion ::= tipo identifiers ASIGN valorCondicion SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifiers ::= identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // identifiers ::= identifiers COMMA identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // llamada ::= identifier LPAREN RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamada ::= identifier LPAREN atributos RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = i+"("+a+")";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributos ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributos ::= atributos identifier 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a+" "+i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // params ::= param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // params ::= params COMMA param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // param ::= tipo identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ids ::= tipo identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ids ::= VOID identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ids ::= tipo identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ids ::= VOID identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ids ::= error RBRACE 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // llaveApertura ::= LBRACE 
            {
              Object RESULT =null;
		tabs++; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveApertura",32, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // llaveCierre ::= RBRACE 
            {
              Object RESULT =null;
		tabs--; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveCierre",33, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() + e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= PLUS PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue()+1);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() - e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() * e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		if(e2.doubleValue()!=0){RESULT = new Double(e1.doubleValue() / e2.doubleValue());}
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr MOD expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() % e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = n+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= doubleValue 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double d = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = d+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valor ::= intValue 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valor ::= charValue 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valor ::= stringValue 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("INT");RESULT = "INT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= LONG 
            {
              String RESULT =null;
		System.out.println("LONG");RESULT ="LONG";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("FLOAT");RESULT ="FLOAT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("DOUBLE");RESULT ="DOUBLE";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		System.out.println("DECIMAL");RESULT ="DECIMAL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("STRING");RESULT ="STRING";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("CHAR");RESULT ="CHAR";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo ::= BOOL 
            {
              String RESULT =null;
		System.out.println("BOOL");RESULT ="BOOL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(i); RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
              return CUP$MyParser$do_action_part00000000(
                               CUP$MyParser$act_num,
                               CUP$MyParser$parser,
                               CUP$MyParser$stack,
                               CUP$MyParser$top);
    }
}

}
