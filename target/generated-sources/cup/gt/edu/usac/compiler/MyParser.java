
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\027\003\000\002\027\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\004\000\002" +
    "\030\013\000\002\030\013\000\002\030\012\000\002\030" +
    "\012\000\002\023\011\000\002\023\011\000\002\023\010" +
    "\000\002\023\010\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\020\011\000\002\020\010\000\002\022\015" +
    "\000\002\022\014\000\002\021\004\000\002\021\004\000" +
    "\002\016\007\000\002\016\006\000\002\016\006\000\002" +
    "\011\005\000\002\011\007\000\002\011\007\000\002\012" +
    "\005\000\002\012\006\000\002\013\003\000\002\013\004" +
    "\000\002\007\003\000\002\007\005\000\002\010\004\000" +
    "\002\006\011\000\002\006\012\000\002\006\011\000\002" +
    "\006\012\000\002\006\010\000\002\006\011\000\002\006" +
    "\010\000\002\006\011\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\004\000\002\002\005\000\002" +
    "\002\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\044\004\005\006\016\010\033\017\037\022" +
    "\027\023\036\024\011\025\004\026\026\027\040\030\015" +
    "\031\024\032\013\033\035\041\010\046\014\051\020\001" +
    "\002\000\004\041\uffba\001\002\000\004\004\270\001\002" +
    "\000\016\002\ufffe\004\154\005\157\010\155\011\156\012" +
    "\153\001\002\000\004\041\253\001\002\000\010\006\075" +
    "\021\245\041\uffb3\001\002\000\004\041\uffbb\001\002\000" +
    "\034\002\uffff\023\036\024\011\025\004\026\026\027\040" +
    "\030\015\031\024\032\013\033\035\041\010\046\014\051" +
    "\020\001\002\000\004\041\uffb5\001\002\000\004\006\230" +
    "\001\002\000\004\041\uffb7\001\002\000\012\004\005\006" +
    "\016\010\033\022\027\001\002\000\036\002\ufff8\015\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\041\ufff8\046\ufff8\051\ufff8\001\002" +
    "\000\004\014\167\001\002\000\004\020\166\001\002\000" +
    "\036\002\ufff7\015\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\041\ufff7\046" +
    "\ufff7\051\ufff7\001\002\000\004\002\165\001\002\000\004" +
    "\041\uffb6\001\002\000\036\002\ufffd\015\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\041\ufffd\046\ufffd\051\ufffd\001\002\000\004\041" +
    "\uffb9\001\002\000\020\002\uffc1\004\uffc1\005\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\001\002\000\036\002\ufffa\015" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\041\ufffa\046\ufffa\051\ufffa\001" +
    "\002\000\036\002\ufffb\015\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\041" +
    "\ufffb\046\ufffb\051\ufffb\001\002\000\004\002\000\001\002" +
    "\000\012\004\005\006\016\010\033\022\027\001\002\000" +
    "\036\002\ufff9\015\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\041\ufff9\046" +
    "\ufff9\051\ufff9\001\002\000\004\041\uffb4\001\002\000\004" +
    "\006\112\001\002\000\004\041\041\001\002\000\004\041" +
    "\uffb8\001\002\000\004\006\042\001\002\000\026\007\046" +
    "\024\011\025\004\026\026\027\040\030\015\031\024\032" +
    "\013\033\035\041\045\001\002\000\006\007\uffd4\016\uffd4" +
    "\001\002\000\006\007\104\016\103\001\002\000\004\041" +
    "\uffb3\001\002\000\004\014\051\001\002\000\004\041\050" +
    "\001\002\000\006\007\uffd2\016\uffd2\001\002\000\034\015" +
    "\053\023\036\024\011\025\004\026\026\027\040\030\015" +
    "\031\024\032\013\033\035\041\010\046\014\051\020\001" +
    "\002\000\004\041\057\001\002\000\004\002\uffcb\001\002" +
    "\000\034\015\055\023\036\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\010\046\014" +
    "\051\020\001\002\000\004\002\uffcf\001\002\000\036\002" +
    "\ufffc\015\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\041\ufffc\046\ufffc\051" +
    "\ufffc\001\002\000\006\020\061\021\060\001\002\000\016" +
    "\022\067\041\064\042\071\043\062\044\070\045\063\001" +
    "\002\000\036\002\uffdb\015\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\041" +
    "\uffdb\046\uffdb\051\uffdb\001\002\000\016\007\uffbc\020\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\001\002\000\016\007" +
    "\uffbd\020\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\001\002" +
    "\000\006\006\075\020\074\001\002\000\004\020\073\001" +
    "\002\000\004\020\072\001\002\000\016\007\uffc0\020\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\001\002\000\016\007" +
    "\uffbe\020\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\001\002" +
    "\000\016\007\uffbf\020\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\001\002\000\036\002\uffda\015\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\041\uffda\046\uffda\051\uffda\001\002\000\036\002\uffde" +
    "\015\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\041\uffde\046\uffde\051\uffde" +
    "\001\002\000\036\002\uffd9\015\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\041\uffd9\046\uffd9\051\uffd9\001\002\000\006\007\077\041" +
    "\100\001\002\000\006\007\101\041\102\001\002\000\004" +
    "\020\uffd8\001\002\000\006\007\uffd6\041\uffd6\001\002\000" +
    "\004\020\uffd7\001\002\000\006\007\uffd5\041\uffd5\001\002" +
    "\000\024\024\011\025\004\026\026\027\040\030\015\031" +
    "\024\032\013\033\035\041\045\001\002\000\004\014\105" +
    "\001\002\000\034\015\106\023\036\024\011\025\004\026" +
    "\026\027\040\030\015\031\024\032\013\033\035\041\010" +
    "\046\014\051\020\001\002\000\004\002\uffca\001\002\000" +
    "\034\015\110\023\036\024\011\025\004\026\026\027\040" +
    "\030\015\031\024\032\013\033\035\041\010\046\014\051" +
    "\020\001\002\000\004\002\uffce\001\002\000\006\007\uffd3" +
    "\016\uffd3\001\002\000\024\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\114\001\002" +
    "\000\004\007\145\001\002\000\006\021\134\041\uffb3\001" +
    "\002\000\004\041\116\001\002\000\004\021\117\001\002" +
    "\000\014\022\067\042\071\043\062\044\070\045\063\001" +
    "\002\000\004\020\121\001\002\000\004\041\122\001\002" +
    "\000\004\035\123\001\002\000\014\022\067\042\071\043" +
    "\062\044\070\045\063\001\002\000\004\020\125\001\002" +
    "\000\004\041\126\001\002\000\006\004\127\010\130\001" +
    "\002\000\004\004\133\001\002\000\004\010\132\001\002" +
    "\000\004\007\uffe2\001\002\000\004\007\uffdf\001\002\000" +
    "\004\007\uffe0\001\002\000\014\022\067\042\071\043\062" +
    "\044\070\045\063\001\002\000\004\020\136\001\002\000" +
    "\004\041\137\001\002\000\004\035\140\001\002\000\014" +
    "\022\067\042\071\043\062\044\070\045\063\001\002\000" +
    "\004\020\142\001\002\000\004\041\143\001\002\000\006" +
    "\004\127\010\130\001\002\000\004\007\uffe1\001\002\000" +
    "\004\014\146\001\002\000\034\015\147\023\036\024\011" +
    "\025\004\026\026\027\040\030\015\031\024\032\013\033" +
    "\035\041\010\046\014\051\020\001\002\000\036\002\uffe3" +
    "\015\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\041\uffe3\046\uffe3\051\uffe3" +
    "\001\002\000\034\015\151\023\036\024\011\025\004\026" +
    "\026\027\040\030\015\031\024\032\013\033\035\041\010" +
    "\046\014\051\020\001\002\000\036\002\uffe4\015\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\041\uffe4\046\uffe4\051\uffe4\001\002\000" +
    "\020\002\uffc3\004\uffc3\005\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\001\002\000\012\004\005\006\016\010\033\022" +
    "\027\001\002\000\012\004\005\006\016\010\033\022\027" +
    "\001\002\000\012\004\005\006\016\010\033\022\027\001" +
    "\002\000\012\004\005\006\016\010\033\022\027\001\002" +
    "\000\012\004\005\006\016\010\033\022\027\001\002\000" +
    "\020\002\uffc6\004\uffc6\005\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\001\002\000\020\002\uffc5\004\uffc5\005\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\001\002\000\020\002\uffc7" +
    "\004\uffc7\005\157\007\uffc7\010\uffc7\011\156\012\153\001" +
    "\002\000\020\002\uffc9\004\uffc9\005\157\007\uffc9\010\uffc9" +
    "\011\156\012\153\001\002\000\020\002\uffc4\004\uffc4\005" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\001\002\000\004" +
    "\002\001\001\002\000\036\002\ufff6\015\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\041\ufff6\046\ufff6\051\ufff6\001\002\000\034\015" +
    "\170\023\036\024\011\025\004\026\026\027\040\030\015" +
    "\031\024\032\013\033\035\041\010\046\014\051\020\001" +
    "\002\000\004\046\216\001\002\000\034\015\172\023\036" +
    "\024\011\025\004\026\026\027\040\030\015\031\024\032" +
    "\013\033\035\041\010\046\014\051\020\001\002\000\004" +
    "\046\173\001\002\000\004\006\174\001\002\000\022\022" +
    "\067\041\201\042\071\043\062\044\070\045\063\047\176" +
    "\050\200\001\002\000\012\035\210\036\211\037\212\040" +
    "\213\001\002\000\004\007\uffec\001\002\000\014\007\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000\004\007" +
    "\uffeb\001\002\000\014\007\205\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\001\002\000\004\007\203\001\002\000\004\020" +
    "\204\001\002\000\036\002\ufff5\015\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\041\ufff5\046\ufff5\051\ufff5\001\002\000\004\020\206" +
    "\001\002\000\036\002\ufff4\015\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\041\ufff4\046\ufff4\051\ufff4\001\002\000\016\022\067\041" +
    "\214\042\071\043\062\044\070\045\063\001\002\000\016" +
    "\022\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\001" +
    "\002\000\016\022\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\001\002\000\016\022\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\001\002\000\016\022\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\001\002\000\004\007" +
    "\uffea\001\002\000\004\007\uffed\001\002\000\004\006\217" +
    "\001\002\000\022\022\067\041\220\042\071\043\062\044" +
    "\070\045\063\047\176\050\200\001\002\000\014\007\224" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\001\002\000\004\007" +
    "\222\001\002\000\004\020\223\001\002\000\036\002\ufff3" +
    "\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\041\ufff3\046\ufff3\051\ufff3" +
    "\001\002\000\004\020\225\001\002\000\036\002\ufff2\015" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\041\ufff2\046\ufff2\051\ufff2\001" +
    "\002\000\016\004\154\005\157\007\227\010\155\011\156" +
    "\012\153\001\002\000\020\002\uffc2\004\uffc2\005\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\001\002\000\022\022\067" +
    "\041\231\042\071\043\062\044\070\045\063\047\176\050" +
    "\200\001\002\000\014\007\240\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\001\002\000\004\007\233\001\002\000\004\014" +
    "\234\001\002\000\034\015\235\023\036\024\011\025\004" +
    "\026\026\027\040\030\015\031\024\032\013\033\035\041" +
    "\010\046\014\051\020\001\002\000\036\002\uffef\015\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\041\uffef\046\uffef\051\uffef\001\002" +
    "\000\034\015\237\023\036\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\010\046\014" +
    "\051\020\001\002\000\036\002\ufff1\015\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\041\ufff1\046\ufff1\051\ufff1\001\002\000\004\014" +
    "\241\001\002\000\034\015\242\023\036\024\011\025\004" +
    "\026\026\027\040\030\015\031\024\032\013\033\035\041" +
    "\010\046\014\051\020\001\002\000\036\002\uffee\015\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\041\uffee\046\uffee\051\uffee\001\002" +
    "\000\034\015\244\023\036\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\010\046\014" +
    "\051\020\001\002\000\036\002\ufff0\015\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\041\ufff0\046\ufff0\051\ufff0\001\002\000\016\022" +
    "\067\041\246\042\071\043\062\044\070\045\063\001\002" +
    "\000\004\006\075\001\002\000\004\020\252\001\002\000" +
    "\004\020\251\001\002\000\036\002\uffdc\015\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\041\uffdc\046\uffdc\051\uffdc\001\002\000\036" +
    "\002\uffdd\015\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\041\uffdd\046\uffdd" +
    "\051\uffdd\001\002\000\010\006\254\020\061\021\060\001" +
    "\002\000\026\007\256\024\011\025\004\026\026\027\040" +
    "\030\015\031\024\032\013\033\035\041\045\001\002\000" +
    "\006\007\263\016\103\001\002\000\004\014\257\001\002" +
    "\000\034\015\260\023\036\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\010\046\014" +
    "\051\020\001\002\000\004\002\uffcd\001\002\000\034\015" +
    "\262\023\036\024\011\025\004\026\026\027\040\030\015" +
    "\031\024\032\013\033\035\041\010\046\014\051\020\001" +
    "\002\000\004\002\uffd1\001\002\000\004\014\264\001\002" +
    "\000\034\015\265\023\036\024\011\025\004\026\026\027" +
    "\040\030\015\031\024\032\013\033\035\041\010\046\014" +
    "\051\020\001\002\000\004\002\uffcc\001\002\000\034\015" +
    "\267\023\036\024\011\025\004\026\026\027\040\030\015" +
    "\031\024\032\013\033\035\041\010\046\014\051\020\001" +
    "\002\000\004\002\uffd0\001\002\000\012\004\005\006\016" +
    "\010\033\022\027\001\002\000\020\002\uffc8\004\uffc8\005" +
    "\157\007\uffc8\010\uffc8\011\156\012\153\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\032\002\005\003\022\005\006\006\031\011" +
    "\021\012\020\014\024\016\016\020\033\023\027\027\011" +
    "\030\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\051\011\021\012\020\014\055\016" +
    "\016\020\033\023\027\030\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\046\007\043\010\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\051" +
    "\011\021\012\020\014\024\016\016\020\033\023\027\027" +
    "\053\030\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\051\011\021\012\020\014\055\016\016\020" +
    "\033\023\027\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\064\015\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\046\010\110\001\001\000\002\001\001\000\024\005\051" +
    "\011\021\012\020\014\024\016\016\020\033\023\027\027" +
    "\106\030\030\001\001\000\002\001\001\000\022\005\051" +
    "\011\021\012\020\014\055\016\016\020\033\023\027\030" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\114\022\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\051" +
    "\011\021\012\020\014\024\016\016\020\033\023\027\027" +
    "\147\030\030\001\001\000\002\001\001\000\022\005\051" +
    "\011\021\012\020\014\055\016\016\020\033\023\027\030" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\163\001\001\000\004\002\162\001\001\000\004\002" +
    "\161\001\001\000\004\002\160\001\001\000\004\002\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\051\011\021\012\020\014" +
    "\024\016\016\020\033\023\027\027\170\030\030\001\001" +
    "\000\002\001\001\000\022\005\051\011\021\012\020\014" +
    "\055\016\016\020\033\023\027\030\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\176\024\201\025" +
    "\174\001\001\000\004\026\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\176\025\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\176\024\220\025\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\176\024\231\025" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\051\011\021\012\020\014\024\016" +
    "\016\020\033\023\027\027\235\030\030\001\001\000\002" +
    "\001\001\000\022\005\051\011\021\012\020\014\055\016" +
    "\016\020\033\023\027\030\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\051\011\021\012\020\014" +
    "\024\016\016\020\033\023\027\027\242\030\030\001\001" +
    "\000\002\001\001\000\022\005\051\011\021\012\020\014" +
    "\055\016\016\020\033\023\027\030\030\001\001\000\002" +
    "\001\001\000\006\012\247\015\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\007" +
    "\254\010\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\051\011\021\012\020\014\024\016\016\020" +
    "\033\023\027\027\260\030\030\001\001\000\002\001\001" +
    "\000\022\005\051\011\021\012\020\014\055\016\016\020" +
    "\033\023\027\030\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\051\011\021\012\020\014\024\016" +
    "\016\020\033\023\027\027\265\030\030\001\001\000\002" +
    "\001\001\000\022\005\051\011\021\012\020\014\055\016" +
    "\016\020\033\023\027\030\030\001\001\000\002\001\001" +
    "\000\004\002\270\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + MyParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == MyParserSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action_part00000000(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ids 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentencias 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= do 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= llamada SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // do ::= DO LBRACE sentencias RBRACE WHILE LPAREN condicion RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // do ::= DO LBRACE sentencias RBRACE WHILE LPAREN identifier RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // do ::= DO LBRACE RBRACE WHILE LPAREN condicion RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // do ::= DO LBRACE RBRACE WHILE LPAREN identifier RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // while ::= WHILE LPAREN condicion RPAREN LBRACE sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // while ::= WHILE LPAREN identifier RPAREN LBRACE sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= WHILE LPAREN condicion RPAREN LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while ::= WHILE LPAREN identifier RPAREN LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion ::= valorCondicion signoCondicion valorCondicion 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion ::= TRUE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicion ::= FALSE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valorCondicion ::= identifier 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valorCondicion ::= valor 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // signoCondicion ::= LT 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // signoCondicion ::= GT 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // signoCondicion ::= LET 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // signoCondicion ::= LGT 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for ::= FOR LPAREN declaracionFor RPAREN LBRACE sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for ::= FOR LPAREN declaracionFor RPAREN LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionFor ::= tipo identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionFor ::= identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // forVariation ::= PLUS PLUS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // forVariation ::= MINUS MINUS 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= tipo identifier ASIGN llamada SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= identifier ASIGN valor SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= identifier ASIGN llamada SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= tipo identifier SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion ::= tipo identifier ASIGN valor SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= tipo identifier ASIGN identifier SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada ::= identifier LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada ::= identifier LPAREN atributos RPAREN 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributos ::= identifier 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributos ::= atributos identifier 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // params ::= param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // params ::= params COMMA param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param ::= tipo identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ids ::= tipo identifier LPAREN RPAREN LBRACE sentencias RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ids ::= tipo identifier LPAREN params RPAREN LBRACE sentencias RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ids ::= VOID identifier LPAREN RPAREN LBRACE sentencias RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ids ::= VOID identifier LPAREN params RPAREN LBRACE sentencias RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ids ::= tipo identifier LPAREN RPAREN LBRACE RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ids ::= tipo identifier LPAREN params RPAREN LBRACE RBRACE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ids ::= VOID identifier LPAREN RPAREN LBRACE RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ids ::= VOID identifier LPAREN params RPAREN LBRACE RBRACE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() + e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= PLUS PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue()+1);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() - e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() * e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		if(e2.doubleValue()!=0){RESULT = new Double(e1.doubleValue() / e2.doubleValue());}
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MOD expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() % e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= doubleValue 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor ::= intValue 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= charValue 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= stringValue 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("INT");RESULT = "INT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= LONG 
            {
              String RESULT =null;
		System.out.println("LONG");RESULT ="LONG";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("FLOAT");RESULT ="FLOAT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("DOUBLE");RESULT ="DOUBLE";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		System.out.println("DECIMAL");RESULT ="DECIMAL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("STRING");RESULT ="STRING";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("CHAR");RESULT ="CHAR";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo ::= BOOL 
            {
              String RESULT =null;
		System.out.println("BOOL");RESULT ="BOOL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(i); RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipoFun ::= tipo 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipoFun",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipoFun ::= VOID 
            {
              String RESULT =null;
		System.out.println("VOID");RESULT ="VOID";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipoFun",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
              return CUP$MyParser$do_action_part00000000(
                               CUP$MyParser$act_num,
                               CUP$MyParser$parser,
                               CUP$MyParser$stack,
                               CUP$MyParser$top);
    }
}

}
