
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java.util.*;
import Data.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\035\003\000\002\035\004" +
    "\000\002\026\003\000\002\026\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\004\000\002\041\011\000" +
    "\002\034\003\000\002\034\004\000\002\034\004\000\002" +
    "\030\011\000\002\030\013\000\002\030\015\000\002\030" +
    "\010\000\002\030\012\000\002\030\014\000\002\030\014" +
    "\000\002\030\013\000\002\027\013\000\002\027\012\000" +
    "\002\022\011\000\002\022\010\000\002\032\003\000\002" +
    "\032\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\033\004\000\002\033\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\004\000\002\025\004\000\002\017\011\000\002\017\010" +
    "\000\002\021\015\000\002\021\014\000\002\020\004\000" +
    "\002\020\004\000\002\037\016\000\002\036\011\000\002" +
    "\036\007\000\002\036\010\000\002\036\006\000\002\015" +
    "\006\000\002\010\005\000\002\010\007\000\002\040\003" +
    "\000\002\040\005\000\002\011\005\000\002\011\006\000" +
    "\002\012\003\000\002\012\004\000\002\006\003\000\002" +
    "\006\005\000\002\007\004\000\002\005\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\012\000\002\005\010" +
    "\000\002\005\011\000\002\005\010\000\002\005\011\000" +
    "\002\005\011\000\002\005\010\000\002\042\003\000\002" +
    "\043\003\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\004\000\002\002\005\000\002\002\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\054\004\020\006\007\010\013\017\027\022" +
    "\026\023\012\024\011\025\041\026\036\027\006\030\024" +
    "\031\042\032\005\033\017\041\014\046\035\051\045\053" +
    "\021\061\025\064\030\067\046\001\002\000\056\002\ufff5" +
    "\015\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\041\ufff5\046\ufff5\051\ufff5" +
    "\053\ufff5\057\ufff5\060\ufff5\061\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\001\002\000\004\041\uff92\001\002\000\004" +
    "\041\uff95\001\002\000\012\004\020\006\007\010\013\022" +
    "\026\001\002\000\056\002\ufff8\015\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\041\ufff8\046\ufff8\051\ufff8\053\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002\000" +
    "\004\041\uff98\001\002\000\004\006\341\001\002\000\012" +
    "\004\020\006\007\010\013\022\026\001\002\000\010\006" +
    "\064\021\335\041\uff90\001\002\000\004\002\334\001\002" +
    "\000\004\020\333\001\002\000\004\041\uff91\001\002\000" +
    "\004\004\331\001\002\000\004\006\306\001\002\000\044" +
    "\002\uffff\023\012\024\011\025\041\026\036\027\006\030" +
    "\024\031\042\032\005\033\017\041\014\046\035\051\045" +
    "\053\021\061\025\064\030\067\046\001\002\000\056\002" +
    "\ufff2\015\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\041\ufff2\046\ufff2\051" +
    "\ufff2\053\ufff2\057\ufff2\060\ufff2\061\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\001\002\000\004\041\uff94\001\002\000" +
    "\020\020\302\022\056\041\303\042\062\043\063\044\054" +
    "\045\057\001\002\000\020\002\uff9e\004\uff9e\005\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\001\002\000\006\041\254" +
    "\062\255\001\002\000\004\006\231\001\002\000\056\002" +
    "\ufff7\015\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\041\ufff7\046\ufff7\051" +
    "\ufff7\053\ufff7\057\ufff7\060\ufff7\061\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\001\002\000\056\002\ufff9\015\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\041\ufff9\046\ufff9\051\ufff9\053\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\001\002\000\004\041\206\001\002\000\056\002\ufff6\015" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\041\ufff6\046\ufff6\051\ufff6\053" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\001\002\000\004\006\170\001\002\000\004\041" +
    "\uff96\001\002\000\054\002\ufffb\015\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\041\ufffb\046\ufffb\051\ufffb\053\ufffb\060\ufffb\061\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\016\002" +
    "\ufffe\004\157\005\162\010\160\011\161\012\156\001\002" +
    "\000\004\041\uff97\001\002\000\004\041\uff93\001\002\000" +
    "\056\002\ufff3\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\041\ufff3\046" +
    "\ufff3\051\ufff3\053\ufff3\057\ufff3\060\ufff3\061\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\001\002\000\056\002\ufff4\015" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\041\ufff4\046\ufff4\051\ufff4\053" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\001\002\000\004\014\074\001\002\000\004\070" +
    "\050\001\002\000\004\002\000\001\002\000\004\071\051" +
    "\001\002\000\004\006\052\001\002\000\016\022\056\041" +
    "\061\042\062\043\063\044\054\045\057\001\002\000\030" +
    "\007\uffd2\020\uffd2\021\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\063\uffd2\001\002\000\030" +
    "\007\uff9b\020\uff9b\021\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\063\uff9b\001\002\000\004" +
    "\007\072\001\002\000\030\007\uff9d\020\uff9d\021\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\063\uff9d\001\002\000\030\007\uff9a\020\uff9a\021\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\063\uff9a\001\002\000\030\007\uffd3\020\uffd3\021\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\063\uffd3\001\002\000\016\006\064\007\uffd4\020\uffd4\055" +
    "\uffd4\056\uffd4\063\uffd4\001\002\000\030\007\uff9c\020\uff9c" +
    "\021\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\063\uff9c\001\002\000\030\007\uff99\020\uff99" +
    "\021\uff99\035\uff99\036\uff99\037\uff99\040\uff99\054\uff99\055" +
    "\uff99\056\uff99\063\uff99\001\002\000\006\007\066\041\067" +
    "\001\002\000\006\007\070\041\071\001\002\000\104\002" +
    "\uffb9\007\uffb9\015\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\046\uffb9" +
    "\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\001\002\000\006\007\uffb7\041\uffb7\001\002\000\104\002" +
    "\uffb8\007\uffb8\015\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\046\uffb8" +
    "\051\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\001\002\000\006\007\uffb6\041\uffb6\001\002\000\004\020" +
    "\073\001\002\000\056\002\uffec\015\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\041\uffec\046\uffec\051\uffec\053\uffec\057\uffec\060\uffec" +
    "\061\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002\000" +
    "\052\015\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\041\uffa8\046\uffa8\051" +
    "\uffa8\053\uffa8\057\uffa8\060\uffa8\061\uffa8\064\uffa8\066\uffa8" +
    "\067\uffa8\001\002\000\044\015\077\023\012\024\011\025" +
    "\041\026\036\027\006\030\024\031\042\032\005\033\017" +
    "\041\014\046\035\051\045\053\021\061\025\064\030\067" +
    "\046\001\002\000\004\041\147\001\002\000\060\002\uffa7" +
    "\015\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\041\uffa7\046\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\057\uffa7\060\uffa7\061\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\001\002\000\044\015\077\023\012" +
    "\024\011\025\041\026\036\027\006\030\024\031\042\032" +
    "\005\033\017\041\014\046\035\051\045\053\021\061\025" +
    "\064\030\067\046\001\002\000\004\046\102\001\002\000" +
    "\004\006\103\001\002\000\024\022\056\041\107\042\062" +
    "\043\063\044\054\045\057\047\105\050\106\054\112\001" +
    "\002\000\016\021\126\035\127\036\130\037\131\040\133" +
    "\054\132\001\002\000\010\007\uffd6\055\uffd6\056\uffd6\001" +
    "\002\000\010\007\uffd5\055\uffd5\056\uffd5\001\002\000\026" +
    "\006\064\007\uffd9\021\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\054\uffd4\055\uffd9\056\uffd9\001\002\000\010\007\uffdc" +
    "\055\uffdc\056\uffdc\001\002\000\010\007\uffda\055\uffda\056" +
    "\uffda\001\002\000\004\041\124\001\002\000\010\007\115" +
    "\055\116\056\117\001\002\000\024\022\056\041\107\042" +
    "\062\043\063\044\054\045\057\047\105\050\106\054\112" +
    "\001\002\000\004\020\122\001\002\000\004\055\121\001" +
    "\002\000\004\056\120\001\002\000\024\022\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054" +
    "\uffd0\001\002\000\024\022\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\047\uffd1\050\uffd1\054\uffd1\001\002\000" +
    "\056\002\uffdf\015\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\041\uffdf\046" +
    "\uffdf\051\uffdf\053\uffdf\057\uffdf\060\uffdf\061\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\001\002\000\010\007\uffdb\055" +
    "\uffdb\056\uffdb\001\002\000\010\007\uffd8\055\uffd8\056\uffd8" +
    "\001\002\000\016\022\056\041\061\042\062\043\063\044" +
    "\054\045\057\001\002\000\004\021\135\001\002\000\016" +
    "\022\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\001" +
    "\002\000\016\022\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\001\002\000\016\022\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\001\002\000\004\021\134\001\002" +
    "\000\016\022\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\001\002\000\016\022\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\001\002\000\016\022\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000\010\007\uffd7" +
    "\055\uffd7\056\uffd7\001\002\000\054\002\ufffa\015\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\041\ufffa\046\ufffa\051\ufffa\053\ufffa\060" +
    "\ufffa\061\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002" +
    "\000\004\046\141\001\002\000\004\006\142\001\002\000" +
    "\024\022\056\041\107\042\062\043\063\044\054\045\057" +
    "\047\105\050\106\054\112\001\002\000\010\007\144\055" +
    "\116\056\117\001\002\000\004\020\145\001\002\000\056" +
    "\002\uffe0\015\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\041\uffe0\046\uffe0" +
    "\051\uffe0\053\uffe0\057\uffe0\060\uffe0\061\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\001\002\000\010\016\151\020\152" +
    "\021\150\001\002\000\010\016\uffbb\020\uffbb\021\uffbb\001" +
    "\002\000\016\022\056\041\061\042\062\043\063\044\054" +
    "\045\057\001\002\000\004\041\153\001\002\000\056\002" +
    "\uffbd\015\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\041\uffbd\046\uffbd\051" +
    "\uffbd\053\uffbd\057\uffbd\060\uffbd\061\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\001\002\000\010\016\uffba\020\uffba\021" +
    "\uffba\001\002\000\004\020\155\001\002\000\056\002\uffbc" +
    "\015\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\041\uffbc\046\uffbc\051\uffbc" +
    "\053\uffbc\057\uffbc\060\uffbc\061\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\012\004\020\006\007\010\013" +
    "\022\026\001\002\000\012\004\020\006\007\010\013\022" +
    "\026\001\002\000\012\004\020\006\007\010\013\022\026" +
    "\001\002\000\012\004\020\006\007\010\013\022\026\001" +
    "\002\000\012\004\020\006\007\010\013\022\026\001\002" +
    "\000\020\002\uffa3\004\uffa3\005\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\001\002\000\020\002\uffa2\004\uffa2\005\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\001\002\000\020\002" +
    "\uffa4\004\uffa4\005\162\007\uffa4\010\uffa4\011\161\012\156" +
    "\001\002\000\020\002\uffa6\004\uffa6\005\162\007\uffa6\010" +
    "\uffa6\011\161\012\156\001\002\000\020\002\uffa1\004\uffa1" +
    "\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\001\002\000" +
    "\024\022\056\041\107\042\062\043\063\044\054\045\057" +
    "\047\105\050\106\054\112\001\002\000\010\007\172\055" +
    "\116\056\117\001\002\000\004\014\074\001\002\000\050" +
    "\015\077\023\012\024\011\025\041\026\036\027\006\030" +
    "\024\031\042\032\005\033\017\041\014\046\035\051\045" +
    "\053\021\057\174\060\200\061\025\064\030\067\046\001" +
    "\002\000\004\020\205\001\002\000\050\015\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\041\uffeb\046\uffeb\051\uffeb\053\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\064\uffeb\067\uffeb\001\002\000\056\002" +
    "\uffdd\015\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\041\uffdd\046\uffdd\051" +
    "\uffdd\053\uffdd\057\uffdd\060\uffdd\061\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\001\002\000\050\015\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\041\ufffd\046\ufffd\051\ufffd\053\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\064\ufffd\067\ufffd\001\002\000\004\020\204" +
    "\001\002\000\050\015\077\023\012\024\011\025\041\026" +
    "\036\027\006\030\024\031\042\032\005\033\017\041\014" +
    "\046\035\051\045\053\021\057\174\060\200\061\025\064" +
    "\030\067\046\001\002\000\056\002\uffde\015\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\041\uffde\046\uffde\051\uffde\053\uffde\057\uffde" +
    "\060\uffde\061\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001" +
    "\002\000\050\015\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\041\ufffc\046" +
    "\ufffc\051\ufffc\053\ufffc\057\ufffc\060\ufffc\061\ufffc\064\ufffc" +
    "\067\ufffc\001\002\000\050\015\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\041\uffea\046\uffea\051\uffea\053\uffea\057\uffea\060\uffea\061" +
    "\uffea\064\uffea\067\uffea\001\002\000\050\015\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\041\uffe9\046\uffe9\051\uffe9\053\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\064\uffe9\067\uffe9\001\002\000\012\006" +
    "\207\016\uffbb\020\uffbb\021\uffbb\001\002\000\026\007\213" +
    "\024\011\025\041\026\036\027\006\030\024\031\042\032" +
    "\005\033\017\041\212\001\002\000\006\007\uffb5\016\uffb5" +
    "\001\002\000\006\007\223\016\222\001\002\000\004\041" +
    "\uff90\001\002\000\004\014\074\001\002\000\004\041\215" +
    "\001\002\000\006\007\uffb3\016\uffb3\001\002\000\044\015" +
    "\077\023\012\024\011\025\041\026\036\027\006\030\024" +
    "\031\042\032\005\033\017\041\014\046\035\051\045\053" +
    "\021\061\025\064\030\067\046\001\002\000\044\015\077" +
    "\023\012\024\011\025\041\026\036\027\006\030\024\031" +
    "\042\032\005\033\017\041\014\046\035\051\045\053\021" +
    "\061\025\064\030\067\046\001\002\000\004\002\uffae\001" +
    "\002\000\004\002\uffb2\001\002\000\024\024\011\025\041" +
    "\026\036\027\006\030\024\031\042\032\005\033\017\041" +
    "\212\001\002\000\004\014\074\001\002\000\044\015\077" +
    "\023\012\024\011\025\041\026\036\027\006\030\024\031" +
    "\042\032\005\033\017\041\014\046\035\051\045\053\021" +
    "\061\025\064\030\067\046\001\002\000\044\015\077\023" +
    "\012\024\011\025\041\026\036\027\006\030\024\031\042" +
    "\032\005\033\017\041\014\046\035\051\045\053\021\061" +
    "\025\064\030\067\046\001\002\000\004\002\uffad\001\002" +
    "\000\004\002\uffb1\001\002\000\006\007\uffb4\016\uffb4\001" +
    "\002\000\004\041\232\001\002\000\004\007\233\001\002" +
    "\000\004\014\074\001\002\000\004\066\236\001\002\000" +
    "\004\065\246\001\002\000\016\022\056\041\061\042\062" +
    "\043\063\044\054\045\057\001\002\000\004\063\240\001" +
    "\002\000\042\023\012\024\011\025\041\026\036\027\006" +
    "\030\024\031\042\032\005\033\017\041\014\046\035\051" +
    "\045\053\021\061\025\064\030\067\046\001\002\000\050" +
    "\023\012\024\011\025\041\026\036\027\006\030\024\031" +
    "\042\032\005\033\017\041\014\046\035\051\045\053\021" +
    "\060\243\061\025\064\030\065\uffbf\066\236\067\046\001" +
    "\002\000\004\065\uffc1\001\002\000\004\020\244\001\002" +
    "\000\006\065\uffc0\066\236\001\002\000\004\065\uffc2\001" +
    "\002\000\004\063\247\001\002\000\042\023\012\024\011" +
    "\025\041\026\036\027\006\030\024\031\042\032\005\033" +
    "\017\041\014\046\035\051\045\053\021\061\025\064\030" +
    "\067\046\001\002\000\044\023\012\024\011\025\041\026" +
    "\036\027\006\030\024\031\042\032\005\033\017\041\014" +
    "\046\035\051\045\053\021\060\251\061\025\064\030\067" +
    "\046\001\002\000\004\020\252\001\002\000\004\015\077" +
    "\001\002\000\056\002\uffc3\015\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\041\uffc3\046\uffc3\051\uffc3\053\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002\000\004" +
    "\006\264\001\002\000\004\006\256\001\002\000\004\007" +
    "\257\001\002\000\004\014\074\001\002\000\044\015\077" +
    "\023\012\024\011\025\041\026\036\027\006\030\024\031" +
    "\042\032\005\033\017\041\014\046\035\051\045\053\021" +
    "\061\025\064\030\067\046\001\002\000\044\015\077\023" +
    "\012\024\011\025\041\026\036\027\006\030\024\031\042" +
    "\032\005\033\017\041\014\046\035\051\045\053\021\061" +
    "\025\064\030\067\046\001\002\000\004\002\uffa9\001\002" +
    "\000\004\002\uffaa\001\002\000\026\007\266\024\011\025" +
    "\041\026\036\027\006\030\024\031\042\032\005\033\017" +
    "\041\212\001\002\000\006\007\273\016\222\001\002\000" +
    "\004\014\074\001\002\000\044\015\077\023\012\024\011" +
    "\025\041\026\036\027\006\030\024\031\042\032\005\033" +
    "\017\041\014\046\035\051\045\053\021\061\025\064\030" +
    "\067\046\001\002\000\044\015\077\023\012\024\011\025" +
    "\041\026\036\027\006\030\024\031\042\032\005\033\017" +
    "\041\014\046\035\051\045\053\021\061\025\064\030\067" +
    "\046\001\002\000\004\002\uffac\001\002\000\004\002\uffb0" +
    "\001\002\000\004\014\074\001\002\000\044\015\077\023" +
    "\012\024\011\025\041\026\036\027\006\030\024\031\042" +
    "\032\005\033\017\041\014\046\035\051\045\053\021\061" +
    "\025\064\030\067\046\001\002\000\044\015\077\023\012" +
    "\024\011\025\041\026\036\027\006\030\024\031\042\032" +
    "\005\033\017\041\014\046\035\051\045\053\021\061\025" +
    "\064\030\067\046\001\002\000\004\002\uffab\001\002\000" +
    "\004\002\uffaf\001\002\000\056\002\uffed\015\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\041\uffed\046\uffed\051\uffed\053\uffed\057\uffed" +
    "\060\uffed\061\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001" +
    "\002\000\004\020\305\001\002\000\056\002\uffee\015\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\041\uffee\046\uffee\051\uffee\053\uffee" +
    "\057\uffee\060\uffee\061\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\001\002\000\006\006\064\020\304\001\002\000\056" +
    "\002\uffef\015\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\041\uffef\046\uffef" +
    "\051\uffef\053\uffef\057\uffef\060\uffef\061\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\001\002\000\056\002\ufff0\015\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\041\ufff0\046\ufff0\051\ufff0\053\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\001\002\000\024\022\056\041\107\042\062\043\063" +
    "\044\054\045\057\047\105\050\106\054\112\001\002\000" +
    "\010\007\310\055\116\056\117\001\002\000\004\014\074" +
    "\001\002\000\044\015\077\023\012\024\011\025\041\026" +
    "\036\027\006\030\024\031\042\032\005\033\017\041\014" +
    "\046\035\051\045\053\021\061\025\064\030\067\046\001" +
    "\002\000\044\015\077\023\012\024\011\025\041\026\036" +
    "\027\006\030\024\031\042\032\005\033\017\041\014\046" +
    "\035\051\045\053\021\061\025\064\030\067\046\001\002" +
    "\000\060\002\uffe5\015\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\041\uffe5" +
    "\046\uffe5\051\uffe5\052\314\053\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\006" +
    "\014\074\053\021\001\002\000\056\002\uffe4\015\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\041\uffe4\046\uffe4\051\uffe4\053\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\001\002\000\044\015\077\023\012\024\011\025\041\026" +
    "\036\027\006\030\024\031\042\032\005\033\017\041\014" +
    "\046\035\051\045\053\021\061\025\064\030\067\046\001" +
    "\002\000\044\015\077\023\012\024\011\025\041\026\036" +
    "\027\006\030\024\031\042\032\005\033\017\041\014\046" +
    "\035\051\045\053\021\061\025\064\030\067\046\001\002" +
    "\000\056\002\uffe1\015\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\041\uffe1" +
    "\046\uffe1\051\uffe1\053\uffe1\057\uffe1\060\uffe1\061\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\056\002\uffe3" +
    "\015\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\041\uffe3\046\uffe3\051\uffe3" +
    "\053\uffe3\057\uffe3\060\uffe3\061\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\001\002\000\060\002\uffe8\015\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\041\uffe8\046\uffe8\051\uffe8\052\323\053\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\006\014\074\053\021\001\002\000\056" +
    "\002\uffe7\015\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\041\uffe7\046\uffe7" +
    "\051\uffe7\053\uffe7\057\uffe7\060\uffe7\061\uffe7\064\uffe7\065" +
    "\uffe7\066\uffe7\067\uffe7\001\002\000\044\015\077\023\012" +
    "\024\011\025\041\026\036\027\006\030\024\031\042\032" +
    "\005\033\017\041\014\046\035\051\045\053\021\061\025" +
    "\064\030\067\046\001\002\000\044\015\077\023\012\024" +
    "\011\025\041\026\036\027\006\030\024\031\042\032\005" +
    "\033\017\041\014\046\035\051\045\053\021\061\025\064" +
    "\030\067\046\001\002\000\056\002\uffe2\015\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\041\uffe2\046\uffe2\051\uffe2\053\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001" +
    "\002\000\056\002\uffe6\015\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\041" +
    "\uffe6\046\uffe6\051\uffe6\053\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\012\004" +
    "\020\006\007\010\013\022\026\001\002\000\020\002\uffa5" +
    "\004\uffa5\005\162\007\uffa5\010\uffa5\011\161\012\156\001" +
    "\002\000\056\002\ufff1\015\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\041" +
    "\ufff1\046\ufff1\051\ufff1\053\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001\002\000\004\002" +
    "\001\001\002\000\016\022\056\041\061\042\062\043\063" +
    "\044\054\045\057\001\002\000\004\020\337\001\002\000" +
    "\056\002\uffbe\015\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\041\uffbe\046" +
    "\uffbe\051\uffbe\053\uffbe\057\uffbe\060\uffbe\061\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\001\002\000\020\002\uffa0\004" +
    "\uffa0\005\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\001\002" +
    "\000\024\024\011\025\041\026\036\027\006\030\024\031" +
    "\042\032\005\033\017\041\343\001\002\000\004\007\374" +
    "\001\002\000\006\021\363\041\uff90\001\002\000\004\041" +
    "\345\001\002\000\004\021\346\001\002\000\014\022\056" +
    "\042\062\043\063\044\054\045\057\001\002\000\004\020" +
    "\350\001\002\000\004\041\351\001\002\000\004\035\352" +
    "\001\002\000\014\022\056\042\062\043\063\044\054\045" +
    "\057\001\002\000\004\020\354\001\002\000\004\041\355" +
    "\001\002\000\006\004\356\010\357\001\002\000\004\004" +
    "\362\001\002\000\004\010\361\001\002\000\004\007\uffc7" +
    "\001\002\000\004\007\uffc4\001\002\000\004\007\uffc5\001" +
    "\002\000\014\022\056\042\062\043\063\044\054\045\057" +
    "\001\002\000\004\020\365\001\002\000\004\041\366\001" +
    "\002\000\004\035\367\001\002\000\014\022\056\042\062" +
    "\043\063\044\054\045\057\001\002\000\004\020\371\001" +
    "\002\000\004\041\372\001\002\000\006\004\356\010\357" +
    "\001\002\000\004\007\uffc6\001\002\000\004\014\074\001" +
    "\002\000\050\015\077\023\012\024\011\025\041\026\036" +
    "\027\006\030\024\031\042\032\005\033\017\041\014\046" +
    "\035\051\045\053\021\057\174\060\200\061\025\064\030" +
    "\067\046\001\002\000\056\002\uffc8\015\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\041\uffc8\046\uffc8\051\uffc8\053\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002" +
    "\000\050\015\077\023\012\024\011\025\041\026\036\027" +
    "\006\030\024\031\042\032\005\033\017\041\014\046\035" +
    "\051\045\053\021\057\174\060\200\061\025\064\030\067" +
    "\046\001\002\000\056\002\uffc9\015\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\041\uffc9\046\uffc9\051\uffc9\053\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000" +
    "\016\004\157\005\162\007\u0102\010\160\011\161\012\156" +
    "\001\002\000\020\002\uff9f\004\uff9f\005\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\040\002\037\003\014\004\032\005\046\010" +
    "\042\011\015\013\036\015\043\017\033\022\030\026\021" +
    "\027\007\030\031\037\003\041\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\075\010\042\011\015" +
    "\013\136\015\043\017\033\022\030\027\007\030\031\037" +
    "\003\041\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\277\014\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\052\014\057\024\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\075\010\042" +
    "\011\015\013\036\015\043\017\033\022\030\026\077\027" +
    "\007\030\031\037\003\041\022\043\100\001\001\000\004" +
    "\040\145\001\001\000\002\001\001\000\032\004\075\010" +
    "\042\011\015\013\136\015\043\017\033\022\030\027\007" +
    "\030\031\037\003\041\022\043\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\052\014\057\023\110" +
    "\024\103\031\107\032\112\001\001\000\004\025\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\113\001\001\000\014\011\052\014\057\023\110" +
    "\024\103\031\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\052\014\057\024\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\052\014\057\023\110" +
    "\024\103\031\107\032\142\001\001\000\004\033\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\052\014\057\024\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\166\001" +
    "\001\000\004\002\165\001\001\000\004\002\164\001\001" +
    "\000\004\002\163\001\001\000\004\002\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\052\014\057\023" +
    "\110\024\103\031\107\032\170\001\001\000\004\033\113" +
    "\001\001\000\004\042\172\001\001\000\036\004\075\010" +
    "\042\011\015\013\174\015\043\017\033\022\030\027\007" +
    "\030\031\034\176\035\200\037\003\041\022\043\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\075\010" +
    "\042\011\015\013\174\015\043\017\033\022\030\027\007" +
    "\030\031\034\202\037\003\041\022\043\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\213\006\210\007" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\075\010\042\011\015\013\036" +
    "\015\043\017\033\022\030\026\216\027\007\030\031\037" +
    "\003\041\022\043\217\001\001\000\032\004\075\010\042" +
    "\011\015\013\136\015\043\017\033\022\030\027\007\030" +
    "\031\037\003\041\022\043\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\213\007\227\001\001\000" +
    "\004\042\223\001\001\000\034\004\075\010\042\011\015" +
    "\013\036\015\043\017\033\022\030\026\224\027\007\030" +
    "\031\037\003\041\022\043\225\001\001\000\032\004\075" +
    "\010\042\011\015\013\136\015\043\017\033\022\030\027" +
    "\007\030\031\037\003\041\022\043\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\233\001\001\000\004" +
    "\036\234\001\001\000\002\001\001\000\010\011\052\014" +
    "\057\024\236\001\001\000\002\001\001\000\032\004\075" +
    "\010\042\011\015\013\036\015\043\017\033\022\030\026" +
    "\240\027\007\030\031\037\003\041\022\001\001\000\032" +
    "\004\075\010\042\011\015\013\136\015\043\017\033\022" +
    "\030\027\007\030\031\036\241\037\003\041\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\075" +
    "\010\042\011\015\013\036\015\043\017\033\022\030\026" +
    "\247\027\007\030\031\037\003\041\022\001\001\000\030" +
    "\004\075\010\042\011\015\013\136\015\043\017\033\022" +
    "\030\027\007\030\031\037\003\041\022\001\001\000\002" +
    "\001\001\000\004\043\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\257\001\001\000\034\004\075\010\042\011\015\013" +
    "\036\015\043\017\033\022\030\026\260\027\007\030\031" +
    "\037\003\041\022\043\261\001\001\000\032\004\075\010" +
    "\042\011\015\013\136\015\043\017\033\022\030\027\007" +
    "\030\031\037\003\041\022\043\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\213\006\264\007\207" +
    "\001\001\000\002\001\001\000\004\042\266\001\001\000" +
    "\034\004\075\010\042\011\015\013\036\015\043\017\033" +
    "\022\030\026\267\027\007\030\031\037\003\041\022\043" +
    "\270\001\001\000\032\004\075\010\042\011\015\013\136" +
    "\015\043\017\033\022\030\027\007\030\031\037\003\041" +
    "\022\043\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\273\001\001\000\034\004\075\010\042\011" +
    "\015\013\036\015\043\017\033\022\030\026\274\027\007" +
    "\030\031\037\003\041\022\043\275\001\001\000\032\004" +
    "\075\010\042\011\015\013\136\015\043\017\033\022\030" +
    "\027\007\030\031\037\003\041\022\043\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\052\014\057\023\110" +
    "\024\103\031\107\032\306\001\001\000\004\033\113\001" +
    "\001\000\004\042\310\001\001\000\034\004\075\010\042" +
    "\011\015\013\036\015\043\017\033\022\030\026\311\027" +
    "\007\030\031\037\003\041\022\043\312\001\001\000\032" +
    "\004\075\010\042\011\015\013\136\015\043\017\033\022" +
    "\030\027\007\030\031\037\003\041\022\043\321\001\001" +
    "\000\002\001\001\000\006\030\314\042\315\001\001\000" +
    "\002\001\001\000\034\004\075\010\042\011\015\013\036" +
    "\015\043\017\033\022\030\026\316\027\007\030\031\037" +
    "\003\041\022\043\317\001\001\000\032\004\075\010\042" +
    "\011\015\013\136\015\043\017\033\022\030\027\007\030" +
    "\031\037\003\041\022\043\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\323\042" +
    "\324\001\001\000\002\001\001\000\034\004\075\010\042" +
    "\011\015\013\036\015\043\017\033\022\030\026\325\027" +
    "\007\030\031\037\003\041\022\043\326\001\001\000\032" +
    "\004\075\010\042\011\015\013\136\015\043\017\033\022" +
    "\030\027\007\030\031\037\003\041\022\043\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\052\014\057\024\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\343" +
    "\021\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\372\001\001\000" +
    "\002\001\001\000\004\042\374\001\001\000\036\004\075" +
    "\010\042\011\015\013\174\015\043\017\033\022\030\027" +
    "\007\030\031\034\176\035\376\037\003\041\022\043\375" +
    "\001\001\000\002\001\001\000\034\004\075\010\042\011" +
    "\015\013\174\015\043\017\033\022\030\027\007\030\031" +
    "\034\202\037\003\041\022\043\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    int tabs = 0;
    boolean lock = false;
    StringBuilder salida = new StringBuilder();

    private void addLine(){
        salida.append("\n");
    }
    private void addText(String valor){
        salida.append(valor);
    }
    private void addTabs(){
        salida.append("\n");
        for (int i = 0; i < tabs; i++) {
            salida.append("\t");
        }
    }
        public String getSalida(){
        String exit = salida.toString();
        String[] lineas = salida.toString().split("\n");
        StringBuilder nuevo = new StringBuilder();
        for (int i = lineas.length-1; i >= 0; i--) {
            if (!lineas[i].isEmpty()&&!lineas[i].isBlank()) {
                nuevo.append(lineas[i]).append("\n");
            }
        }
        ArrayList<Integer> cantTabs = contarTabs(nuevo.toString().split("\n"));
        int maxTabs = maxTabNum(cantTabs);
        
        Extras.Formatter formatter= new Extras.Formatter();
        //formatter.formatt(nuevo.toString().split("\n"), 0);
        return nuevo.toString();
    }
        
  
       public ArrayList<Integer> contarTabs(String[] lineas){
        ArrayList<Integer> cantTabs = new ArrayList<>();
        for (int i = 0; i < lineas.length; i++) {
            char[] caracteres = lineas[i].toCharArray();
            int contador = 0;
            for (int j = 0; j < caracteres.length; j++) {
                if (caracteres[j] == '\t') {
                    contador++;
                }
            }
            cantTabs.add(contador);
            contador = 0;
        }
        maxTabNum(cantTabs);
        System.out.println(cantTabs.toString());
        return cantTabs;
    }

    public int maxTabNum(ArrayList<Integer> cantTabs) {
        int salida = 0;
        for (int i = 0; i < cantTabs.size(); i++) {
            if (cantTabs.get(i) > salida) {
                salida = cantTabs.get(i);
            }
        }
        System.out.println("NUMERO MAXIMO TABS: "+salida);
        return salida;
    }
     public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + MyParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == MyParserSym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action_part00000000(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ids 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = getSalida();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentencias 
            {
              String RESULT =null;
		RESULT = getSalida();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciasCiclo ::= sentenciaCiclo 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciasCiclo ::= sentenciasCiclo sentenciaCiclo 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= sentencia 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencias sentencia 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= do 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= while 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= for 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= switch 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= asignacion 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= declaracion 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= console 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= llamada SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= RETURN valor SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= RETURN identifier SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= RETURN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= RETURN llamada 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // console ::= CONSOLE DOT WRITE LPAREN valorCondicion RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("console",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaCiclo ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaCiclo ::= BREAK SEMI 
            {
              String RESULT =null;
		RESULT = "break;";addLine();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaCiclo ::= CONTINUE SEMI 
            {
              String RESULT =null;
		RESULT = "continue;";addLine();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE if 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // do ::= DO llaveApertura sentencias llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // do ::= DO llaveApertura llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicionCompleta ::= condicionIf 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicionCompleta ::= condicionCompleta signoLogico condicionIf 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c1+" "+s+" "+c2;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicionIf ::= condicion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionIf ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionIf ::= NOT identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = "!"+i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= valorCondicion signoCondicion valorCondicion 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v1+" "+s+" "+v2;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= TRUE 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= FALSE 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorCondicion ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valorCondicion ::= valor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorCondicion ::= llamada 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = l;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // signoLogico ::= AND AND 
            {
              String RESULT =null;
		RESULT = "&&";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // signoLogico ::= OR OR 
            {
              String RESULT =null;
		RESULT = "||";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // signoCondicion ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // signoCondicion ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // signoCondicion ::= LET 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // signoCondicion ::= LGT 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // signoCondicion ::= ASIGN ASIGN 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signoCondicion ::= NOT ASIGN 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracionFor ::= tipo identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionFor ::= identifier ASIGN valor SEMI identifier LT valor SEMI identifier forVariation 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forVariation ::= PLUS PLUS 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forVariation ::= MINUS MINUS 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias BREAK SEMI llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI multiCase 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // multiCase ::= CASE valorCondicion COLON sentencias multiCase 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // multiCase ::= CASE valorCondicion COLON sentencias 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= identifier ASIGN valorCondicion SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= tipo identifiers SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion ::= tipo identifiers ASIGN valorCondicion SEMI 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // identifiers ::= identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifiers ::= identifiers COMMA identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // llamada ::= identifier LPAREN RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = i+"()";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamada ::= identifier LPAREN atributos RPAREN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = i+"("+a+")";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributos ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributos ::= atributos identifier 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a+" "+i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // params ::= param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // params ::= params COMMA param 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // param ::= tipo identifier 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ids ::= tipo identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ids ::= VOID identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ids ::= tipo identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(i+"  "+t);RESULT=i+"  "+t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ids ::= VOID identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		System.out.println(t);RESULT=t;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura llaveCierre 
            {
              String RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // llaveApertura ::= LBRACE 
            {
              Object RESULT =null;
		tabs++; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveApertura",32, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llaveCierre ::= RBRACE 
            {
              Object RESULT =null;
		tabs--; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveCierre",33, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() + e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= PLUS PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue()+1);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() - e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() * e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		if(e2.doubleValue()!=0){RESULT = new Double(e1.doubleValue() / e2.doubleValue());}
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr MOD expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() % e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = n+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= doubleValue 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double d = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = d+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= intValue 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i+"";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= charValue 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valor ::= stringValue 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("INT");RESULT = "INT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= LONG 
            {
              String RESULT =null;
		System.out.println("LONG");RESULT ="LONG";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("FLOAT");RESULT ="FLOAT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("DOUBLE");RESULT ="DOUBLE";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		System.out.println("DECIMAL");RESULT ="DECIMAL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("STRING");RESULT ="STRING";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("CHAR");RESULT ="CHAR";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= BOOL 
            {
              String RESULT =null;
		System.out.println("BOOL");RESULT ="BOOL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(i); RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
              return CUP$MyParser$do_action_part00000000(
                               CUP$MyParser$act_num,
                               CUP$MyParser$parser,
                               CUP$MyParser$stack,
                               CUP$MyParser$top);
    }
}

}
