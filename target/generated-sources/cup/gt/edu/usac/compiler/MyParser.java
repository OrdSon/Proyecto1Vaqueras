
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java.util.*;
import Data.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\045\003\000\002\045\004\000\002\045\003" +
    "\000\002\045\004\000\002\045\003\000\002\045\004\000" +
    "\002\036\003\000\002\036\004\000\002\027\003\000\002" +
    "\027\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\005\000\002\014\005\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\042\011\000\002\035" +
    "\003\000\002\035\004\000\002\035\004\000\002\031\011" +
    "\000\002\031\013\000\002\031\015\000\002\031\010\000" +
    "\002\031\012\000\002\031\014\000\002\031\014\000\002" +
    "\031\013\000\002\030\013\000\002\030\012\000\002\023" +
    "\011\000\002\023\010\000\002\033\003\000\002\033\005" +
    "\000\002\033\005\000\002\032\003\000\002\032\003\000" +
    "\002\032\004\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\034\004\000\002\034\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\004\000\002\026\004\000\002\020\011\000\002" +
    "\020\010\000\002\022\013\000\002\022\012\000\002\021" +
    "\004\000\002\021\003\000\002\040\016\000\002\040\014" +
    "\000\002\037\011\000\002\037\007\000\002\037\010\000" +
    "\002\037\006\000\002\016\006\000\002\010\005\000\002" +
    "\010\007\000\002\041\003\000\002\041\005\000\002\011" +
    "\005\000\002\011\006\000\002\012\003\000\002\012\003" +
    "\000\002\012\005\000\002\012\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\006\003\000\002\006\005\000\002\007\004\000\002\005" +
    "\011\000\002\005\012\000\002\005\011\000\002\005\012" +
    "\000\002\005\010\000\002\005\011\000\002\005\010\000" +
    "\002\005\011\000\002\005\011\000\002\005\010\000\002" +
    "\005\004\000\002\043\003\000\002\044\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\004\000" +
    "\002\002\005\000\002\002\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\030\003\020\017\011\024\005\025\007\026" +
    "\023\027\015\030\006\031\013\032\024\033\010\041\016" +
    "\001\002\000\032\002\ufffe\003\ufffe\017\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\041\ufffe\001\002\000\004\041\uff88\001\002\000\004\041" +
    "\uff84\001\002\000\004\041\uff87\001\002\000\004\041\uff81" +
    "\001\002\000\006\041\363\064\364\001\002\000\004\002" +
    "\362\001\002\000\004\041\uff83\001\002\000\032\002\ufffa" +
    "\003\ufffa\017\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\041\ufffa\001\002\000\004" +
    "\041\uff85\001\002\000\006\021\333\041\uff80\001\002\000" +
    "\032\002\ufffc\003\ufffc\017\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\041\ufffc\001" +
    "\002\000\006\014\361\020\360\001\002\000\032\002\000" +
    "\003\357\017\011\024\005\025\007\026\023\027\015\030" +
    "\006\031\013\032\024\033\010\041\016\001\002\000\004" +
    "\041\026\001\002\000\004\041\uff86\001\002\000\004\041" +
    "\uff82\001\002\000\010\016\347\020\350\021\346\001\002" +
    "\000\012\006\027\016\uffb3\020\uffb3\021\uffb3\001\002\000" +
    "\026\007\033\024\005\025\007\026\023\027\015\030\006" +
    "\031\013\032\024\033\010\041\032\001\002\000\006\007" +
    "\uffa7\016\uffa7\001\002\000\006\007\340\016\337\001\002" +
    "\000\004\041\uff80\001\002\000\004\014\036\001\002\000" +
    "\004\041\035\001\002\000\006\007\uffa5\016\uffa5\001\002" +
    "\000\054\003\uff99\015\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\041\uff99" +
    "\050\uff99\053\uff99\055\uff99\061\uff99\062\uff99\063\uff99\066" +
    "\uff99\070\uff99\071\uff99\001\002\000\046\003\062\015\042" +
    "\023\066\024\005\025\007\026\023\027\015\030\006\031" +
    "\013\032\024\033\010\041\041\050\044\053\053\055\050" +
    "\063\045\066\047\071\046\001\002\000\004\041\336\001" +
    "\002\000\010\006\122\021\333\041\uff80\001\002\000\064" +
    "\002\uff98\003\uff98\015\uff98\017\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\041\uff98\050\uff98\053\uff98\054\uff98\055\uff98\061\uff98\062" +
    "\uff98\063\uff98\066\uff98\067\uff98\070\uff98\071\uff98\001\002" +
    "\000\046\003\062\015\042\023\066\024\005\025\007\026" +
    "\023\027\015\030\006\031\013\032\024\033\010\041\041" +
    "\050\044\053\053\055\050\063\045\066\047\071\046\001" +
    "\002\000\004\006\323\001\002\000\022\020\317\041\320" +
    "\042\103\043\075\044\101\045\076\051\077\052\102\001" +
    "\002\000\004\072\302\001\002\000\004\006\252\001\002" +
    "\000\004\006\227\001\002\000\056\003\uffef\015\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\041\uffef\050\uffef\053\uffef\055\uffef\061" +
    "\uffef\062\uffef\063\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\001\002\000\004\020\226\001\002\000\004\014\036\001" +
    "\002\000\056\003\uffee\015\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\041" +
    "\uffee\050\uffee\053\uffee\055\uffee\061\uffee\062\uffee\063\uffee" +
    "\066\uffee\067\uffee\070\uffee\071\uffee\001\002\000\054\003" +
    "\ufff6\015\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\041\ufff6\050\ufff6\053" +
    "\ufff6\055\ufff6\062\ufff6\063\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\001\002\000\056\003\ufff4\015\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\041\ufff4\050\ufff4\053\ufff4\055\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\001\002" +
    "\000\032\002\uffa0\003\uffa0\017\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\041\uffa0" +
    "\001\002\000\056\003\ufff2\015\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\041\ufff2\050\ufff2\053\ufff2\055\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\001\002\000\056" +
    "\003\ufff3\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\041\ufff3\050\ufff3" +
    "\053\ufff3\055\ufff3\061\ufff3\062\ufff3\063\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\071\ufff3\001\002\000\044\003\062\023\066" +
    "\024\005\025\007\026\023\027\015\030\006\031\013\032" +
    "\024\033\010\041\041\050\044\053\053\055\050\063\045" +
    "\066\047\071\046\001\002\000\056\003\uffed\015\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\041\uffed\050\uffed\053\uffed\055\uffed\061" +
    "\uffed\062\uffed\063\uffed\066\uffed\067\uffed\070\uffed\071\uffed" +
    "\001\002\000\056\003\ufff1\015\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\041\ufff1\050\ufff1\053\ufff1\055\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000\056" +
    "\003\ufff0\015\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\041\ufff0\050\ufff0" +
    "\053\ufff0\055\ufff0\061\ufff0\062\ufff0\063\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\071\ufff0\001\002\000\004\006\067\001\002" +
    "\000\024\024\005\025\007\026\023\027\015\030\006\031" +
    "\013\032\024\033\010\041\071\001\002\000\004\007\154" +
    "\001\002\000\006\021\145\041\uff80\001\002\000\004\041" +
    "\073\001\002\000\004\021\074\001\002\000\016\042\103" +
    "\043\075\044\101\045\076\051\077\052\102\001\002\000" +
    "\036\004\uff8b\007\uff8b\016\uff8b\020\uff8b\021\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\047\uff8b\056\uff8b\057\uff8b\060" +
    "\uff8b\065\uff8b\001\002\000\036\004\uff8c\007\uff8c\016\uff8c" +
    "\020\uff8c\021\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\047" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\065\uff8c\001\002\000\022" +
    "\004\uff8a\007\uff8a\016\uff8a\020\uff8a\047\uff8a\057\uff8a\060" +
    "\uff8a\065\uff8a\001\002\000\004\020\104\001\002\000\036" +
    "\004\uff8d\007\uff8d\016\uff8d\020\uff8d\021\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\047\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\065\uff8d\001\002\000\022\004\uff89\007\uff89\016\uff89\020" +
    "\uff89\047\uff89\057\uff89\060\uff89\065\uff89\001\002\000\036" +
    "\004\uff8e\007\uff8e\016\uff8e\020\uff8e\021\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\047\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\065\uff8e\001\002\000\020\041\112\042\103\043\075\044" +
    "\101\045\076\051\110\052\111\001\002\000\034\004\uffcb" +
    "\007\uffcb\020\uffcb\021\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\047\uffcb\056\uffcb\057\uffcb\060\uffcb\065\uffcb\001\002" +
    "\000\016\021\133\035\135\036\136\037\137\040\141\056" +
    "\140\001\002\000\034\004\uffcc\007\uffcc\020\uffcc\021\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\047\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\065\uffcc\001\002\000\032\004\uffcf\007\uffcf" +
    "\020\uffcf\021\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\047" +
    "\uffcf\056\uff8a\057\uffcf\060\uffcf\001\002\000\032\004\uffce" +
    "\007\uffce\020\uffce\021\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\047\uffce\056\uff89\057\uffce\060\uffce\001\002\000\036" +
    "\004\uffcd\006\122\007\uffcd\020\uffcd\021\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\047\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\065\uffcd\001\002\000\004\020\114\001\002\000\004\041" +
    "\115\001\002\000\006\004\117\047\116\001\002\000\004" +
    "\007\uffbd\001\002\000\004\004\121\001\002\000\004\007" +
    "\uffc0\001\002\000\004\007\uffbe\001\002\000\022\007\125" +
    "\041\124\042\103\043\075\044\101\045\076\051\077\052" +
    "\102\001\002\000\006\007\uffae\016\uffae\001\002\000\006" +
    "\007\uffaf\016\uffaf\001\002\000\110\003\uffb1\004\uffb1\007" +
    "\uffb1\015\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\047\uffb1\050\uffb1" +
    "\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\001\002\000\006\007\130\016\127\001\002\000\020\041" +
    "\131\042\103\043\075\044\101\045\076\051\077\052\102" +
    "\001\002\000\110\003\uffb0\004\uffb0\007\uffb0\015\uffb0\020" +
    "\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\047\uffb0\050\uffb0\053\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\001\002\000\006" +
    "\007\uffad\016\uffad\001\002\000\006\007\uffac\016\uffac\001" +
    "\002\000\004\021\144\001\002\000\020\041\112\042\103" +
    "\043\075\044\101\045\076\051\077\052\102\001\002\000" +
    "\020\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\051\uffc8" +
    "\052\uffc8\001\002\000\020\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\051\uffc7\052\uffc7\001\002\000\020\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\051\uffc6\052\uffc6\001" +
    "\002\000\004\021\142\001\002\000\020\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\001\002\000" +
    "\020\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\051\uffc3" +
    "\052\uffc3\001\002\000\016\004\uffd0\007\uffd0\020\uffd0\047" +
    "\uffd0\057\uffd0\060\uffd0\001\002\000\020\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\001\002\000" +
    "\016\042\103\043\075\044\101\045\076\051\077\052\102" +
    "\001\002\000\004\020\147\001\002\000\020\041\112\042" +
    "\103\043\075\044\101\045\076\051\110\052\111\001\002" +
    "\000\004\020\151\001\002\000\020\041\112\042\103\043" +
    "\075\044\101\045\076\051\110\052\111\001\002\000\006" +
    "\004\117\047\116\001\002\000\004\007\uffbf\001\002\000" +
    "\004\014\036\001\002\000\052\003\062\015\042\023\066" +
    "\024\005\025\007\026\023\027\015\030\006\031\013\032" +
    "\024\033\010\041\041\050\044\053\053\055\050\061\156" +
    "\062\162\063\045\066\047\071\046\001\002\000\004\020" +
    "\167\001\002\000\052\003\uffe5\015\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\041\uffe5\050\uffe5\053\uffe5\055\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\066\uffe5\071\uffe5\001\002\000\056\003\uffc1\015" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\041\uffc1\050\uffc1\053\uffc1\055" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\001\002\000\052\003\ufff8\015\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\041\ufff8\050\ufff8\053\ufff8\055\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\066\ufff8\071\ufff8\001\002\000\004\020\166" +
    "\001\002\000\052\003\062\015\042\023\066\024\005\025" +
    "\007\026\023\027\015\030\006\031\013\032\024\033\010" +
    "\041\041\050\044\053\053\055\050\061\156\062\162\063" +
    "\045\066\047\071\046\001\002\000\056\003\uffc2\015\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\041\uffc2\050\uffc2\053\uffc2\055\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\001\002\000\052\003\ufff7\015\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\041\ufff7\050\ufff7\053\ufff7\055\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\066\ufff7\071\ufff7\001\002\000\052\003\uffe4\015" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\041\uffe4\050\uffe4\053\uffe4\055" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4\071\uffe4\001\002" +
    "\000\052\003\uffe3\015\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\041\uffe3" +
    "\050\uffe3\053\uffe3\055\uffe3\061\uffe3\062\uffe3\063\uffe3\066" +
    "\uffe3\071\uffe3\001\002\000\056\003\uffe7\015\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\041\uffe7\050\uffe7\053\uffe7\055\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\001" +
    "\002\000\046\003\062\015\042\023\066\024\005\025\007" +
    "\026\023\027\015\030\006\031\013\032\024\033\010\041" +
    "\041\050\044\053\053\055\050\063\045\066\047\071\046" +
    "\001\002\000\046\003\062\015\042\023\066\024\005\025" +
    "\007\026\023\027\015\030\006\031\013\032\024\033\010" +
    "\041\041\050\044\053\053\055\050\063\045\066\047\071" +
    "\046\001\002\000\004\050\174\001\002\000\004\006\175" +
    "\001\002\000\024\006\202\041\176\042\103\043\075\044" +
    "\101\045\076\051\110\052\111\056\201\001\002\000\026" +
    "\006\122\007\uffd2\021\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\056\uffcd\057\uffd2\060\uffd2\001\002\000\010\007\uffd3" +
    "\057\uffd3\060\uffd3\001\002\000\010\007\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\022\041\176\042\103\043\075\044\101" +
    "\045\076\051\110\052\111\056\201\001\002\000\024\006" +
    "\202\041\176\042\103\043\075\044\101\045\076\051\110" +
    "\052\111\056\201\001\002\000\010\007\204\057\206\060" +
    "\207\001\002\000\004\020\213\001\002\000\022\041\176" +
    "\042\103\043\075\044\101\045\076\051\110\052\111\056" +
    "\201\001\002\000\004\057\211\001\002\000\004\060\210" +
    "\001\002\000\022\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\051\uffc9\052\uffc9\056\uffc9\001\002\000\022\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\051\uffca\052\uffca\056" +
    "\uffca\001\002\000\010\007\uffd5\057\uffd5\060\uffd5\001\002" +
    "\000\056\003\uffd9\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\041\uffd9" +
    "\050\uffd9\053\uffd9\055\uffd9\061\uffd9\062\uffd9\063\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\010\007\215" +
    "\057\206\060\207\001\002\000\010\007\uffd4\057\uffd4\060" +
    "\uffd4\001\002\000\010\007\uffd1\057\uffd1\060\uffd1\001\002" +
    "\000\054\003\ufff5\015\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\041\ufff5" +
    "\050\ufff5\053\ufff5\055\ufff5\062\ufff5\063\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\001\002\000\004\050\221\001\002" +
    "\000\004\006\222\001\002\000\024\006\202\041\176\042" +
    "\103\043\075\044\101\045\076\051\110\052\111\056\201" +
    "\001\002\000\010\007\224\057\206\060\207\001\002\000" +
    "\004\020\225\001\002\000\056\003\uffda\015\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\041\uffda\050\uffda\053\uffda\055\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\067\uffda\070\uffda\071\uffda\001" +
    "\002\000\056\003\uffec\015\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\041" +
    "\uffec\050\uffec\053\uffec\055\uffec\061\uffec\062\uffec\063\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\001\002\000\024\006" +
    "\202\041\176\042\103\043\075\044\101\045\076\051\110" +
    "\052\111\056\201\001\002\000\010\007\231\057\206\060" +
    "\207\001\002\000\004\014\036\001\002\000\046\003\062" +
    "\015\042\023\066\024\005\025\007\026\023\027\015\030" +
    "\006\031\013\032\024\033\010\041\041\050\044\053\053" +
    "\055\050\063\045\066\047\071\046\001\002\000\046\003" +
    "\062\015\042\023\066\024\005\025\007\026\023\027\015" +
    "\030\006\031\013\032\024\033\010\041\041\050\044\053" +
    "\053\055\050\063\045\066\047\071\046\001\002\000\060" +
    "\003\uffdf\015\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\041\uffdf\050\uffdf" +
    "\053\uffdf\054\235\055\uffdf\061\uffdf\062\uffdf\063\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\001\002\000\006\014\036" +
    "\055\050\001\002\000\056\003\uffde\015\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\041\uffde\050\uffde\053\uffde\055\uffde\061\uffde\062" +
    "\uffde\063\uffde\066\uffde\067\uffde\070\uffde\071\uffde\001\002" +
    "\000\046\003\062\015\042\023\066\024\005\025\007\026" +
    "\023\027\015\030\006\031\013\032\024\033\010\041\041" +
    "\050\044\053\053\055\050\063\045\066\047\071\046\001" +
    "\002\000\046\003\062\015\042\023\066\024\005\025\007" +
    "\026\023\027\015\030\006\031\013\032\024\033\010\041" +
    "\041\050\044\053\053\055\050\063\045\066\047\071\046" +
    "\001\002\000\056\003\uffdb\015\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\041\uffdb\050\uffdb\053\uffdb\055\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002\000\056" +
    "\003\uffdd\015\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\041\uffdd\050\uffdd" +
    "\053\uffdd\055\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\071\uffdd\001\002\000\060\003\uffe2\015\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\041\uffe2\050\uffe2\053\uffe2\054\244" +
    "\055\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\001\002\000\006\014\036\055\050\001\002" +
    "\000\056\003\uffe1\015\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\041\uffe1" +
    "\050\uffe1\053\uffe1\055\uffe1\061\uffe1\062\uffe1\063\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\071\uffe1\001\002\000\046\003\062" +
    "\015\042\023\066\024\005\025\007\026\023\027\015\030" +
    "\006\031\013\032\024\033\010\041\041\050\044\053\053" +
    "\055\050\063\045\066\047\071\046\001\002\000\046\003" +
    "\062\015\042\023\066\024\005\025\007\026\023\027\015" +
    "\030\006\031\013\032\024\033\010\041\041\050\044\053" +
    "\053\055\050\063\045\066\047\071\046\001\002\000\056" +
    "\003\uffdc\015\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\041\uffdc\050\uffdc" +
    "\053\uffdc\055\uffdc\061\uffdc\062\uffdc\063\uffdc\066\uffdc\067" +
    "\uffdc\070\uffdc\071\uffdc\001\002\000\056\003\uffe0\015\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\041\uffe0\050\uffe0\053\uffe0\055\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\001\002\000\004\041\253\001\002\000\004\007\254" +
    "\001\002\000\004\014\036\001\002\000\004\070\257\001" +
    "\002\000\006\067\265\070\266\001\002\000\020\041\112" +
    "\042\103\043\075\044\101\045\076\051\077\052\102\001" +
    "\002\000\004\065\261\001\002\000\044\003\062\023\066" +
    "\024\005\025\007\026\023\027\015\030\006\031\013\032" +
    "\024\033\010\041\041\050\044\053\053\055\050\063\045" +
    "\066\047\071\046\001\002\000\052\003\062\023\066\024" +
    "\005\025\007\026\023\027\015\030\006\031\013\032\024" +
    "\033\010\041\041\050\044\053\053\055\050\062\263\063" +
    "\045\066\047\067\uffb7\070\uffb7\071\046\001\002\000\004" +
    "\020\264\001\002\000\006\067\uffb8\070\uffb8\001\002\000" +
    "\004\065\274\001\002\000\020\041\112\042\103\043\075" +
    "\044\101\045\076\051\077\052\102\001\002\000\004\065" +
    "\270\001\002\000\044\003\062\023\066\024\005\025\007" +
    "\026\023\027\015\030\006\031\013\032\024\033\010\041" +
    "\041\050\044\053\053\055\050\063\045\066\047\071\046" +
    "\001\002\000\052\003\062\023\066\024\005\025\007\026" +
    "\023\027\015\030\006\031\013\032\024\033\010\041\041" +
    "\050\044\053\053\055\050\062\272\063\045\066\047\067" +
    "\uffb9\070\uffb9\071\046\001\002\000\004\020\273\001\002" +
    "\000\006\067\uffba\070\uffba\001\002\000\044\003\062\023" +
    "\066\024\005\025\007\026\023\027\015\030\006\031\013" +
    "\032\024\033\010\041\041\050\044\053\053\055\050\063" +
    "\045\066\047\071\046\001\002\000\050\003\062\015\042" +
    "\023\066\024\005\025\007\026\023\027\015\030\006\031" +
    "\013\032\024\033\010\041\041\050\044\053\053\055\050" +
    "\062\277\063\045\066\047\071\046\001\002\000\056\003" +
    "\uffbb\015\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\041\uffbb\050\uffbb\053" +
    "\uffbb\055\uffbb\061\uffbb\062\uffbb\063\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\001\002\000\004\020\300\001\002\000" +
    "\004\015\042\001\002\000\056\003\uffbc\015\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\041\uffbc\050\uffbc\053\uffbc\055\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\001" +
    "\002\000\004\073\303\001\002\000\004\006\304\001\002" +
    "\000\020\041\307\042\103\043\075\044\101\045\076\051" +
    "\077\052\102\001\002\000\006\004\uffaa\007\uffaa\001\002" +
    "\000\006\004\311\007\310\001\002\000\006\004\uffab\007" +
    "\uffab\001\002\000\004\020\314\001\002\000\020\041\312" +
    "\042\103\043\075\044\101\045\076\051\077\052\102\001" +
    "\002\000\006\004\uffa9\007\uffa9\001\002\000\006\004\uffa8" +
    "\007\uffa8\001\002\000\056\003\uffe6\015\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\041\uffe6\050\uffe6\053\uffe6\055\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002" +
    "\000\056\003\uffe8\015\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\041\uffe8" +
    "\050\uffe8\053\uffe8\055\uffe8\061\uffe8\062\uffe8\063\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\001\002\000\004\020\322" +
    "\001\002\000\056\003\uffe9\015\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\041\uffe9\050\uffe9\053\uffe9\055\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\001\002\000\006" +
    "\006\122\020\321\001\002\000\056\003\uffea\015\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\041\uffea\050\uffea\053\uffea\055\uffea\061" +
    "\uffea\062\uffea\063\uffea\066\uffea\067\uffea\070\uffea\071\uffea" +
    "\001\002\000\056\003\uffeb\015\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\041\uffeb\050\uffeb\053\uffeb\055\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\001\002\000\024" +
    "\006\202\041\176\042\103\043\075\044\101\045\076\051" +
    "\110\052\111\056\201\001\002\000\010\007\325\057\206" +
    "\060\207\001\002\000\004\014\036\001\002\000\052\003" +
    "\062\015\042\023\066\024\005\025\007\026\023\027\015" +
    "\030\006\031\013\032\024\033\010\041\041\050\044\053" +
    "\053\055\050\061\156\062\162\063\045\066\047\071\046" +
    "\001\002\000\056\003\uffd7\015\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\041\uffd7\050\uffd7\053\uffd7\055\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002\000\052" +
    "\003\062\015\042\023\066\024\005\025\007\026\023\027" +
    "\015\030\006\031\013\032\024\033\010\041\041\050\044" +
    "\053\053\055\050\061\156\062\162\063\045\066\047\071" +
    "\046\001\002\000\056\003\uffd8\015\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\041\uffd8\050\uffd8\053\uffd8\055\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\001\002\000" +
    "\032\002\uffa4\003\uffa4\017\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\041\uffa4\001" +
    "\002\000\020\041\112\042\103\043\075\044\101\045\076" +
    "\051\077\052\102\001\002\000\004\020\335\001\002\000" +
    "\062\002\uffb6\003\uffb6\015\uffb6\017\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\041\uffb6\050\uffb6\053\uffb6\055\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000" +
    "\010\016\uffb3\020\uffb3\021\uffb3\001\002\000\024\024\005" +
    "\025\007\026\023\027\015\030\006\031\013\032\024\033" +
    "\010\041\032\001\002\000\004\014\036\001\002\000\046" +
    "\003\062\015\042\023\066\024\005\025\007\026\023\027" +
    "\015\030\006\031\013\032\024\033\010\041\041\050\044" +
    "\053\053\055\050\063\045\066\047\071\046\001\002\000" +
    "\046\003\062\015\042\023\066\024\005\025\007\026\023" +
    "\027\015\030\006\031\013\032\024\033\010\041\041\050" +
    "\044\053\053\055\050\063\045\066\047\071\046\001\002" +
    "\000\032\002\uff9f\003\uff9f\017\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\041\uff9f" +
    "\001\002\000\032\002\uffa3\003\uffa3\017\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\041\uffa3\001\002\000\006\007\uffa6\016\uffa6\001\002\000" +
    "\020\041\112\042\103\043\075\044\101\045\076\051\077" +
    "\052\102\001\002\000\004\041\351\001\002\000\062\002" +
    "\uffb5\003\uffb5\015\uffb5\017\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\041" +
    "\uffb5\050\uffb5\053\uffb5\055\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\071\uffb5\001\002\000\010\016" +
    "\uffb2\020\uffb2\021\uffb2\001\002\000\004\020\353\001\002" +
    "\000\062\002\uffb4\003\uffb4\015\uffb4\017\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\041\uffb4\050\uffb4\053\uffb4\055\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\001\002" +
    "\000\032\002\ufffd\003\ufffd\017\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\041\ufffd" +
    "\001\002\000\032\002\ufff9\003\ufff9\017\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\041\ufff9\001\002\000\032\002\ufffb\003\ufffb\017\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\041\ufffb\001\002\000\004\020\360\001\002\000" +
    "\032\002\uff9a\003\uff9a\017\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\041\uff9a\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\006\373\001\002\000\004\006\365\001\002\000" +
    "\004\007\366\001\002\000\004\014\036\001\002\000\046" +
    "\003\062\015\042\023\066\024\005\025\007\026\023\027" +
    "\015\030\006\031\013\032\024\033\010\041\041\050\044" +
    "\053\053\055\050\063\045\066\047\071\046\001\002\000" +
    "\046\003\062\015\042\023\066\024\005\025\007\026\023" +
    "\027\015\030\006\031\013\032\024\033\010\041\041\050" +
    "\044\053\053\055\050\063\045\066\047\071\046\001\002" +
    "\000\032\002\uff9b\003\uff9b\017\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\041\uff9b" +
    "\001\002\000\032\002\uff9c\003\uff9c\017\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\041\uff9c\001\002\000\026\007\375\024\005\025\007\026" +
    "\023\027\015\030\006\031\013\032\024\033\010\041\032" +
    "\001\002\000\006\007\u0102\016\337\001\002\000\004\014" +
    "\036\001\002\000\046\003\062\015\042\023\066\024\005" +
    "\025\007\026\023\027\015\030\006\031\013\032\024\033" +
    "\010\041\041\050\044\053\053\055\050\063\045\066\047" +
    "\071\046\001\002\000\046\003\062\015\042\023\066\024" +
    "\005\025\007\026\023\027\015\030\006\031\013\032\024" +
    "\033\010\041\041\050\044\053\053\055\050\063\045\066" +
    "\047\071\046\001\002\000\032\002\uff9e\003\uff9e\017\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\041\uff9e\001\002\000\032\002\uffa2\003\uffa2" +
    "\017\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\041\uffa2\001\002\000\004\014\036" +
    "\001\002\000\046\003\062\015\042\023\066\024\005\025" +
    "\007\026\023\027\015\030\006\031\013\032\024\033\010" +
    "\041\041\050\044\053\053\055\050\063\045\066\047\071" +
    "\046\001\002\000\046\003\062\015\042\023\066\024\005" +
    "\025\007\026\023\027\015\030\006\031\013\032\024\033" +
    "\010\041\041\050\044\053\053\055\050\063\045\066\047" +
    "\071\046\001\002\000\032\002\uff9d\003\uff9d\017\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\041\uff9d\001\002\000\032\002\uffa1\003\uffa1\017" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\041\uffa1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\016\003\011\004\021\005\003\010\016\016" +
    "\013\045\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\021\005\353\010\355" +
    "\016\354\001\001\000\004\041\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\033\006\030\007\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\037\010\053\011\051\014\054\016\050" +
    "\020\063\023\057\027\042\030\060\031\055\040\064\042" +
    "\062\044\056\001\001\000\004\041\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\037\010\053\011" +
    "\051\014\216\016\050\020\063\023\057\030\060\031\055" +
    "\040\064\042\062\044\331\001\001\000\002\001\001\000" +
    "\006\011\314\015\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\037\010\053\011\051" +
    "\014\167\016\050\020\063\023\057\030\060\031\055\040" +
    "\064\042\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\071\022" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\104\015\106\024\112\025\105\001\001" +
    "\000\002\001\001\000\004\026\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\125\015\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\104\015\106\025\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\145\001\001\000\002\001\001\000\012" +
    "\011\104\015\106\024\147\025\105\001\001\000\002\001" +
    "\001\000\012\011\104\015\106\024\151\025\105\001\001" +
    "\000\004\021\152\001\001\000\002\001\001\000\004\043" +
    "\154\001\001\000\036\004\037\010\053\011\051\014\156" +
    "\016\050\020\063\023\057\030\060\031\055\035\160\036" +
    "\162\040\064\042\062\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\037\010\053\011\051\014\156" +
    "\016\050\020\063\023\057\030\060\031\055\035\164\040" +
    "\064\042\062\044\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\037\010\053\011\051\014\054\016\050" +
    "\020\063\023\057\027\171\030\060\031\055\040\064\042" +
    "\062\044\172\001\001\000\032\004\037\010\053\011\051" +
    "\014\216\016\050\020\063\023\057\030\060\031\055\040" +
    "\064\042\062\044\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\104\015\106\024\176\025\105\032" +
    "\177\033\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\104\015\106\024\176\025" +
    "\105\032\215\001\001\000\016\011\104\015\106\024\176" +
    "\025\105\032\177\033\213\001\001\000\004\034\204\001" +
    "\001\000\002\001\001\000\014\011\104\015\106\024\176" +
    "\025\105\032\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\104\015\106\024\176\025" +
    "\105\032\177\033\222\001\001\000\004\034\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\104\015\106\024\176\025\105\032\177\033\227" +
    "\001\001\000\004\034\204\001\001\000\004\043\231\001" +
    "\001\000\034\004\037\010\053\011\051\014\054\016\050" +
    "\020\063\023\057\027\232\030\060\031\055\040\064\042" +
    "\062\044\233\001\001\000\032\004\037\010\053\011\051" +
    "\014\216\016\050\020\063\023\057\030\060\031\055\040" +
    "\064\042\062\044\242\001\001\000\002\001\001\000\006" +
    "\031\235\043\236\001\001\000\002\001\001\000\034\004" +
    "\037\010\053\011\051\014\054\016\050\020\063\023\057" +
    "\027\237\030\060\031\055\040\064\042\062\044\240\001" +
    "\001\000\032\004\037\010\053\011\051\014\216\016\050" +
    "\020\063\023\057\030\060\031\055\040\064\042\062\044" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\244\043\245\001\001\000\002\001" +
    "\001\000\034\004\037\010\053\011\051\014\054\016\050" +
    "\020\063\023\057\027\246\030\060\031\055\040\064\042" +
    "\062\044\247\001\001\000\032\004\037\010\053\011\051" +
    "\014\216\016\050\020\063\023\057\030\060\031\055\040" +
    "\064\042\062\044\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\254\001\001\000\004\037\255\001\001\000\002\001\001" +
    "\000\010\011\104\015\106\025\257\001\001\000\002\001" +
    "\001\000\032\004\037\010\053\011\051\014\054\016\050" +
    "\020\063\023\057\027\261\030\060\031\055\040\064\042" +
    "\062\001\001\000\030\004\037\010\053\011\051\014\216" +
    "\016\050\020\063\023\057\030\060\031\055\040\064\042" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\104\015\106\025\266\001\001\000" +
    "\002\001\001\000\032\004\037\010\053\011\051\014\054" +
    "\016\050\020\063\023\057\027\270\030\060\031\055\040" +
    "\064\042\062\001\001\000\030\004\037\010\053\011\051" +
    "\014\216\016\050\020\063\023\057\030\060\031\055\040" +
    "\064\042\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\037\010\053\011\051\014\054\016\050\020" +
    "\063\023\057\027\274\030\060\031\055\040\064\042\062" +
    "\001\001\000\032\004\037\010\053\011\051\014\216\016" +
    "\050\020\063\023\057\030\060\031\055\040\064\042\062" +
    "\044\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\305\015\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\104\015\106\024\176" +
    "\025\105\032\177\033\323\001\001\000\004\034\204\001" +
    "\001\000\004\043\325\001\001\000\036\004\037\010\053" +
    "\011\051\014\156\016\050\020\063\023\057\030\060\031" +
    "\055\035\160\036\327\040\064\042\062\044\326\001\001" +
    "\000\002\001\001\000\034\004\037\010\053\011\051\014" +
    "\156\016\050\020\063\023\057\030\060\031\055\035\164" +
    "\040\064\042\062\044\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\104\015\106\025\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\033\007\344\001\001\000\004\043\340\001\001" +
    "\000\034\004\037\010\053\011\051\014\054\016\050\020" +
    "\063\023\057\027\341\030\060\031\055\040\064\042\062" +
    "\044\342\001\001\000\032\004\037\010\053\011\051\014" +
    "\216\016\050\020\063\023\057\030\060\031\055\040\064" +
    "\042\062\044\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\104\015\106\025\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\366\001\001\000\034\004\037\010\053\011\051\014\054" +
    "\016\050\020\063\023\057\027\367\030\060\031\055\040" +
    "\064\042\062\044\370\001\001\000\032\004\037\010\053" +
    "\011\051\014\216\016\050\020\063\023\057\030\060\031" +
    "\055\040\064\042\062\044\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\033\006\373\007\027\001" +
    "\001\000\002\001\001\000\004\043\375\001\001\000\034" +
    "\004\037\010\053\011\051\014\054\016\050\020\063\023" +
    "\057\027\376\030\060\031\055\040\064\042\062\044\377" +
    "\001\001\000\032\004\037\010\053\011\051\014\216\016" +
    "\050\020\063\023\057\030\060\031\055\040\064\042\062" +
    "\044\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u0102\001\001\000\034\004\037\010\053\011\051" +
    "\014\054\016\050\020\063\023\057\027\u0103\030\060\031" +
    "\055\040\064\042\062\044\u0104\001\001\000\032\004\037" +
    "\010\053\011\051\014\216\016\050\020\063\023\057\030" +
    "\060\031\055\040\064\042\062\044\u0105\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    int tabs = 0;
    boolean lock = false;
    StringBuilder salida = new StringBuilder();
    StringBuilder consoleLog = new StringBuilder();
    ListaExpresiones lista = new ListaExpresiones();
    LinkedList<ListaValores> salidas = new LinkedList<>();
    LinkedList<Declaracion> simbolos = new LinkedList<>();

    Raiz raiz;

    public Raiz getRaiz(){
        return raiz;
    }

    public ListaExpresiones getLista(){
        return lista;
    }

    public LinkedList<ListaValores> getConsoleLog(){
        return salidas;
    }

    public LinkedList<Declaracion> getSimbolos(){
        return simbolos;
    }
    LinkedList<Data.Error> errores = new LinkedList<>();
    public LinkedList<Data.Error> getErrores(){
        return errores;
    }
    private void addLine(){
        salida.append("\n");
    }
    private void addText(String valor){
        salida.append(valor);
    }
    private void addTabs(){
        salida.append("\n");
        for (int i = 0; i < tabs; i++) {
            salida.append("\t");
        }
    }
        public String getSalida(){
        String exit = salida.toString();
        String[] lineas = salida.toString().split("\n");
        StringBuilder nuevo = new StringBuilder();
        for (int i = lineas.length-1; i >= 0; i--) {
            if (!lineas[i].isEmpty()&&!lineas[i].isBlank()) {
                nuevo.append(lineas[i]).append("\n");
            }
        }
        ArrayList<Integer> cantTabs = contarTabs(nuevo.toString().split("\n"));
        int maxTabs = maxTabNum(cantTabs);
        
        for(Data.Error error:errores){
            System.out.println(error.toString());
        }

        Extras.Formatter formatter= new Extras.Formatter();
        //formatter.Reformat(nuevo.toString().split("\n"), 0, maxTabs, 0, lineas.length, 0);
        return nuevo.toString();
    }
        
  
       public ArrayList<Integer> contarTabs(String[] lineas){
        ArrayList<Integer> cantTabs = new ArrayList<>();
        for (int i = 0; i < lineas.length; i++) {
            char[] caracteres = lineas[i].toCharArray();
            int contador = 0;
            for (int j = 0; j < caracteres.length; j++) {
                if (caracteres[j] == '\t') {
                    contador++;
                }
            }
            cantTabs.add(contador);
            contador = 0;
        }
        maxTabNum(cantTabs);
        System.out.println(cantTabs.toString());
        return cantTabs;
    }

    public int maxTabNum(ArrayList<Integer> cantTabs) {
        int salida = 0;
        for (int i = 0; i < cantTabs.size(); i++) {
            if (cantTabs.get(i) > salida) {
                salida = cantTabs.get(i);
            }
        }
        System.out.println("NUMERO MAXIMO TABS: "+salida);
        return salida;
    }
     public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + MyParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        errores.add(new Data.Error(MyParserSym.terminalNames[cur_token.sym], "Sintactico", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        errores.add(new Data.Error(MyParserSym.terminalNames[cur_token.sym], "Sintactico irrecuperable", cur_token.left, cur_token.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action_part00000000(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones start_val = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= funciones 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		lista = f;raiz = new Raiz(f); RESULT = f;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error LBRACE 
            {
              ListaExpresiones RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= ids 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Funcion s = (Funcion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append((Funcion)s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funciones ids 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Funcion i = (Funcion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Funcion)i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= declaracion 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion s = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append((Declaracion)s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones declaracion 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Declaracion)d);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= asignacion 
            {
              ListaExpresiones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append((Asignacion)a);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= funciones asignacion 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Asignacion)a);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciasCiclo ::= sentenciaCiclo 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciasCiclo ::= sentenciasCiclo sentenciaCiclo 
            {
              ListaExpresiones RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones ss = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = ss.append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias ::= sentencia 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias ::= sentencias sentencia 
            {
              ListaExpresiones RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones ss = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = ss.append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= if 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If s = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(s.toString());RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= do 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		DoWhile s = (DoWhile)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= while 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		While s = (While)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= for 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		For s = (For)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= switch 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Switch s = (Switch)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= asignacion 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Asignacion s = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= declaracion 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion s = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= console 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ConsoleLog s = (ConsoleLog)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= llamada SEMI 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = l;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= RETURN valor SEMI 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Return(v, cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= RETURN identifier SEMI 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Return(new Valor(i,"IDENTIFICADOR",cur_token.left, cur_token.right), cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= RETURN SEMI 
            {
              Expresion RESULT =null;
		RESULT = new Return(cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= RETURN llamada 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Llamada i = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Return(new Valor(i,"LLAMADA",cur_token.left, cur_token.right),cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= error sentencia 
            {
              Expresion RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // console ::= CONSOLE DOT WRITE LPAREN consoleInside RPAREN SEMI 
            {
              ConsoleLog RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores c = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		salidas.add(c);RESULT = new ConsoleLog(c,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("console",32, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaCiclo ::= sentencia 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaCiclo ::= BREAK SEMI 
            {
              Expresion RESULT =null;
		BreakContinue sentencia = new BreakContinue();RESULT =sentencia.setFreno(true);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaCiclo ::= CONTINUE SEMI 
            {
              Expresion RESULT =null;
		BreakContinue sentencia = new BreakContinue();RESULT =sentencia.setContinuar(true);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE if 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new If(c,s,e,false,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s2 = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,s,s2,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new If(c,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE if 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new If(c,null,e,false,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura sentencias llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s2 = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,null,s2,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentencias llaveCierre ELSE llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		RESULT = new If(c,s,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		RESULT = new If(c,null,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // do ::= DO llaveApertura sentencias llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              DoWhile RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new DoWhile(s,c,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // do ::= DO llaveApertura llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              DoWhile RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new DoWhile(null,c,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new While(s,c,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionCompleta ::= condicionIf 
            {
              ListaCondiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT= new ListaCondiciones().append(c);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicionCompleta ::= condicionCompleta signoLogico condicionIf 
            {
              ListaCondiciones RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c1 = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c2 = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		c2.setSignoLogico(s);RESULT = c1.append(c2);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionCompleta ::= LPAREN condicionCompleta RPAREN 
            {
              ListaCondiciones RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaCondiciones c1 = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = c1;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionIf ::= condicion 
            {
              Condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionIf ::= identifier 
            {
              Condicion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT =new Condicion(i,false,cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionIf ::= NOT condicionIf 
            {
              Condicion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion i = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT =i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= valorCondicion signoCondicion valorCondicion 
            {
              Condicion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v1 = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v2 = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Condicion(s,v1,v2,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= TRUE 
            {
              Condicion RESULT =null;
		RESULT =new Condicion("TRUE",false,cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= FALSE 
            {
              Condicion RESULT =null;
		RESULT =new Condicion("FALSE",false,cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valorCondicion ::= identifier 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(i,"IDENTIFICADOR",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valorCondicion ::= valor 
            {
              Valor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valorCondicion ::= llamada 
            {
              Valor RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(l,"LLAMADA",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signoLogico ::= AND AND 
            {
              String RESULT =null;
		RESULT = "&&";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // signoLogico ::= OR OR 
            {
              String RESULT =null;
		RESULT = "||";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // signoCondicion ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // signoCondicion ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // signoCondicion ::= LET 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // signoCondicion ::= LGT 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // signoCondicion ::= ASIGN ASIGN 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // signoCondicion ::= NOT ASIGN 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              For RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		DeclaracionFor de = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new For(de,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura llaveCierre 
            {
              For RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		DeclaracionFor de = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new For(de,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracionFor ::= tipo identifier ASIGN valor SEMI condicion SEMI identifier forVariation 
            {
              DeclaracionFor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new DeclaracionFor(new Declaracion(t,new ListaString().append(i),v,cur_token.left,cur_token.right),c,v3);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracionFor ::= identifier ASIGN valor SEMI condicion SEMI condicion forVariation 
            {
              DeclaracionFor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new DeclaracionFor(new Declaracion(null,new ListaString().append(i),v,cur_token.left,cur_token.right),a,v3);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forVariation ::= PLUS PLUS 
            {
              String RESULT =null;
		RESULT = "++";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forVariation ::= MINUS2 
            {
              String RESULT =null;
		RESULT = "--";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias BREAK SEMI llaveCierre 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new Switch(i, m, s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias llaveCierre 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Switch(i, m, s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multiCase ::= multiCase CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              ListaCasos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = m.append(new Case(v,s,true,cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiCase ::= multiCase CASE valorCondicion COLON sentencias 
            {
              ListaCasos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = m.append(new Case(v,s,false,cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              ListaCasos RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new ListaCasos().append(new Case(v,s,true,cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiCase ::= CASE valorCondicion COLON sentencias 
            {
              ListaCasos RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaCasos().append(new Case(v,s,false,cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= identifier ASIGN valorCondicion SEMI 
            {
              Asignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion("asignacion",new ListaString().append(i),v, cur_token.left,cur_token.right));RESULT = new Asignacion(i,v,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion ::= tipo identifiers SEMI 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaString is = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion(t,is,null, cur_token.left,cur_token.right));RESULT = new Declaracion(t,is,null, cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion ::= tipo identifiers ASIGN valorCondicion SEMI 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaString i = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion(t,i,v, cur_token.left,cur_token.right));RESULT = new Declaracion(t,i,v, cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // identifiers ::= identifier 
            {
              ListaString RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaString().append(i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // identifiers ::= identifiers COMMA identifier 
            {
              ListaString RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaString is = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = is.append(i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamada ::= identifier LPAREN RPAREN 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new Llamada(i,null,cur_token.left, cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamada ::= identifier LPAREN atributos RPAREN 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Llamada(i,a,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // atributos ::= identifier 
            {
              ListaValores RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaValores().append(new Valor(i,"IDENTIFICADOR",cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // atributos ::= valor 
            {
              ListaValores RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaValores().append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // atributos ::= atributos COMMA identifier 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a.append(new Valor(i,"IDENTIFICADOR",cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // atributos ::= atributos COMMA valor 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a.append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // consoleInside ::= identifier 
            {
              ListaValores RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaValores().append(new Valor(i,"IDENTIFICADOR",cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // consoleInside ::= valor 
            {
              ListaValores RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaValores().append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // consoleInside ::= consoleInside PLUS identifier 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a.append(new Valor(i,"IDENTIFICADOR",cur_token.left,cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // consoleInside ::= consoleInside PLUS valor 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a.append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // params ::= param 
            {
              ListaParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaParametros().append(p);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // params ::= params COMMA param 
            {
              ListaParametros RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaParametros list = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = list.append(p);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // param ::= tipo identifier 
            {
              Parametro RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Parametro(nomb,tip,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ids ::= tipo identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add( new Declaracion(t,new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion(t,i,null,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion(t,new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion(t,i,p,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ids ::= VOID identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion("void",new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID",i,null,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion("void",new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID",i,p,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ids ::= tipo identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		simbolos.add(new Declaracion(t,new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion(t,i,null,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		simbolos.add(new Declaracion(t,new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion(t,i,p,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ids ::= VOID identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		simbolos.add(new Declaracion("void",new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID",i,null,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		simbolos.add(new Declaracion("void",new ListaString().append(i),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID",i,p,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		simbolos.add(new Declaracion("void",new ListaString().append("main"),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID","main",null,s,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		simbolos.add(new Declaracion("void",new ListaString().append("main"),null, cur_token.left,cur_token.right));RESULT = new Funcion("VOID","main",null,null,cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ids ::= error SEMI 
            {
              Funcion RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // llaveApertura ::= LBRACE 
            {
              Object RESULT =null;
		tabs++; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveApertura",33, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llaveCierre ::= RBRACE 
            {
              Object RESULT =null;
		tabs--; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveCierre",34, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() + e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= PLUS PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue()+1);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() - e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() * e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		if(e2.doubleValue()!=0){RESULT = new Double(e1.doubleValue() / e2.doubleValue());}
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= expr MOD expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Double(e1.doubleValue() % e2.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue());
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = e;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valor ::= doubleValue 
            {
              Valor RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double d = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(d,cur_token.left,cur_token.right,false);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor ::= intValue 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double i = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(i,cur_token.left,cur_token.right,true);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= charValue 
            {
              Valor RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(c,"charValue",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= stringValue 
            {
              Valor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(s,"stringValue",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= TRUE 
            {
              Valor RESULT =null;
		RESULT = new Valor("true","TRUE",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= FALSE 
            {
              Valor RESULT =null;
		RESULT = new Valor("false","FALSE",cur_token.left,cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("INT");RESULT = "INT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo ::= LONG 
            {
              String RESULT =null;
		System.out.println("LONG");RESULT ="LONG";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("FLOAT");RESULT ="FLOAT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("DOUBLE");RESULT ="DOUBLE";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		System.out.println("DECIMAL");RESULT ="DECIMAL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("STRING");RESULT ="STRING";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("CHAR");RESULT ="CHAR";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo ::= BOOL 
            {
              String RESULT =null;
		System.out.println("BOOL");RESULT ="BOOL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(i); RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
              return CUP$MyParser$do_action_part00000000(
                               CUP$MyParser$act_num,
                               CUP$MyParser$parser,
                               CUP$MyParser$stack,
                               CUP$MyParser$top);
    }
}

}
