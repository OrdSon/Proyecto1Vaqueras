// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/Lexer.flex

package gt.edu.usac.compiler;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class IdLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int LINECOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\3\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\30\1\32\1\30\1\33\2\30\1\34\6\30\1\35"+
    "\12\30\1\36\1\37\1\40\1\0\1\41\1\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\30"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\30\1\70"+
    "\1\30\1\71\1\72\1\73\1\74\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\6\25\1\26"+
    "\1\27\21\25\1\30\1\2\1\31\1\32\1\33\2\34"+
    "\1\35\1\33\1\36\1\2\2\3\1\4\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\6\25\1\26"+
    "\1\27\21\25\1\30\1\2\1\31\1\32\4\1\1\37"+
    "\1\40\1\0\1\41\1\42\1\43\1\0\1\44\1\45"+
    "\1\46\1\25\1\47\1\25\1\50\16\25\1\51\1\25"+
    "\1\52\21\25\1\53\2\33\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\2\0\1\37\1\40\3\0\1\3\1\0"+
    "\1\44\1\45\1\46\1\25\1\47\1\25\1\50\16\25"+
    "\1\51\1\25\1\52\21\25\1\53\1\1\1\62\2\0"+
    "\1\3\1\63\20\25\1\64\1\65\1\66\2\25\1\67"+
    "\5\25\1\70\7\25\1\71\4\25\1\33\1\72\1\62"+
    "\1\72\1\3\1\63\20\25\1\64\1\65\1\66\2\25"+
    "\1\67\5\25\1\70\7\25\1\71\4\25\3\1\2\0"+
    "\3\25\1\73\1\74\1\25\1\75\6\25\1\76\1\77"+
    "\4\25\1\100\1\25\1\101\11\25\1\102\1\25\1\103"+
    "\2\25\1\104\1\25\1\33\1\72\3\25\1\73\1\74"+
    "\1\25\1\75\6\25\1\76\1\77\4\25\1\100\1\25"+
    "\1\101\11\25\1\102\1\25\1\103\2\25\1\104\1\25"+
    "\1\1\1\105\2\25\1\106\1\107\1\110\4\25\1\111"+
    "\1\112\14\25\1\113\1\25\1\114\1\115\1\105\2\25"+
    "\1\106\1\107\1\110\4\25\1\111\1\112\14\25\1\113"+
    "\1\25\1\114\1\115\5\25\1\116\3\25\1\117\2\25"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\5\25"+
    "\1\116\3\25\1\117\2\25\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\2\25\1\130\1\131\1\132"+
    "\3\25\1\133\1\127\2\25\1\130\1\131\1\132\3\25"+
    "\1\133\1\25\1\134\2\25\1\135\1\25\1\134\2\25"+
    "\1\135\1\136\1\137\1\140\1\136\1\137\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\364\0\u01ab\0\u01e8\0\364\0\364\0\u0225\0\364\0\364"+
    "\0\364\0\364\0\u0262\0\u029f\0\364\0\364\0\u02dc\0\u0319"+
    "\0\u0356\0\364\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\364\0\364\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\364\0\u090e\0\364\0\364\0\u094b"+
    "\0\364\0\u0988\0\364\0\u09c5\0\u0a02\0\u0a3f\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0a3f\0\u0a3f\0\u0b70\0\u0a3f\0\u0a3f"+
    "\0\u0a3f\0\u0a3f\0\u0bad\0\u0bea\0\u0a3f\0\u0a3f\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0a3f\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0a3f\0\u0a3f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u0a3f\0\u1259\0\u0a3f\0\u0a3f\0\u1296"+
    "\0\364\0\u12d3\0\u1310\0\364\0\364\0\u134d\0\364\0\u138a"+
    "\0\u13c7\0\u1404\0\364\0\364\0\364\0\u1441\0\u0393\0\u147e"+
    "\0\u0393\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u0393"+
    "\0\u1811\0\u0393\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\364\0\u1c5b\0\u1c98\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\u0a3f\0\u1cd5\0\u0a3f\0\u0a3f"+
    "\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u0a3f\0\u0a3f\0\u0a3f"+
    "\0\u1e43\0\u0cde\0\u1e80\0\u0cde\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u0cde\0\u2213\0\u0cde\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u0a3f\0\u265d"+
    "\0\364\0\u269a\0\u26d7\0\u13c7\0\u1404\0\u2714\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u0393\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u0393\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u0393\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77"+
    "\0\u0393\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\364\0\u0a3f"+
    "\0\u269a\0\u2fe5\0\u1e06\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u0cde\0\u342f\0\u346c\0\u34a9"+
    "\0\u0cde\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u0cde\0\u3617"+
    "\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u0cde\0\u37c2"+
    "\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u269a\0\u38f3\0\u3930\0\u396d"+
    "\0\u39aa\0\u39e7\0\u3a24\0\u0393\0\u0393\0\u3a61\0\u0393\0\u3a9e"+
    "\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u0393\0\u0393\0\u3c0c"+
    "\0\u3c49\0\u3c86\0\u3cc3\0\u0393\0\u3d00\0\u0393\0\u3d3d\0\u3d7a"+
    "\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u0393"+
    "\0\u3f62\0\u0393\0\u3f9f\0\u3fdc\0\u0393\0\u4019\0\u4056\0\u13c7"+
    "\0\u4093\0\u40d0\0\u410d\0\u0cde\0\u0cde\0\u414a\0\u0cde\0\u4187"+
    "\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u0cde\0\u0cde\0\u42f5"+
    "\0\u4332\0\u436f\0\u43ac\0\u0cde\0\u43e9\0\u0cde\0\u4426\0\u4463"+
    "\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u0cde"+
    "\0\u464b\0\u0cde\0\u4688\0\u46c5\0\u0cde\0\u4702\0\u473f\0\u0393"+
    "\0\u477c\0\u47b9\0\u0393\0\u0393\0\u0393\0\u47f6\0\u4833\0\u4870"+
    "\0\u48ad\0\u0393\0\u0393\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de"+
    "\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c\0\u4b89\0\u0393"+
    "\0\u4bc6\0\u0393\0\u0393\0\u0cde\0\u4c03\0\u4c40\0\u0cde\0\u0cde"+
    "\0\u0cde\0\u4c7d\0\u4cba\0\u4cf7\0\u4d34\0\u0cde\0\u0cde\0\u4d71"+
    "\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59"+
    "\0\u4f96\0\u4fd3\0\u5010\0\u0cde\0\u504d\0\u0cde\0\u0cde\0\u508a"+
    "\0\u50c7\0\u5104\0\u5141\0\u517e\0\u0393\0\u51bb\0\u51f8\0\u5235"+
    "\0\u0393\0\u5272\0\u52af\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393"+
    "\0\u0393\0\u0393\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0\0\u0cde"+
    "\0\u541d\0\u545a\0\u5497\0\u0cde\0\u54d4\0\u5511\0\u0cde\0\u0cde"+
    "\0\u0cde\0\u0cde\0\u0cde\0\u0cde\0\u0cde\0\u0393\0\u554e\0\u558b"+
    "\0\u0393\0\u0393\0\u0393\0\u55c8\0\u5605\0\u5642\0\u0393\0\u0cde"+
    "\0\u567f\0\u56bc\0\u0cde\0\u0cde\0\u0cde\0\u56f9\0\u5736\0\u5773"+
    "\0\u0cde\0\u57b0\0\u0393\0\u57ed\0\u582a\0\u0393\0\u5867\0\u0cde"+
    "\0\u58a4\0\u58e1\0\u0cde\0\u0393\0\u0393\0\u0393\0\u0cde\0\u0cde"+
    "\0\u0cde";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\5\1\42\1\5"+
    "\1\33\1\43\1\44\1\45\1\46\1\47\1\50\1\33"+
    "\1\51\2\33\1\52\1\33\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\33\1\64\1\65"+
    "\1\66\1\67\2\70\1\71\1\72\1\70\1\73\11\70"+
    "\1\74\17\70\1\75\35\70\1\76\2\77\1\100\1\101"+
    "\1\76\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\2\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\76\1\132\1\76\1\123\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\123\1\141\2\123\1\142\1\123"+
    "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152"+
    "\1\153\1\123\1\154\1\155\1\156\1\157\2\160\1\161"+
    "\1\162\13\160\1\163\55\160\77\0\1\6\117\0\1\164"+
    "\55\0\1\165\116\0\6\166\4\0\27\166\23\0\1\167"+
    "\67\0\1\170\4\0\1\171\73\0\1\172\1\0\2\24"+
    "\100\0\1\173\74\0\1\174\74\0\1\175\64\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\30\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\21\33\1\176\6\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\17\33"+
    "\1\177\10\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\11\33\1\200\16\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\16\33\1\201\11\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\21\33\1\202\6\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\17\33"+
    "\1\203\10\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\204\6\33\1\205\3\33\1\206\2\33"+
    "\1\207\10\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\5\33\1\210\11\33\1\211\10\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\14\33\1\212\1\33"+
    "\1\213\11\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\214\12\33\1\215\2\33\1\216\10\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\5\33"+
    "\1\217\22\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\6\33\1\220\7\33\1\221\3\33\1\222\5\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\17\33"+
    "\1\223\10\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\224\3\33\1\225\16\33\1\226\3\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\2\33"+
    "\1\227\22\33\1\230\2\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\21\33\1\231\2\33\1\232\3\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\5\33"+
    "\1\233\22\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\23\33\1\234\2\33\1\235\1\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\10\33\1\236\10\33"+
    "\1\237\5\33\1\240\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\22\33\1\241\5\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\17\33\1\242\10\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\10\33\1\243"+
    "\17\33\76\0\1\244\2\0\2\70\2\0\1\70\1\0"+
    "\31\70\1\0\35\70\2\0\1\71\72\0\2\70\2\0"+
    "\1\70\1\0\4\70\1\245\4\70\1\246\17\70\1\0"+
    "\35\70\5\0\1\247\12\0\1\250\26\0\1\251\7\0"+
    "\1\252\2\0\1\253\1\0\1\254\10\0\12\255\1\256"+
    "\64\255\1\77\7\255\1\256\74\255\1\256\12\255\1\257"+
    "\55\255\1\260\3\255\1\256\74\255\1\256\15\255\6\261"+
    "\4\255\27\261\4\255\12\0\1\262\4\0\1\167\55\0"+
    "\12\255\1\263\4\255\1\264\67\255\1\256\3\255\1\265"+
    "\1\255\2\114\65\255\1\256\12\255\1\266\61\255\1\256"+
    "\12\255\1\267\61\255\1\256\12\255\1\270\61\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\30\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\21\123\1\271\6\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\17\123\1\272\10\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\273\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\16\123\1\274\11\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\21\123\1\275\6\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\17\123\1\276\10\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\1\123\1\277\6\123\1\300\3\123\1\301\2\123"+
    "\1\302\10\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\303\11\123\1\304\10\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\14\123\1\305\1\123\1\306\11\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\1\123"+
    "\1\307\12\123\1\310\2\123\1\311\10\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\5\123"+
    "\1\312\22\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\6\123\1\313\7\123\1\314\3\123"+
    "\1\315\5\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\17\123\1\316\10\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\1\123"+
    "\1\317\3\123\1\320\16\123\1\321\3\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\2\123"+
    "\1\322\22\123\1\323\2\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\21\123\1\324\2\123"+
    "\1\325\3\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\326\22\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\23\123"+
    "\1\327\2\123\1\330\1\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\10\123\1\331\10\123"+
    "\1\332\5\123\1\333\16\255\1\256\2\255\1\123\2\255"+
    "\2\123\6\255\6\123\3\255\22\123\1\334\5\123\16\255"+
    "\1\256\2\255\1\123\2\255\2\123\6\255\6\123\3\255"+
    "\17\123\1\335\10\123\16\255\1\256\2\255\1\123\2\255"+
    "\2\123\6\255\6\123\3\255\10\123\1\336\17\123\16\255"+
    "\1\256\57\255\1\337\2\255\2\160\1\161\1\162\71\160"+
    "\2\0\1\161\72\0\2\160\1\161\1\162\6\160\1\340"+
    "\62\160\7\0\1\341\65\0\12\342\1\343\62\342\2\344"+
    "\1\6\1\7\71\344\20\0\2\345\70\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\5\33\1\346\22\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\16\33\1\347"+
    "\11\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\17\33\1\350\10\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\17\33\1\351\10\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\22\33\1\352\1\353\4\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\1\33"+
    "\1\354\26\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\355\26\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\16\33\1\356\11\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\3\33\1\357\2\33"+
    "\1\360\21\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\24\33\1\361\3\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\22\33\1\362\5\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\24\33\1\363\3\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\14\33"+
    "\1\364\13\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\17\33\1\365\10\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\21\33\1\366\6\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\23\33\1\367\4\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\23\33"+
    "\1\370\4\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\16\33\1\371\11\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\15\33\1\372\12\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\26\33\1\373\1\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\14\33"+
    "\1\374\13\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\12\33\1\375\15\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\5\33\1\376\22\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\11\33\1\377\16\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\2\33"+
    "\1\u0100\25\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\6\33\1\u0101\14\33\1\u0102\4\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\1\33\1\u0103\17\33"+
    "\1\u0104\6\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\11\33\1\u0105\16\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\11\33\1\u0106\7\33\1\u0107\6\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\24\33"+
    "\1\u0108\2\33\1\u0109\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\20\33\1\u010a\7\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\11\33\1\u010b\16\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\11\33\1\u010c"+
    "\16\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\11\33\1\u010d\16\33\4\0\2\u010e\2\342\1\u010e\1\342"+
    "\4\u010e\1\70\24\u010e\1\342\35\u010e\2\246\1\6\1\7"+
    "\1\246\1\344\31\246\1\344\35\246\12\255\1\256\4\255"+
    "\1\u010f\64\255\1\u0110\2\255\1\256\62\255\12\0\1\262"+
    "\4\0\1\u010f\55\0\12\255\1\256\4\255\1\u0111\55\255"+
    "\2\264\1\77\1\100\6\264\1\u0112\62\264\12\255\1\256"+
    "\5\255\2\u0113\65\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\u0114\22\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\16\123"+
    "\1\u0115\11\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\17\123\1\u0116\10\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\17\123"+
    "\1\u0117\10\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\22\123\1\u0118\1\u0119\4\123\16\255"+
    "\1\256\2\255\1\123\2\255\2\123\6\255\6\123\3\255"+
    "\1\123\1\u011a\26\123\16\255\1\256\2\255\1\123\2\255"+
    "\2\123\6\255\6\123\3\255\1\123\1\u011b\26\123\16\255"+
    "\1\256\2\255\1\123\2\255\2\123\6\255\6\123\3\255"+
    "\16\123\1\u011c\11\123\16\255\1\256\2\255\1\123\2\255"+
    "\2\123\6\255\6\123\3\255\3\123\1\u011d\2\123\1\u011e"+
    "\21\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\24\123\1\u011f\3\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\22\123\1\u0120"+
    "\5\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\24\123\1\u0121\3\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\14\123\1\u0122"+
    "\13\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\17\123\1\u0123\10\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\21\123\1\u0124"+
    "\6\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\23\123\1\u0125\4\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\23\123\1\u0126"+
    "\4\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\16\123\1\u0127\11\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\15\123\1\u0128"+
    "\12\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\26\123\1\u0129\1\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\14\123\1\u012a"+
    "\13\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\12\123\1\u012b\15\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\5\123\1\u012c"+
    "\22\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\11\123\1\u012d\16\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\2\123\1\u012e"+
    "\25\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\6\123\1\u012f\14\123\1\u0130\4\123\16\255"+
    "\1\256\2\255\1\123\2\255\2\123\6\255\6\123\3\255"+
    "\1\123\1\u0131\17\123\1\u0132\6\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\11\123\1\u0133"+
    "\16\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\11\123\1\u0134\7\123\1\u0135\6\123\16\255"+
    "\1\256\2\255\1\123\2\255\2\123\6\255\6\123\3\255"+
    "\24\123\1\u0136\2\123\1\u0137\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\20\123\1\u0138\7\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u0139\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\11\123\1\u013a\16\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u013b\16\123\4\255\2\u013c\1\u013d\1\u013e"+
    "\6\u013c\1\160\62\u013c\12\342\1\u013f\62\342\12\0\1\u0140"+
    "\77\0\1\33\2\0\2\33\6\0\6\33\3\0\1\33"+
    "\1\u0141\26\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\u0142\26\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\23\33\1\u0143\4\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\14\33\1\u0144\13\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\5\33"+
    "\1\u0145\22\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\3\33\1\u0146\24\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\21\33\1\u0147\6\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\22\33\1\u0148\5\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\22\33"+
    "\1\u0149\1\u014a\4\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\11\33\1\u014b\16\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\1\33\1\u014c\26\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\2\33\1\u014d"+
    "\25\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\5\33\1\u014e\22\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\15\33\1\u014f\12\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\22\33\1\u0150\5\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\1\33\1\u0151"+
    "\26\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\5\33\1\u0152\22\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u0153\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\7\33\1\u0154\20\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\5\33\1\u0155"+
    "\22\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\14\33\1\u0156\13\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u0157\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\21\33\1\u0158\6\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\25\33\1\u0159"+
    "\2\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\14\33\1\u015a\13\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\24\33\1\u015b\3\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\23\33\1\u015c\4\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\11\33\1\u015d"+
    "\12\33\1\u015e\3\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\23\33\1\u015f\4\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\22\33\1\u0160\5\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\17\33\1\u0161"+
    "\10\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\5\33\1\u0162\22\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u0163\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\16\33\1\u0164\11\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\4\33\1\u0165"+
    "\23\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\14\33\1\u0166\13\33\4\0\2\u010e\2\342\1\u010e\1\342"+
    "\4\u010e\1\u0167\24\u010e\1\342\35\u010e\2\264\1\77\1\100"+
    "\6\264\1\u0112\4\264\1\u0168\55\264\12\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\1\123\1\u0169"+
    "\26\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\1\123\1\u016a\26\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\23\123\1\u016b"+
    "\4\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\14\123\1\u016c\13\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\5\123\1\u016d"+
    "\22\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\3\123\1\u016e\24\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\21\123\1\u016f"+
    "\6\123\16\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\22\123\1\u0170\5\123\16\255\1\256\2\255"+
    "\1\123\2\255\2\123\6\255\6\123\3\255\22\123\1\u0171"+
    "\1\u0172\4\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\11\123\1\u0173\16\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\1\123"+
    "\1\u0174\26\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\2\123\1\u0175\25\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\5\123"+
    "\1\u0176\22\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\15\123\1\u0177\12\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\22\123"+
    "\1\u0178\5\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\1\123\1\u0179\26\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\5\123"+
    "\1\u017a\22\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\u017b\22\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\7\123"+
    "\1\u017c\20\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\u017d\22\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\14\123"+
    "\1\u017e\13\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\5\123\1\u017f\22\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\21\123"+
    "\1\u0180\6\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\25\123\1\u0181\2\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\14\123"+
    "\1\u0182\13\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\24\123\1\u0183\3\123\16\255\1\256"+
    "\2\255\1\123\2\255\2\123\6\255\6\123\3\255\23\123"+
    "\1\u0184\4\123\16\255\1\256\2\255\1\123\2\255\2\123"+
    "\6\255\6\123\3\255\11\123\1\u0185\12\123\1\u0186\3\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\23\123\1\u0187\4\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\22\123\1\u0188\5\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\17\123\1\u0189\10\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u018a\22\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\5\123\1\u018b\22\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\16\123\1\u018c\11\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\4\123\1\u018d\23\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\14\123\1\u018e\13\123"+
    "\4\255\2\u013c\1\u013d\1\u013e\6\u013c\1\u018f\62\u013c\2\342"+
    "\1\u013d\7\342\1\u013f\74\342\1\u013f\4\342\1\6\55\342"+
    "\12\0\1\u0140\4\0\1\6\72\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\13\33\1\u0190\14\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\14\33\1\u0191\13\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\5\33"+
    "\1\u0192\22\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\10\33\1\u0193\17\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\22\33\1\u0194\5\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\23\33\1\u0195\4\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\11\33"+
    "\1\u0196\16\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\15\33\1\u0197\12\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\24\33\1\u0198\3\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\14\33\1\u0199\13\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\5\33"+
    "\1\u019a\22\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\23\33\1\u019b\4\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\1\33\1\u019c\26\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\21\33\1\u019d\6\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\22\33"+
    "\1\u019e\5\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\3\33\1\u019f\24\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\21\33\1\u01a0\6\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\1\33\1\u01a1\26\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\11\33"+
    "\1\u01a2\16\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\21\33\1\u01a3\6\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\11\33\1\u01a4\16\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\16\33\1\u01a5\11\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\3\33"+
    "\1\u01a6\24\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\3\33\1\u01a7\24\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\26\33\1\u01a8\1\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\17\33\1\u01a9\10\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\7\33"+
    "\1\u01aa\20\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\5\33\1\u01ab\22\33\4\0\2\u010e\2\342\1\u010e"+
    "\1\342\4\u010e\1\u0167\4\u010e\1\70\17\u010e\1\342\35\u010e"+
    "\12\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\13\123\1\u01ac\14\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\14\123\1\u01ad\13\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\5\123\1\u01ae\22\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\10\123\1\u01af\17\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\22\123\1\u01b0\5\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\23\123\1\u01b1\4\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u01b2\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\15\123\1\u01b3\12\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\24\123\1\u01b4\3\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\14\123\1\u01b5\13\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\5\123\1\u01b6\22\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\23\123\1\u01b7\4\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\1\123\1\u01b8\26\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\21\123\1\u01b9\6\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\22\123\1\u01ba\5\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\3\123\1\u01bb\24\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\21\123\1\u01bc\6\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\1\123\1\u01bd\26\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u01be\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\21\123\1\u01bf\6\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u01c0\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\16\123\1\u01c1\11\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\3\123\1\u01c2\24\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\3\123\1\u01c3\24\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\26\123\1\u01c4\1\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\17\123\1\u01c5\10\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\7\123\1\u01c6\20\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u01c7\22\123"+
    "\4\255\2\u013c\1\u013d\1\u013e\6\u013c\1\u018f\4\u013c\1\160"+
    "\55\u013c\15\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\14\33\1\u01c8\13\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\3\33\1\u01c9\24\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\16\33\1\u01ca\11\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\1\33\1\u01cb"+
    "\26\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\14\33\1\u01cc\13\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u01cd\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\3\33\1\u01ce\24\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\6\33\1\u01cf"+
    "\21\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\20\33\1\u01d0\7\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\23\33\1\u01d1\4\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\11\33\1\u01d2\16\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\23\33\1\u01d3"+
    "\4\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\3\33\1\u01d4\24\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\16\33\1\u01d5\11\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\3\33\1\u01d6\24\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\7\33\1\u01d7"+
    "\20\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\23\33\1\u01d8\4\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\10\33\1\u01d9\17\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\6\33\1\u01da\21\33\4\0"+
    "\12\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\14\123\1\u01db\13\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\3\123\1\u01dc\24\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\16\123\1\u01dd\11\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\1\123\1\u01de\26\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\14\123\1\u01df\13\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u01e0\22\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\3\123\1\u01e1\24\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\6\123\1\u01e2\21\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\20\123\1\u01e3\7\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\23\123\1\u01e4\4\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\11\123\1\u01e5\16\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\23\123\1\u01e6\4\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\3\123\1\u01e7\24\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\16\123\1\u01e8\11\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\3\123\1\u01e9\24\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\7\123\1\u01ea\20\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\23\123\1\u01eb\4\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\10\123\1\u01ec\17\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\6\123\1\u01ed\21\123\4\255\15\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\27\33\1\u01ee\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\23\33\1\u01ef\4\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\24\33"+
    "\1\u01f0\3\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\14\33\1\u01f1\13\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\23\33\1\u01f2\4\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\10\33\1\u01f3\17\33"+
    "\21\0\1\33\2\0\2\33\6\0\6\33\3\0\1\33"+
    "\1\u01f4\26\33\21\0\1\33\2\0\2\33\6\0\6\33"+
    "\3\0\1\33\1\u01f5\26\33\21\0\1\33\2\0\2\33"+
    "\6\0\6\33\3\0\4\33\1\u01f6\23\33\21\0\1\33"+
    "\2\0\2\33\6\0\6\33\3\0\5\33\1\u01f7\22\33"+
    "\4\0\12\255\1\256\2\255\1\123\2\255\2\123\6\255"+
    "\6\123\3\255\27\123\1\u01f8\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\23\123\1\u01f9\4\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\24\123\1\u01fa\3\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\14\123\1\u01fb\13\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\23\123\1\u01fc\4\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\10\123\1\u01fd\17\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\1\123\1\u01fe\26\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\1\123\1\u01ff\26\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\4\123\1\u0200\23\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u0201\22\123"+
    "\4\255\15\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\5\33\1\u0202\22\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u0203\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\3\33\1\u0204\24\33\21\0"+
    "\1\33\2\0\2\33\6\0\6\33\3\0\3\33\1\u0205"+
    "\24\33\21\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\5\33\1\u0206\22\33\4\0\12\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u0207\22\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\5\123\1\u0208\22\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\3\123\1\u0209\24\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\3\123\1\u020a\24\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u020b\22\123"+
    "\4\255\15\0\1\33\2\0\2\33\6\0\6\33\3\0"+
    "\4\33\1\u020c\23\33\21\0\1\33\2\0\2\33\6\0"+
    "\6\33\3\0\5\33\1\u020d\22\33\21\0\1\33\2\0"+
    "\2\33\6\0\6\33\3\0\5\33\1\u020e\22\33\4\0"+
    "\12\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\4\123\1\u020f\23\123\16\255\1\256\2\255\1\123"+
    "\2\255\2\123\6\255\6\123\3\255\5\123\1\u0210\22\123"+
    "\16\255\1\256\2\255\1\123\2\255\2\123\6\255\6\123"+
    "\3\255\5\123\1\u0211\22\123\4\255";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22814];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\2\1\1\11\2\1\2\11\1\1"+
    "\4\11\2\1\2\11\3\1\1\11\6\1\2\11\21\1"+
    "\1\11\1\1\2\11\1\1\1\11\1\1\1\11\65\1"+
    "\1\11\2\1\2\11\1\0\1\11\2\1\1\0\3\11"+
    "\46\1\1\11\2\1\6\11\2\0\2\1\3\0\1\1"+
    "\1\0\53\1\1\11\2\0\53\1\1\11\57\1\2\0"+
    "\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[529];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IdLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token (TokenConstants.EOF,null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Absolutamente nada*/
            }
            // fall through
          case 97: break;
          case 2:
            { return new Token(TokenConstants.ERROR, yytext());
            }
            // fall through
          case 98: break;
          case 3:
            { /*Nothing at all*/
            }
            // fall through
          case 99: break;
          case 4:
            { return new Token(TokenConstants.NOT,yytext());
            }
            // fall through
          case 100: break;
          case 5:
            { string.setLength(0);yybegin(STRING);
            }
            // fall through
          case 101: break;
          case 6:
            { return new Token(TokenConstants.LPAREN,yytext());
            }
            // fall through
          case 102: break;
          case 7:
            { return new Token(TokenConstants.RPAREN,yytext());
            }
            // fall through
          case 103: break;
          case 8:
            { return new Token(TokenConstants.TIMES,yytext());
            }
            // fall through
          case 104: break;
          case 9:
            { return new Token(TokenConstants.PLUS,yytext());
            }
            // fall through
          case 105: break;
          case 10:
            { return new Token(TokenConstants.COMMA,yytext());
            }
            // fall through
          case 106: break;
          case 11:
            { return new Token(TokenConstants.MINUS,yytext());
            }
            // fall through
          case 107: break;
          case 12:
            { return new Token(TokenConstants.DOT,yytext());
            }
            // fall through
          case 108: break;
          case 13:
            { return new Token(TokenConstants.DIV,yytext());
            }
            // fall through
          case 109: break;
          case 14:
            { return new Token(TokenConstants.intValue,yytext());
            }
            // fall through
          case 110: break;
          case 15:
            { return new Token(TokenConstants.COLON,yytext());
            }
            // fall through
          case 111: break;
          case 16:
            { return new Token(TokenConstants.SEMI,yytext());
            }
            // fall through
          case 112: break;
          case 17:
            { return new Token(TokenConstants.LT,yytext());
            }
            // fall through
          case 113: break;
          case 18:
            { return new Token(TokenConstants.ASIGN,yytext());
            }
            // fall through
          case 114: break;
          case 19:
            { return new Token(TokenConstants.GT,yytext());
            }
            // fall through
          case 115: break;
          case 20:
            { return new Token(TokenConstants.AT,yytext());
            }
            // fall through
          case 116: break;
          case 21:
            { return new Token(TokenConstants.identifier,yytext());
            }
            // fall through
          case 117: break;
          case 22:
            { return new Token(TokenConstants.LBRACKET,yytext());
            }
            // fall through
          case 118: break;
          case 23:
            { return new Token(TokenConstants.RBRACKET,yytext());
            }
            // fall through
          case 119: break;
          case 24:
            { return new Token(TokenConstants.LBRACE,yytext());
            }
            // fall through
          case 120: break;
          case 25:
            { return new Token(TokenConstants.RBRACE,yytext());
            }
            // fall through
          case 121: break;
          case 26:
            { return new Token(TokenConstants.NEG,yytext());
            }
            // fall through
          case 122: break;
          case 27:
            { string.append(yytext());
            }
            // fall through
          case 123: break;
          case 28:
            { yybegin(YYINITIAL);
                                       return new Token(TokenConstants.ERROR,"UNTERMINATED STRING CONSTANT");
            }
            // fall through
          case 124: break;
          case 29:
            { yybegin(YYINITIAL);
                                       return new Token(TokenConstants.stringValue, string.toString());
            }
            // fall through
          case 125: break;
          case 30:
            { string.append('\\');
            }
            // fall through
          case 126: break;
          case 31:
            { return new Token(TokenConstants.NOTEQUAL,yytext());
            }
            // fall through
          case 127: break;
          case 32:
            { return new Token(TokenConstants.AND,yytext());
            }
            // fall through
          case 128: break;
          case 33:
            { return new Token(TokenConstants.ERROR,"unmatched comment finisher");
            }
            // fall through
          case 129: break;
          case 34:
            { yybegin(COMMENT);
            }
            // fall through
          case 130: break;
          case 35:
            { yybegin(LINECOMMENT);
            }
            // fall through
          case 131: break;
          case 36:
            { return new Token(TokenConstants.LET,yytext());
            }
            // fall through
          case 132: break;
          case 37:
            { return new Token(TokenConstants.EQUAL,yytext());
            }
            // fall through
          case 133: break;
          case 38:
            { return new Token(TokenConstants.LGT,yytext());
            }
            // fall through
          case 134: break;
          case 39:
            { return new Token(TokenConstants.DO,yytext());
            }
            // fall through
          case 135: break;
          case 40:
            { return new Token(TokenConstants.IN,yytext());
            }
            // fall through
          case 136: break;
          case 41:
            { return new Token(TokenConstants.IF,yytext());
            }
            // fall through
          case 137: break;
          case 42:
            { return new Token(TokenConstants.IS,yytext());
            }
            // fall through
          case 138: break;
          case 43:
            { return new Token(TokenConstants.OR,yytext());
            }
            // fall through
          case 139: break;
          case 44:
            { string.append('\"');
            }
            // fall through
          case 140: break;
          case 45:
            { yybegin(YYINITIAL);
                                        return new Token(TokenConstants.ERROR,"Contiene caracter nulo");
            }
            // fall through
          case 141: break;
          case 46:
            { string.append('\f');
            }
            // fall through
          case 142: break;
          case 47:
            { string.append('\n');
            }
            // fall through
          case 143: break;
          case 48:
            { string.append('\r');
            }
            // fall through
          case 144: break;
          case 49:
            { string.append('\t');
            }
            // fall through
          case 145: break;
          case 50:
            { return new Token(TokenConstants.charValue,yytext());
            }
            // fall through
          case 146: break;
          case 51:
            { return new Token(TokenConstants.doubleValue,yytext());
            }
            // fall through
          case 147: break;
          case 52:
            { return new Token(TokenConstants.FOR,yytext());
            }
            // fall through
          case 148: break;
          case 53:
            { return new Token(TokenConstants.GET,yytext());
            }
            // fall through
          case 149: break;
          case 54:
            { return new Token(TokenConstants.INT,yytext());
            }
            // fall through
          case 150: break;
          case 55:
            { return new Token(TokenConstants.NEW,yytext());
            }
            // fall through
          case 151: break;
          case 56:
            { return new Token(TokenConstants.REF,yytext());
            }
            // fall through
          case 152: break;
          case 57:
            { return new Token(TokenConstants.TRY,yytext());
            }
            // fall through
          case 153: break;
          case 58:
            { /*NADA DE NADA*/
            }
            // fall through
          case 154: break;
          case 59:
            { return new Token(TokenConstants.BOOL,yytext());
            }
            // fall through
          case 155: break;
          case 60:
            { return new Token(TokenConstants.CASE,yytext());
            }
            // fall through
          case 156: break;
          case 61:
            { return new Token(TokenConstants.CHAR,yytext());
            }
            // fall through
          case 157: break;
          case 62:
            { return new Token(TokenConstants.ELSE,yytext());
            }
            // fall through
          case 158: break;
          case 63:
            { return new Token(TokenConstants.ENUM,yytext());
            }
            // fall through
          case 159: break;
          case 64:
            { return new Token(TokenConstants.LONG,yytext());
            }
            // fall through
          case 160: break;
          case 65:
            { return new Token(TokenConstants.NULL,yytext());
            }
            // fall through
          case 161: break;
          case 66:
            { return new Token(TokenConstants.THIS,yytext());
            }
            // fall through
          case 162: break;
          case 67:
            { return new Token(TokenConstants.TRUE,yytext());
            }
            // fall through
          case 163: break;
          case 68:
            { return new Token(TokenConstants.VOID,yytext());
            }
            // fall through
          case 164: break;
          case 69:
            { return new Token(TokenConstants.BREAK,yytext());
            }
            // fall through
          case 165: break;
          case 70:
            { return new Token(TokenConstants.CATCH,yytext());
            }
            // fall through
          case 166: break;
          case 71:
            { return new Token(TokenConstants.CLASS,yytext());
            }
            // fall through
          case 167: break;
          case 72:
            { return new Token(TokenConstants.CONST,yytext());
            }
            // fall through
          case 168: break;
          case 73:
            { return new Token(TokenConstants.FALSE,yytext());
            }
            // fall through
          case 169: break;
          case 74:
            { return new Token(TokenConstants.FLOAT,yytext());
            }
            // fall through
          case 170: break;
          case 75:
            { return new Token(TokenConstants.THROW,yytext());
            }
            // fall through
          case 171: break;
          case 76:
            { return new Token(TokenConstants.USING,yytext());
            }
            // fall through
          case 172: break;
          case 77:
            { return new Token(TokenConstants.WHILE,yytext());
            }
            // fall through
          case 173: break;
          case 78:
            { return new Token(TokenConstants.DOUBLE,yytext());
            }
            // fall through
          case 174: break;
          case 79:
            { return new Token(TokenConstants.OBJECT,yytext());
            }
            // fall through
          case 175: break;
          case 80:
            { return new Token(TokenConstants.PUBLIC,yytext());
            }
            // fall through
          case 176: break;
          case 81:
            { return new Token(TokenConstants.RETURN,yytext());
            }
            // fall through
          case 177: break;
          case 82:
            { return new Token(TokenConstants.STATIC,yytext());
            }
            // fall through
          case 178: break;
          case 83:
            { return new Token(TokenConstants.STRING,yytext());
            }
            // fall through
          case 179: break;
          case 84:
            { return new Token(TokenConstants.STRUCT,yytext());
            }
            // fall through
          case 180: break;
          case 85:
            { return new Token(TokenConstants.SWITCH,yytext());
            }
            // fall through
          case 181: break;
          case 86:
            { return new Token(TokenConstants.TYPEOF,yytext());
            }
            // fall through
          case 182: break;
          case 87:
            { return new Token(TokenConstants.FINALLY,yytext());
            }
            // fall through
          case 183: break;
          case 88:
            { return new Token(TokenConstants.DECIMAL,yytext());
            }
            // fall through
          case 184: break;
          case 89:
            { return new Token(TokenConstants.DEFAULT,yytext());
            }
            // fall through
          case 185: break;
          case 90:
            { return new Token(TokenConstants.FOREACH,yytext());
            }
            // fall through
          case 186: break;
          case 91:
            { return new Token(TokenConstants.PRIVATE,yytext());
            }
            // fall through
          case 187: break;
          case 92:
            { return new Token(TokenConstants.CONTINUE,yytext());
            }
            // fall through
          case 188: break;
          case 93:
            { return new Token(TokenConstants.OVERRIDE,yytext());
            }
            // fall through
          case 189: break;
          case 94:
            { return new Token(TokenConstants.PROTECTED,yytext());
            }
            // fall through
          case 190: break;
          case 95:
            { return new Token(TokenConstants.INTERFACE,yytext());
            }
            // fall through
          case 191: break;
          case 96:
            { return new Token(TokenConstants.NAMESPACE,yytext());
            }
            // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
