// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/Lexer.flex

package gt.edu.usac.compiler;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class IdLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int LINECOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\3\0\1\6\1\7\2\0\1\10\1\11"+
    "\1\0\1\12\1\13\1\14\1\15\11\16\2\0\1\17"+
    "\1\20\1\21\2\0\1\22\1\23\1\22\1\24\1\22"+
    "\1\25\2\22\1\26\6\22\1\27\12\22\1\0\1\30"+
    "\2\0\1\31\1\0\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\22\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\22\1\60\1\22\1\0\1\61\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\2\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\27\15"+
    "\1\2\1\16\2\17\1\20\1\16\1\21\1\2\2\3"+
    "\3\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\27\15\1\2\4\1\1\22\1\23\1\0\1\24"+
    "\1\25\1\0\1\26\1\27\1\30\1\15\1\31\1\15"+
    "\1\32\16\15\1\33\1\15\1\34\21\15\1\35\2\16"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\0\1\22"+
    "\1\23\3\0\1\3\1\0\1\26\1\27\1\30\1\15"+
    "\1\31\1\15\1\32\16\15\1\33\1\15\1\34\21\15"+
    "\1\35\1\1\1\44\2\0\1\3\1\45\20\15\1\46"+
    "\1\47\1\50\2\15\1\51\5\15\1\52\7\15\1\53"+
    "\4\15\1\16\1\54\1\44\1\54\1\3\1\45\20\15"+
    "\1\46\1\47\1\50\2\15\1\51\5\15\1\52\7\15"+
    "\1\53\4\15\3\1\2\0\3\15\1\55\1\56\1\15"+
    "\1\57\6\15\1\60\1\61\4\15\1\62\1\15\1\63"+
    "\11\15\1\64\1\15\1\65\2\15\1\66\1\15\1\16"+
    "\1\54\3\15\1\55\1\56\1\15\1\57\6\15\1\60"+
    "\1\61\4\15\1\62\1\15\1\63\11\15\1\64\1\15"+
    "\1\65\2\15\1\66\1\15\1\1\1\67\2\15\1\70"+
    "\1\71\1\72\4\15\1\73\1\74\14\15\1\75\1\15"+
    "\1\76\1\77\1\67\2\15\1\70\1\71\1\72\4\15"+
    "\1\73\1\74\14\15\1\75\1\15\1\76\1\77\5\15"+
    "\1\100\3\15\1\101\2\15\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\5\15\1\100\3\15\1\101\2\15"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\2\15\1\112\1\113\1\114\3\15\1\115\1\111\2\15"+
    "\1\112\1\113\1\114\3\15\1\115\1\15\1\116\2\15"+
    "\1\117\1\15\1\116\2\15\1\117\1\120\1\121\1\122"+
    "\1\120\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\310\0\372\0\u012c"+
    "\0\310\0\u015e\0\u0190\0\310\0\310\0\310\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\310\0\u079e\0\310\0\u07d0"+
    "\0\u0802\0\u0834\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0834\0\u0834\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\310\0\u0f3c\0\u0f6e\0\310\0\310\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\310\0\310\0\310\0\u1068\0\u02bc\0\u109a\0\u02bc"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u02bc\0\u1388"+
    "\0\u02bc\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\310\0\u170c\0\u173e\0\310\0\310\0\310"+
    "\0\310\0\310\0\310\0\u0834\0\u1770\0\u0834\0\u0834\0\u17a2"+
    "\0\u17d4\0\u1806\0\u1838\0\u186a\0\u0834\0\u0834\0\u0834\0\u189c"+
    "\0\u0a5a\0\u18ce\0\u0a5a\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u0a5a\0\u1bbc\0\u0a5a\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u0834\0\u1f40\0\310"+
    "\0\u1f72\0\u1fa4\0\u1004\0\u1036\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u02bc\0\u2328\0\u235a"+
    "\0\u238c\0\u02bc\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u02bc"+
    "\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u02bc"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\310\0\u0834\0\u1f72"+
    "\0\u2710\0\u186a\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\u2a62\0\u0a5a\0\u2a94\0\u2ac6\0\u2af8\0\u0a5a"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u0a5a\0\u2c24\0\u2c56"+
    "\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u0a5a\0\u2d82\0\u2db4"+
    "\0\u2de6\0\u2e18\0\u2e4a\0\u1f72\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12"+
    "\0\u2f44\0\u2f76\0\u02bc\0\u02bc\0\u2fa8\0\u02bc\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u02bc\0\u02bc\0\u3106\0\u3138"+
    "\0\u316a\0\u319c\0\u02bc\0\u31ce\0\u02bc\0\u3200\0\u3232\0\u3264"+
    "\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u02bc\0\u33c2"+
    "\0\u02bc\0\u33f4\0\u3426\0\u02bc\0\u3458\0\u348a\0\u1004\0\u34bc"+
    "\0\u34ee\0\u3520\0\u0a5a\0\u0a5a\0\u3552\0\u0a5a\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u0a5a\0\u0a5a\0\u36b0\0\u36e2"+
    "\0\u3714\0\u3746\0\u0a5a\0\u3778\0\u0a5a\0\u37aa\0\u37dc\0\u380e"+
    "\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u0a5a\0\u396c"+
    "\0\u0a5a\0\u399e\0\u39d0\0\u0a5a\0\u3a02\0\u3a34\0\u02bc\0\u3a66"+
    "\0\u3a98\0\u02bc\0\u02bc\0\u02bc\0\u3aca\0\u3afc\0\u3b2e\0\u3b60"+
    "\0\u02bc\0\u02bc\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c"+
    "\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u02bc\0\u3dea"+
    "\0\u02bc\0\u02bc\0\u0a5a\0\u3e1c\0\u3e4e\0\u0a5a\0\u0a5a\0\u0a5a"+
    "\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u0a5a\0\u0a5a\0\u3f48\0\u3f7a"+
    "\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a"+
    "\0\u413c\0\u416e\0\u0a5a\0\u41a0\0\u0a5a\0\u0a5a\0\u41d2\0\u4204"+
    "\0\u4236\0\u4268\0\u429a\0\u02bc\0\u42cc\0\u42fe\0\u4330\0\u02bc"+
    "\0\u4362\0\u4394\0\u02bc\0\u02bc\0\u02bc\0\u02bc\0\u02bc\0\u02bc"+
    "\0\u02bc\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u0a5a\0\u44c0"+
    "\0\u44f2\0\u4524\0\u0a5a\0\u4556\0\u4588\0\u0a5a\0\u0a5a\0\u0a5a"+
    "\0\u0a5a\0\u0a5a\0\u0a5a\0\u0a5a\0\u02bc\0\u45ba\0\u45ec\0\u02bc"+
    "\0\u02bc\0\u02bc\0\u461e\0\u4650\0\u4682\0\u02bc\0\u0a5a\0\u46b4"+
    "\0\u46e6\0\u0a5a\0\u0a5a\0\u0a5a\0\u4718\0\u474a\0\u477c\0\u0a5a"+
    "\0\u47ae\0\u02bc\0\u47e0\0\u4812\0\u02bc\0\u4844\0\u0a5a\0\u4876"+
    "\0\u48a8\0\u0a5a\0\u02bc\0\u02bc\0\u02bc\0\u0a5a\0\u0a5a\0\u0a5a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\5\1\17\2\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\5\1\24"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\24\1\40"+
    "\2\24\1\41\1\24\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\24\1\53\2\54\1\55"+
    "\1\56\1\54\1\57\6\54\1\60\13\54\1\61\31\54"+
    "\1\62\2\63\1\64\1\65\1\62\1\66\1\67\1\70"+
    "\1\71\1\72\1\62\1\73\2\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\2\62\1\100"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\100\1\114"+
    "\2\100\1\115\1\100\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\100\1\127\2\130\1\131"+
    "\1\132\10\130\1\133\45\130\64\0\1\6\77\0\1\134"+
    "\47\0\1\135\75\0\6\136\2\0\27\136\11\0\1\137"+
    "\3\0\1\140\60\0\1\141\1\0\2\20\63\0\1\142"+
    "\61\0\1\143\61\0\1\144\53\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\30\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\21\24\1\145\6\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\17\24\1\146\10\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\11\24"+
    "\1\147\16\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\16\24\1\150\11\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\21\24\1\151\6\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\17\24\1\152\10\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\153\6\24\1\154\3\24\1\155\2\24\1\156\10\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\5\24"+
    "\1\157\11\24\1\160\10\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\14\24\1\161\1\24\1\162\11\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\163\12\24\1\164\2\24\1\165\10\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\5\24\1\166\22\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\6\24"+
    "\1\167\7\24\1\170\3\24\1\171\5\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\17\24\1\172\10\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\173\3\24\1\174\16\24\1\175\3\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\2\24\1\176\22\24"+
    "\1\177\2\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\21\24\1\200\2\24\1\201\3\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\5\24\1\202\22\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\23\24"+
    "\1\203\2\24\1\204\1\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\10\24\1\205\10\24\1\206\5\24"+
    "\1\207\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\22\24\1\210\5\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\17\24\1\211\10\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\10\24\1\212\17\24\62\0"+
    "\1\213\2\54\2\0\1\54\1\0\22\54\1\0\31\54"+
    "\2\0\1\55\57\0\2\54\2\0\1\54\1\0\2\54"+
    "\1\214\3\54\1\215\13\54\1\0\31\54\5\0\1\216"+
    "\7\0\1\217\21\0\1\220\7\0\1\221\2\0\1\222"+
    "\1\0\1\223\5\0\10\224\1\225\53\224\1\63\5\224"+
    "\1\225\61\224\1\225\7\224\1\226\47\224\1\227\1\224"+
    "\1\225\61\224\1\225\11\224\6\230\2\224\27\230\1\224"+
    "\10\0\1\231\51\0\10\224\1\232\3\224\1\233\55\224"+
    "\1\225\2\224\1\234\1\224\2\74\53\224\1\225\7\224"+
    "\1\235\51\224\1\225\7\224\1\236\51\224\1\225\7\224"+
    "\1\237\51\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\30\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\21\100\1\240\6\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\17\100\1\241\10\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\11\100\1\242\16\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\16\100\1\243\11\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\21\100\1\244\6\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\17\100\1\245\10\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\1\100\1\246\6\100\1\247"+
    "\3\100\1\250\2\100\1\251\10\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\252"+
    "\11\100\1\253\10\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\14\100\1\254\1\100\1\255"+
    "\11\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\1\100\1\256\12\100\1\257\2\100\1\260"+
    "\10\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\261\22\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\6\100\1\262"+
    "\7\100\1\263\3\100\1\264\5\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\17\100\1\265"+
    "\10\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\1\100\1\266\3\100\1\267\16\100\1\270"+
    "\3\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\2\100\1\271\22\100\1\272\2\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\21\100\1\273\2\100\1\274\3\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\275"+
    "\22\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\23\100\1\276\2\100\1\277\1\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\10\100\1\300\10\100\1\301\5\100\1\302\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\22\100"+
    "\1\303\5\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\17\100\1\304\10\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\10\100"+
    "\1\305\17\100\11\224\1\225\50\224\1\306\2\130\1\131"+
    "\1\132\56\130\2\0\1\131\57\0\2\130\1\131\1\132"+
    "\4\130\1\307\51\130\7\0\1\310\52\0\10\311\1\312"+
    "\51\311\2\313\1\6\1\7\56\313\15\0\2\314\55\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\5\24\1\315"+
    "\22\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\16\24\1\316\11\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\17\24\1\317\10\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\17\24\1\320\10\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\22\24\1\321"+
    "\1\322\4\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\1\24\1\323\26\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\1\24\1\324\26\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\16\24\1\325\11\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\3\24"+
    "\1\326\2\24\1\327\21\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\24\24\1\330\3\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\22\24\1\331\5\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\24\24"+
    "\1\332\3\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\333\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\17\24\1\334\10\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\21\24\1\335\6\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\23\24"+
    "\1\336\4\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\23\24\1\337\4\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\16\24\1\340\11\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\15\24\1\341\12\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\26\24"+
    "\1\342\1\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\343\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\12\24\1\344\15\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\5\24\1\345\22\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\11\24"+
    "\1\346\16\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\2\24\1\347\25\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\6\24\1\350\14\24\1\351\4\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\352\17\24\1\353\6\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\11\24\1\354\16\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\11\24\1\355\7\24"+
    "\1\356\6\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\24\24\1\357\2\24\1\360\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\20\24\1\361\7\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\11\24\1\362"+
    "\16\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\11\24\1\363\16\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\11\24\1\364\16\24\1\0\2\365\2\311"+
    "\1\365\1\311\2\365\1\54\17\365\1\311\31\365\2\215"+
    "\1\6\1\7\1\215\1\313\22\215\1\313\31\215\10\224"+
    "\1\225\3\224\1\366\54\224\1\367\1\225\51\224\10\0"+
    "\1\231\3\0\1\366\45\0\10\224\1\225\3\224\1\370"+
    "\45\224\2\233\1\63\1\64\4\233\1\371\51\233\10\224"+
    "\1\225\4\224\2\372\53\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\5\100\1\373\22\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\16\100\1\374\11\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\17\100\1\375\10\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\17\100\1\376\10\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\22\100\1\377\1\u0100\4\100"+
    "\11\224\1\225\1\224\1\100\2\224\2\100\3\224\6\100"+
    "\1\224\1\100\1\u0101\26\100\11\224\1\225\1\224\1\100"+
    "\2\224\2\100\3\224\6\100\1\224\1\100\1\u0102\26\100"+
    "\11\224\1\225\1\224\1\100\2\224\2\100\3\224\6\100"+
    "\1\224\16\100\1\u0103\11\100\11\224\1\225\1\224\1\100"+
    "\2\224\2\100\3\224\6\100\1\224\3\100\1\u0104\2\100"+
    "\1\u0105\21\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\24\100\1\u0106\3\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\22\100"+
    "\1\u0107\5\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\24\100\1\u0108\3\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\14\100"+
    "\1\u0109\13\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\17\100\1\u010a\10\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\21\100"+
    "\1\u010b\6\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\23\100\1\u010c\4\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\23\100"+
    "\1\u010d\4\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\16\100\1\u010e\11\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\15\100"+
    "\1\u010f\12\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\26\100\1\u0110\1\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\14\100"+
    "\1\u0111\13\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\12\100\1\u0112\15\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\5\100"+
    "\1\u0113\22\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\11\100\1\u0114\16\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\2\100"+
    "\1\u0115\25\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\6\100\1\u0116\14\100\1\u0117\4\100"+
    "\11\224\1\225\1\224\1\100\2\224\2\100\3\224\6\100"+
    "\1\224\1\100\1\u0118\17\100\1\u0119\6\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\11\100"+
    "\1\u011a\16\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\11\100\1\u011b\7\100\1\u011c\6\100"+
    "\11\224\1\225\1\224\1\100\2\224\2\100\3\224\6\100"+
    "\1\224\24\100\1\u011d\2\100\1\u011e\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\20\100\1\u011f"+
    "\7\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u0120\16\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\11\100\1\u0121"+
    "\16\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u0122\16\100\1\224\2\u0123\1\u0124"+
    "\1\u0125\4\u0123\1\130\51\u0123\10\311\1\u0126\51\311\10\0"+
    "\1\u0127\63\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\1\24\1\u0128\26\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\1\24\1\u0129\26\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\23\24\1\u012a\4\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\14\24\1\u012b"+
    "\13\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\5\24\1\u012c\22\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\3\24\1\u012d\24\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\21\24\1\u012e\6\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\22\24\1\u012f"+
    "\5\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\22\24\1\u0130\1\u0131\4\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\11\24\1\u0132\16\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\1\24\1\u0133\26\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\2\24"+
    "\1\u0134\25\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\5\24\1\u0135\22\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\15\24\1\u0136\12\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\22\24\1\u0137\5\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\u0138\26\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\5\24\1\u0139\22\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u013a\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\7\24\1\u013b\20\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\5\24"+
    "\1\u013c\22\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\u013d\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u013e\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\21\24\1\u013f\6\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\25\24"+
    "\1\u0140\2\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\u0141\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\24\24\1\u0142\3\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\23\24\1\u0143\4\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\11\24"+
    "\1\u0144\12\24\1\u0145\3\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\23\24\1\u0146\4\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\22\24\1\u0147\5\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\17\24"+
    "\1\u0148\10\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\5\24\1\u0149\22\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u014a\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\16\24\1\u014b\11\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\4\24"+
    "\1\u014c\23\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\u014d\13\24\1\0\2\365\2\311\1\365"+
    "\1\311\2\365\1\u014e\17\365\1\311\31\365\2\233\1\63"+
    "\1\64\4\233\1\371\3\233\1\u014f\45\233\10\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\1\100"+
    "\1\u0150\26\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\1\100\1\u0151\26\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\23\100"+
    "\1\u0152\4\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\14\100\1\u0153\13\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\5\100"+
    "\1\u0154\22\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\3\100\1\u0155\24\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\21\100"+
    "\1\u0156\6\100\11\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\22\100\1\u0157\5\100\11\224\1\225"+
    "\1\224\1\100\2\224\2\100\3\224\6\100\1\224\22\100"+
    "\1\u0158\1\u0159\4\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\11\100\1\u015a\16\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\1\100\1\u015b\26\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\2\100\1\u015c\25\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\5\100\1\u015d\22\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\15\100\1\u015e\12\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\22\100\1\u015f\5\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\1\100\1\u0160\26\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\5\100\1\u0161\22\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\5\100\1\u0162\22\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\7\100\1\u0163\20\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\5\100\1\u0164\22\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\14\100\1\u0165\13\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\5\100\1\u0166\22\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\21\100\1\u0167\6\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\25\100\1\u0168\2\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\14\100\1\u0169\13\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\24\100\1\u016a\3\100\11\224"+
    "\1\225\1\224\1\100\2\224\2\100\3\224\6\100\1\224"+
    "\23\100\1\u016b\4\100\11\224\1\225\1\224\1\100\2\224"+
    "\2\100\3\224\6\100\1\224\11\100\1\u016c\12\100\1\u016d"+
    "\3\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\23\100\1\u016e\4\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\22\100\1\u016f"+
    "\5\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\17\100\1\u0170\10\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u0171"+
    "\22\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\u0172\22\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\16\100\1\u0173"+
    "\11\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\4\100\1\u0174\23\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\14\100\1\u0175"+
    "\13\100\1\224\2\u0123\1\u0124\1\u0125\4\u0123\1\u0176\51\u0123"+
    "\2\311\1\u0124\5\311\1\u0126\61\311\1\u0126\3\311\1\6"+
    "\45\311\10\0\1\u0127\3\0\1\6\57\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\13\24\1\u0177\14\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\14\24\1\u0178"+
    "\13\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\5\24\1\u0179\22\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\10\24\1\u017a\17\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\22\24\1\u017b\5\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\23\24\1\u017c"+
    "\4\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\11\24\1\u017d\16\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\15\24\1\u017e\12\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\24\24\1\u017f\3\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\14\24\1\u0180"+
    "\13\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\5\24\1\u0181\22\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\23\24\1\u0182\4\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\1\24\1\u0183\26\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\21\24\1\u0184"+
    "\6\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\22\24\1\u0185\5\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\3\24\1\u0186\24\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\21\24\1\u0187\6\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\1\24\1\u0188"+
    "\26\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\11\24\1\u0189\16\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\21\24\1\u018a\6\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\11\24\1\u018b\16\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\16\24\1\u018c"+
    "\11\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\3\24\1\u018d\24\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\3\24\1\u018e\24\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\26\24\1\u018f\1\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\17\24\1\u0190"+
    "\10\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\7\24\1\u0191\20\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\5\24\1\u0192\22\24\1\0\2\365\2\311"+
    "\1\365\1\311\2\365\1\u014e\3\365\1\54\13\365\1\311"+
    "\31\365\10\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\13\100\1\u0193\14\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\14\100\1\u0194"+
    "\13\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\u0195\22\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\10\100\1\u0196"+
    "\17\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\22\100\1\u0197\5\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\23\100\1\u0198"+
    "\4\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u0199\16\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\15\100\1\u019a"+
    "\12\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\24\100\1\u019b\3\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\14\100\1\u019c"+
    "\13\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\u019d\22\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\23\100\1\u019e"+
    "\4\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\1\100\1\u019f\26\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\21\100\1\u01a0"+
    "\6\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\22\100\1\u01a1\5\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\3\100\1\u01a2"+
    "\24\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\21\100\1\u01a3\6\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\1\100\1\u01a4"+
    "\26\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u01a5\16\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\21\100\1\u01a6"+
    "\6\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u01a7\16\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\16\100\1\u01a8"+
    "\11\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\3\100\1\u01a9\24\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\3\100\1\u01aa"+
    "\24\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\26\100\1\u01ab\1\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\17\100\1\u01ac"+
    "\10\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\7\100\1\u01ad\20\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01ae"+
    "\22\100\1\224\2\u0123\1\u0124\1\u0125\4\u0123\1\u0176\3\u0123"+
    "\1\130\45\u0123\12\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\u01af\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\3\24\1\u01b0\24\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\16\24\1\u01b1\11\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\1\24"+
    "\1\u01b2\26\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\14\24\1\u01b3\13\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u01b4\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\3\24\1\u01b5\24\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\6\24"+
    "\1\u01b6\21\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\20\24\1\u01b7\7\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\23\24\1\u01b8\4\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\11\24\1\u01b9\16\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\23\24"+
    "\1\u01ba\4\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\3\24\1\u01bb\24\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\16\24\1\u01bc\11\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\3\24\1\u01bd\24\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\7\24"+
    "\1\u01be\20\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\23\24\1\u01bf\4\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\10\24\1\u01c0\17\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\6\24\1\u01c1\21\24"+
    "\1\0\10\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\14\100\1\u01c2\13\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\3\100\1\u01c3"+
    "\24\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\16\100\1\u01c4\11\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\1\100\1\u01c5"+
    "\26\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\14\100\1\u01c6\13\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01c7"+
    "\22\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\3\100\1\u01c8\24\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\6\100\1\u01c9"+
    "\21\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\20\100\1\u01ca\7\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\23\100\1\u01cb"+
    "\4\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\11\100\1\u01cc\16\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\23\100\1\u01cd"+
    "\4\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\3\100\1\u01ce\24\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\16\100\1\u01cf"+
    "\11\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\3\100\1\u01d0\24\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\7\100\1\u01d1"+
    "\20\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\23\100\1\u01d2\4\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\10\100\1\u01d3"+
    "\17\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\6\100\1\u01d4\21\100\1\224\12\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\27\24\1\u01d5\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\23\24\1\u01d6"+
    "\4\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\24\24\1\u01d7\3\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\14\24\1\u01d8\13\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\23\24\1\u01d9\4\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\10\24\1\u01da"+
    "\17\24\13\0\1\24\2\0\2\24\3\0\6\24\1\0"+
    "\1\24\1\u01db\26\24\13\0\1\24\2\0\2\24\3\0"+
    "\6\24\1\0\1\24\1\u01dc\26\24\13\0\1\24\2\0"+
    "\2\24\3\0\6\24\1\0\4\24\1\u01dd\23\24\13\0"+
    "\1\24\2\0\2\24\3\0\6\24\1\0\5\24\1\u01de"+
    "\22\24\1\0\10\224\1\225\1\224\1\100\2\224\2\100"+
    "\3\224\6\100\1\224\27\100\1\u01df\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\23\100\1\u01e0"+
    "\4\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\24\100\1\u01e1\3\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\14\100\1\u01e2"+
    "\13\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\23\100\1\u01e3\4\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\10\100\1\u01e4"+
    "\17\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\1\100\1\u01e5\26\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\1\100\1\u01e6"+
    "\26\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\4\100\1\u01e7\23\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01e8"+
    "\22\100\1\224\12\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\5\24\1\u01e9\22\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u01ea\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\3\24\1\u01eb\24\24"+
    "\13\0\1\24\2\0\2\24\3\0\6\24\1\0\3\24"+
    "\1\u01ec\24\24\13\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\5\24\1\u01ed\22\24\1\0\10\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01ee"+
    "\22\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\u01ef\22\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\3\100\1\u01f0"+
    "\24\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\3\100\1\u01f1\24\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01f2"+
    "\22\100\1\224\12\0\1\24\2\0\2\24\3\0\6\24"+
    "\1\0\4\24\1\u01f3\23\24\13\0\1\24\2\0\2\24"+
    "\3\0\6\24\1\0\5\24\1\u01f4\22\24\13\0\1\24"+
    "\2\0\2\24\3\0\6\24\1\0\5\24\1\u01f5\22\24"+
    "\1\0\10\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\4\100\1\u01f6\23\100\11\224\1\225\1\224"+
    "\1\100\2\224\2\100\3\224\6\100\1\224\5\100\1\u01f7"+
    "\22\100\11\224\1\225\1\224\1\100\2\224\2\100\3\224"+
    "\6\100\1\224\5\100\1\u01f8\22\100\1\224";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\2\1\1\11\2\1\3\11\36\1"+
    "\1\11\1\1\1\11\51\1\1\11\2\1\2\11\1\0"+
    "\2\1\1\0\3\11\46\1\1\11\2\1\6\11\2\0"+
    "\2\1\3\0\1\1\1\0\53\1\1\11\2\0\53\1"+
    "\1\11\57\1\2\0\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IdLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token (TokenConstants.EOF,null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Absolutamente nada*/
            }
            // fall through
          case 83: break;
          case 2:
            { return new Token(TokenConstants.ERROR, yytext());
            }
            // fall through
          case 84: break;
          case 3:
            { /*Nothing at all*/
            }
            // fall through
          case 85: break;
          case 4:
            { string.setLength(0);yybegin(STRING);
            }
            // fall through
          case 86: break;
          case 5:
            { return new Token(TokenConstants.TIMES,yytext());
            }
            // fall through
          case 87: break;
          case 6:
            { return new Token(TokenConstants.PLUS,yytext());
            }
            // fall through
          case 88: break;
          case 7:
            { return new Token(TokenConstants.MINUS,yytext());
            }
            // fall through
          case 89: break;
          case 8:
            { return new Token(TokenConstants.DIV,yytext());
            }
            // fall through
          case 90: break;
          case 9:
            { return new Token(TokenConstants.intValue,yytext());
            }
            // fall through
          case 91: break;
          case 10:
            { return new Token(TokenConstants.LT,yytext());
            }
            // fall through
          case 92: break;
          case 11:
            { return new Token(TokenConstants.ASIGN,yytext());
            }
            // fall through
          case 93: break;
          case 12:
            { return new Token(TokenConstants.GT,yytext());
            }
            // fall through
          case 94: break;
          case 13:
            { return new Token(TokenConstants.identifier,yytext());
            }
            // fall through
          case 95: break;
          case 14:
            { string.append(yytext());
            }
            // fall through
          case 96: break;
          case 15:
            { yybegin(YYINITIAL);
                                       return new Token(TokenConstants.ERROR,"UNTERMINATED STRING CONSTANT");
            }
            // fall through
          case 97: break;
          case 16:
            { yybegin(YYINITIAL);
                                       return new Token(TokenConstants.stringValue, yytext());
            }
            // fall through
          case 98: break;
          case 17:
            { string.append('\\');
            }
            // fall through
          case 99: break;
          case 18:
            { return new Token(TokenConstants.NOTEQUAL,yytext());
            }
            // fall through
          case 100: break;
          case 19:
            { return new Token(TokenConstants.AND,yytext());
            }
            // fall through
          case 101: break;
          case 20:
            { yybegin(COMMENT);
            }
            // fall through
          case 102: break;
          case 21:
            { yybegin(LINECOMMENT);
            }
            // fall through
          case 103: break;
          case 22:
            { return new Token(TokenConstants.LET,yytext());
            }
            // fall through
          case 104: break;
          case 23:
            { return new Token(TokenConstants.EQUAL,yytext());
            }
            // fall through
          case 105: break;
          case 24:
            { return new Token(TokenConstants.LGT,yytext());
            }
            // fall through
          case 106: break;
          case 25:
            { return new Token(TokenConstants.DO,yytext());
            }
            // fall through
          case 107: break;
          case 26:
            { return new Token(TokenConstants.IN,yytext());
            }
            // fall through
          case 108: break;
          case 27:
            { return new Token(TokenConstants.IF,yytext());
            }
            // fall through
          case 109: break;
          case 28:
            { return new Token(TokenConstants.IS,yytext());
            }
            // fall through
          case 110: break;
          case 29:
            { return new Token(TokenConstants.OR,yytext());
            }
            // fall through
          case 111: break;
          case 30:
            { string.append('\"');
            }
            // fall through
          case 112: break;
          case 31:
            { yybegin(YYINITIAL);
                                        return new Token(TokenConstants.ERROR,"Contiene caracter nulo");
            }
            // fall through
          case 113: break;
          case 32:
            { string.append('\f');
            }
            // fall through
          case 114: break;
          case 33:
            { string.append('\n');
            }
            // fall through
          case 115: break;
          case 34:
            { string.append('\r');
            }
            // fall through
          case 116: break;
          case 35:
            { string.append('\t');
            }
            // fall through
          case 117: break;
          case 36:
            { return new Token(TokenConstants.charValue,yytext());
            }
            // fall through
          case 118: break;
          case 37:
            { return new Token(TokenConstants.doubleValue,yytext());
            }
            // fall through
          case 119: break;
          case 38:
            { return new Token(TokenConstants.FOR,yytext());
            }
            // fall through
          case 120: break;
          case 39:
            { return new Token(TokenConstants.GET,yytext());
            }
            // fall through
          case 121: break;
          case 40:
            { return new Token(TokenConstants.INT,yytext());
            }
            // fall through
          case 122: break;
          case 41:
            { return new Token(TokenConstants.NEW,yytext());
            }
            // fall through
          case 123: break;
          case 42:
            { return new Token(TokenConstants.REF,yytext());
            }
            // fall through
          case 124: break;
          case 43:
            { return new Token(TokenConstants.TRY,yytext());
            }
            // fall through
          case 125: break;
          case 44:
            { /*NADA DE NADA*/
            }
            // fall through
          case 126: break;
          case 45:
            { return new Token(TokenConstants.BOOL,yytext());
            }
            // fall through
          case 127: break;
          case 46:
            { return new Token(TokenConstants.CASE,yytext());
            }
            // fall through
          case 128: break;
          case 47:
            { return new Token(TokenConstants.CHAR,yytext());
            }
            // fall through
          case 129: break;
          case 48:
            { return new Token(TokenConstants.ELSE,yytext());
            }
            // fall through
          case 130: break;
          case 49:
            { return new Token(TokenConstants.ENUM,yytext());
            }
            // fall through
          case 131: break;
          case 50:
            { return new Token(TokenConstants.LONG,yytext());
            }
            // fall through
          case 132: break;
          case 51:
            { return new Token(TokenConstants.NULL,yytext());
            }
            // fall through
          case 133: break;
          case 52:
            { return new Token(TokenConstants.THIS,yytext());
            }
            // fall through
          case 134: break;
          case 53:
            { return new Token(TokenConstants.TRUE,yytext());
            }
            // fall through
          case 135: break;
          case 54:
            { return new Token(TokenConstants.VOID,yytext());
            }
            // fall through
          case 136: break;
          case 55:
            { return new Token(TokenConstants.BREAK,yytext());
            }
            // fall through
          case 137: break;
          case 56:
            { return new Token(TokenConstants.CATCH,yytext());
            }
            // fall through
          case 138: break;
          case 57:
            { return new Token(TokenConstants.CLASS,yytext());
            }
            // fall through
          case 139: break;
          case 58:
            { return new Token(TokenConstants.CONST,yytext());
            }
            // fall through
          case 140: break;
          case 59:
            { return new Token(TokenConstants.FALSE,yytext());
            }
            // fall through
          case 141: break;
          case 60:
            { return new Token(TokenConstants.FLOAT,yytext());
            }
            // fall through
          case 142: break;
          case 61:
            { return new Token(TokenConstants.THROW,yytext());
            }
            // fall through
          case 143: break;
          case 62:
            { return new Token(TokenConstants.USING,yytext());
            }
            // fall through
          case 144: break;
          case 63:
            { return new Token(TokenConstants.WHILE,yytext());
            }
            // fall through
          case 145: break;
          case 64:
            { return new Token(TokenConstants.DOUBLE,yytext());
            }
            // fall through
          case 146: break;
          case 65:
            { return new Token(TokenConstants.OBJECT,yytext());
            }
            // fall through
          case 147: break;
          case 66:
            { return new Token(TokenConstants.PUBLIC,yytext());
            }
            // fall through
          case 148: break;
          case 67:
            { return new Token(TokenConstants.RETURN,yytext());
            }
            // fall through
          case 149: break;
          case 68:
            { return new Token(TokenConstants.STATIC,yytext());
            }
            // fall through
          case 150: break;
          case 69:
            { return new Token(TokenConstants.STRING,yytext());
            }
            // fall through
          case 151: break;
          case 70:
            { return new Token(TokenConstants.STRUCT,yytext());
            }
            // fall through
          case 152: break;
          case 71:
            { return new Token(TokenConstants.SWITCH,yytext());
            }
            // fall through
          case 153: break;
          case 72:
            { return new Token(TokenConstants.TYPEOF,yytext());
            }
            // fall through
          case 154: break;
          case 73:
            { return new Token(TokenConstants.FINALLY,yytext());
            }
            // fall through
          case 155: break;
          case 74:
            { return new Token(TokenConstants.DECIMAL,yytext());
            }
            // fall through
          case 156: break;
          case 75:
            { return new Token(TokenConstants.DEFAULT,yytext());
            }
            // fall through
          case 157: break;
          case 76:
            { return new Token(TokenConstants.FOREACH,yytext());
            }
            // fall through
          case 158: break;
          case 77:
            { return new Token(TokenConstants.PRIVATE,yytext());
            }
            // fall through
          case 159: break;
          case 78:
            { return new Token(TokenConstants.CONTINUE,yytext());
            }
            // fall through
          case 160: break;
          case 79:
            { return new Token(TokenConstants.OVERRIDE,yytext());
            }
            // fall through
          case 161: break;
          case 80:
            { return new Token(TokenConstants.PROTECTED,yytext());
            }
            // fall through
          case 162: break;
          case 81:
            { return new Token(TokenConstants.INTERFACE,yytext());
            }
            // fall through
          case 163: break;
          case 82:
            { return new Token(TokenConstants.NAMESPACE,yytext());
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
