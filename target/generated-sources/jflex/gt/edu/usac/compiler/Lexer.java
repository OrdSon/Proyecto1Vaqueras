// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/lexer.lex

package gt.edu.usac.compiler;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int LINECOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\3\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\0\1\13\1\0\1\14\1\15\13\0\1\16"+
    "\1\17\1\20\3\0\1\21\1\0\1\22\1\0\1\23"+
    "\2\0\1\24\6\0\1\25\13\0\1\26\4\0\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\0"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\0\1\55"+
    "\2\0\1\56\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\37\2\1\5"+
    "\2\6\1\7\1\5\1\10\1\2\2\3\37\2\4\1"+
    "\2\0\1\11\1\12\1\13\1\14\1\15\1\0\1\3"+
    "\1\16\1\17\1\20\1\21\46\0\2\5\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\5\0\1\13\1\15\1\0"+
    "\1\3\1\16\1\17\1\20\1\21\46\0\1\1\1\30"+
    "\1\31\2\0\1\32\1\33\1\34\1\0\1\35\1\0"+
    "\1\36\20\0\1\37\1\0\1\40\24\0\1\41\1\5"+
    "\1\42\1\30\1\31\1\0\1\42\1\0\1\3\1\32"+
    "\1\33\1\34\1\0\1\35\1\0\1\36\20\0\1\37"+
    "\1\0\1\40\24\0\1\41\3\1\23\0\1\43\1\0"+
    "\1\44\1\45\3\0\1\46\5\0\1\47\10\0\1\50"+
    "\3\0\1\5\2\0\1\42\21\0\1\43\1\0\1\44"+
    "\1\45\3\0\1\46\5\0\1\47\10\0\1\50\3\0"+
    "\1\1\3\0\1\51\1\52\1\0\1\53\6\0\1\54"+
    "\1\55\4\0\1\56\1\0\1\57\11\0\1\60\1\0"+
    "\1\61\1\0\1\62\4\0\1\51\1\52\1\0\1\53"+
    "\6\0\1\54\1\55\4\0\1\56\1\0\1\57\11\0"+
    "\1\60\1\0\1\61\1\0\1\62\1\0\1\63\2\0"+
    "\1\64\1\65\1\66\4\0\1\67\1\70\14\0\1\71"+
    "\1\0\1\72\1\63\2\0\1\64\1\65\1\66\4\0"+
    "\1\67\1\70\14\0\1\71\1\0\1\72\5\0\1\73"+
    "\3\0\1\74\2\0\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\5\0\1\73\3\0\1\74\2\0\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\2\0"+
    "\1\105\1\106\1\107\3\0\1\110\1\104\2\0\1\105"+
    "\1\106\1\107\3\0\1\110\1\0\1\111\2\0\1\112"+
    "\1\0\1\111\2\0\1\112\1\113\1\114\1\115\1\113"+
    "\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\274\0\353\0\u011a"+
    "\0\274\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\274\0\u0729\0\274\0\u0758\0\u0787\0\u07b6\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\274\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\274\0\274"+
    "\0\274\0\274\0\274\0\u0eb0\0\u0edf\0\274\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695"+
    "\0\u16c4\0\274\0\274\0\274\0\274\0\274\0\274\0\u07b6"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u07b6\0\u07b6\0\u17af\0\u17de"+
    "\0\u07b6\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\274\0\274\0\u1fc3\0\u1ff2\0\274"+
    "\0\274\0\274\0\u2021\0\274\0\u2050\0\274\0\u207f\0\u20ae"+
    "\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226"+
    "\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340\0\274\0\u236f"+
    "\0\274\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\274\0\u274a\0\274"+
    "\0\u07b6\0\u07b6\0\u2779\0\u1fc3\0\u27a8\0\u27d7\0\u07b6\0\u07b6"+
    "\0\u07b6\0\u2806\0\u07b6\0\u2835\0\u07b6\0\u2864\0\u2893\0\u28c2"+
    "\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u07b6\0\u2b54\0\u07b6"+
    "\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc"+
    "\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44"+
    "\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u07b6\0\u2f2f\0\u1fc3\0\u2f5e"+
    "\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6"+
    "\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u321f\0\u324e"+
    "\0\u327d\0\u32ac\0\u32db\0\274\0\u330a\0\274\0\274\0\u3339"+
    "\0\u3368\0\u3397\0\274\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482"+
    "\0\274\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb"+
    "\0\u35fa\0\274\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714"+
    "\0\u0edf\0\u3743\0\u3772\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d"+
    "\0\u388c\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5"+
    "\0\u3a04\0\u3a33\0\u07b6\0\u3a62\0\u07b6\0\u07b6\0\u3a91\0\u3ac0"+
    "\0\u3aef\0\u07b6\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u07b6"+
    "\0\u3c09\0\u3c38\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52"+
    "\0\u07b6\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b"+
    "\0\274\0\274\0\u3eca\0\274\0\u3ef9\0\u3f28\0\u3f57\0\u3f86"+
    "\0\u3fb5\0\u3fe4\0\274\0\274\0\u4013\0\u4042\0\u4071\0\u40a0"+
    "\0\274\0\u40cf\0\274\0\u40fe\0\u412d\0\u415c\0\u418b\0\u41ba"+
    "\0\u41e9\0\u4218\0\u4247\0\u4276\0\274\0\u42a5\0\274\0\u42d4"+
    "\0\274\0\u4303\0\u4332\0\u4361\0\u4390\0\u07b6\0\u07b6\0\u43bf"+
    "\0\u07b6\0\u43ee\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u07b6"+
    "\0\u07b6\0\u4508\0\u4537\0\u4566\0\u4595\0\u07b6\0\u45c4\0\u07b6"+
    "\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de\0\u470d\0\u473c"+
    "\0\u476b\0\u07b6\0\u479a\0\u07b6\0\u47c9\0\u07b6\0\u47f8\0\274"+
    "\0\u4827\0\u4856\0\274\0\274\0\274\0\u4885\0\u48b4\0\u48e3"+
    "\0\u4912\0\274\0\274\0\u4941\0\u4970\0\u499f\0\u49ce\0\u49fd"+
    "\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17\0\u4b46\0\274"+
    "\0\u4b75\0\274\0\u07b6\0\u4ba4\0\u4bd3\0\u07b6\0\u07b6\0\u07b6"+
    "\0\u4c02\0\u4c31\0\u4c60\0\u4c8f\0\u07b6\0\u07b6\0\u4cbe\0\u4ced"+
    "\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07\0\u4e36\0\u4e65"+
    "\0\u4e94\0\u4ec3\0\u07b6\0\u4ef2\0\u07b6\0\u4f21\0\u4f50\0\u4f7f"+
    "\0\u4fae\0\u4fdd\0\274\0\u500c\0\u503b\0\u506a\0\274\0\u5099"+
    "\0\u50c8\0\274\0\274\0\274\0\274\0\274\0\274\0\274"+
    "\0\u50f7\0\u5126\0\u5155\0\u5184\0\u51b3\0\u07b6\0\u51e2\0\u5211"+
    "\0\u5240\0\u07b6\0\u526f\0\u529e\0\u07b6\0\u07b6\0\u07b6\0\u07b6"+
    "\0\u07b6\0\u07b6\0\u07b6\0\274\0\u52cd\0\u52fc\0\274\0\274"+
    "\0\274\0\u532b\0\u535a\0\u5389\0\274\0\u07b6\0\u53b8\0\u53e7"+
    "\0\u07b6\0\u07b6\0\u07b6\0\u5416\0\u5445\0\u5474\0\u07b6\0\u54a3"+
    "\0\274\0\u54d2\0\u5501\0\274\0\u5530\0\u07b6\0\u555f\0\u558e"+
    "\0\u07b6\0\274\0\274\0\274\0\u07b6\0\u07b6\0\u07b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\5"+
    "\1\14\1\15\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\5\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\5\1\36\2\5\1\37"+
    "\1\5\1\40\1\41\1\42\1\43\1\44\1\45\1\5"+
    "\1\46\1\47\1\5\1\50\2\51\1\52\1\53\1\51"+
    "\1\54\6\51\1\55\11\51\1\56\30\51\1\57\2\60"+
    "\1\61\1\62\1\57\1\63\2\57\1\64\1\65\1\66"+
    "\1\67\1\57\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\2\57\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\57\1\106\2\57\1\107\1\57\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\57\1\116\1\117\1\57"+
    "\1\120\2\121\1\122\1\123\10\121\1\124\42\121\61\0"+
    "\1\6\73\0\1\125\45\0\1\126\61\0\1\127\64\0"+
    "\1\130\56\0\1\131\52\0\1\132\3\0\1\133\50\0"+
    "\1\134\2\0\1\135\2\0\1\136\56\0\1\137\56\0"+
    "\1\140\56\0\1\141\106\0\1\142\54\0\1\143\50\0"+
    "\1\144\63\0\1\145\61\0\1\146\54\0\1\147\40\0"+
    "\1\150\6\0\1\151\3\0\1\152\2\0\1\153\44\0"+
    "\1\154\11\0\1\155\53\0\1\156\1\0\1\157\41\0"+
    "\1\160\12\0\1\161\2\0\1\162\44\0\1\163\57\0"+
    "\1\164\7\0\1\165\3\0\1\166\53\0\1\167\40\0"+
    "\1\170\3\0\1\171\16\0\1\172\34\0\1\173\22\0"+
    "\1\174\52\0\1\175\2\0\1\176\37\0\1\177\74\0"+
    "\1\200\2\0\1\201\40\0\1\202\10\0\1\203\5\0"+
    "\1\204\46\0\1\205\47\0\1\206\76\0\1\207\2\51"+
    "\2\0\1\51\1\0\20\51\1\0\30\51\2\0\1\52"+
    "\54\0\2\51\2\0\1\51\1\0\3\51\1\210\2\51"+
    "\1\211\11\51\1\0\30\51\5\0\1\212\7\0\1\213"+
    "\16\0\1\214\7\0\1\215\2\0\1\216\1\0\1\217"+
    "\5\0\11\220\1\221\47\220\1\60\6\220\1\221\56\220"+
    "\1\221\5\220\1\222\45\220\1\223\2\220\1\221\45\220"+
    "\11\0\1\224\5\0\1\130\37\0\11\220\1\221\5\220"+
    "\1\225\50\220\1\221\5\220\1\226\50\220\1\227\2\220"+
    "\1\230\2\220\1\231\50\220\1\221\5\220\1\232\50\220"+
    "\1\221\5\220\1\233\50\220\1\221\5\220\1\234\50\220"+
    "\1\221\35\220\1\235\20\220\1\221\33\220\1\236\22\220"+
    "\1\221\25\220\1\237\30\220\1\221\32\220\1\240\23\220"+
    "\1\221\35\220\1\241\20\220\1\221\33\220\1\242\22\220"+
    "\1\221\15\220\1\243\6\220\1\244\3\220\1\245\2\220"+
    "\1\246\22\220\1\221\21\220\1\247\11\220\1\250\22\220"+
    "\1\221\30\220\1\251\1\220\1\252\23\220\1\221\15\220"+
    "\1\253\12\220\1\254\2\220\1\255\22\220\1\221\21\220"+
    "\1\256\34\220\1\221\22\220\1\257\7\220\1\260\3\220"+
    "\1\261\17\220\1\221\33\220\1\262\22\220\1\221\15\220"+
    "\1\263\3\220\1\264\16\220\1\265\15\220\1\221\16\220"+
    "\1\266\22\220\1\267\14\220\1\221\35\220\1\270\2\220"+
    "\1\271\15\220\1\221\21\220\1\272\34\220\1\221\37\220"+
    "\1\273\2\220\1\274\13\220\1\221\24\220\1\275\10\220"+
    "\1\276\5\220\1\277\12\220\1\221\33\220\1\300\22\220"+
    "\1\221\24\220\1\301\31\220\1\221\44\220\1\302\2\121"+
    "\1\122\1\123\53\121\2\0\1\122\54\0\2\121\1\122"+
    "\1\123\5\121\1\303\45\121\17\0\1\304\56\0\1\305"+
    "\37\0\11\306\1\307\45\306\2\135\1\6\1\7\53\135"+
    "\17\0\1\310\56\0\1\311\56\0\1\312\72\0\1\313"+
    "\42\0\1\314\103\0\1\315\31\0\1\316\104\0\1\317"+
    "\56\0\1\320\61\0\1\321\1\322\34\0\1\323\56\0"+
    "\1\324\73\0\1\325\43\0\1\326\2\0\1\327\74\0"+
    "\1\330\54\0\1\331\60\0\1\332\46\0\1\333\61\0"+
    "\1\334\60\0\1\335\60\0\1\336\24\0\1\337\110\0"+
    "\1\340\24\0\1\341\103\0\1\342\55\0\1\343\67\0"+
    "\1\344\44\0\1\345\54\0\1\346\51\0\1\347\62\0"+
    "\1\350\47\0\1\351\62\0\1\352\14\0\1\353\34\0"+
    "\1\354\17\0\1\355\46\0\1\356\56\0\1\357\7\0"+
    "\1\360\61\0\1\361\2\0\1\362\47\0\1\363\47\0"+
    "\1\364\56\0\1\365\36\0\1\366\37\0\2\367\2\306"+
    "\1\367\1\306\3\367\1\51\14\367\1\306\30\367\2\211"+
    "\1\6\1\7\1\211\1\135\20\211\1\135\30\211\10\220"+
    "\1\370\1\221\56\220\1\221\5\220\1\371\50\220\1\221"+
    "\5\220\1\372\37\220\10\0\1\370\1\224\45\0\10\373"+
    "\1\374\1\375\45\373\2\230\1\60\1\61\5\230\1\376"+
    "\45\230\11\220\1\221\5\220\1\377\50\220\1\221\5\220"+
    "\1\u0100\50\220\1\221\5\220\1\u0101\50\220\1\221\21\220"+
    "\1\u0102\34\220\1\221\5\220\1\u0103\50\220\1\221\32\220"+
    "\1\u0104\23\220\1\221\5\220\1\u0105\50\220\1\221\33\220"+
    "\1\u0106\22\220\1\221\33\220\1\u0107\22\220\1\221\36\220"+
    "\1\u0108\1\u0109\16\220\1\221\15\220\1\u010a\40\220\1\221"+
    "\15\220\1\u010b\40\220\1\221\32\220\1\u010c\23\220\1\221"+
    "\17\220\1\u010d\2\220\1\u010e\33\220\1\221\40\220\1\u010f"+
    "\15\220\1\221\36\220\1\u0110\17\220\1\221\40\220\1\u0111"+
    "\15\220\1\221\30\220\1\u0112\25\220\1\221\33\220\1\u0113"+
    "\22\220\1\221\35\220\1\u0114\20\220\1\221\37\220\1\u0115"+
    "\16\220\1\221\5\220\1\u0116\50\220\1\221\37\220\1\u0117"+
    "\16\220\1\221\5\220\1\u0118\50\220\1\221\32\220\1\u0119"+
    "\23\220\1\221\31\220\1\u011a\24\220\1\221\42\220\1\u011b"+
    "\13\220\1\221\30\220\1\u011c\25\220\1\221\26\220\1\u011d"+
    "\27\220\1\221\21\220\1\u011e\34\220\1\221\25\220\1\u011f"+
    "\30\220\1\221\16\220\1\u0120\37\220\1\221\22\220\1\u0121"+
    "\14\220\1\u0122\16\220\1\221\15\220\1\u0123\17\220\1\u0124"+
    "\20\220\1\221\25\220\1\u0125\30\220\1\221\25\220\1\u0126"+
    "\7\220\1\u0127\20\220\1\221\40\220\1\u0128\2\220\1\u0129"+
    "\12\220\1\221\34\220\1\u012a\21\220\1\221\25\220\1\u012b"+
    "\30\220\1\221\25\220\1\u012c\30\220\1\221\5\220\1\u012d"+
    "\37\220\2\u012e\1\u012f\1\u0130\5\u012e\1\121\45\u012e\11\306"+
    "\1\u0131\45\306\11\0\1\u0132\74\0\1\u0133\56\0\1\u0134"+
    "\100\0\1\u0135\47\0\1\u0136\47\0\1\u0137\54\0\1\u0138"+
    "\74\0\1\u0139\57\0\1\u013a\56\0\1\u013b\1\u013c\44\0"+
    "\1\u013d\46\0\1\u013e\57\0\1\u013f\61\0\1\u0140\66\0"+
    "\1\u0141\63\0\1\u0142\35\0\1\u0143\46\0\1\u0144\13\0"+
    "\1\u0145\42\0\1\u0146\56\0\1\u0147\13\0\1\u0148\60\0"+
    "\1\u0149\54\0\1\u014a\42\0\1\u014b\101\0\1\u014c\47\0"+
    "\1\u014d\72\0\1\u014e\62\0\1\u014f\45\0\1\u0150\33\0"+
    "\1\u0151\111\0\1\u0152\55\0\1\u0153\44\0\1\u0154\12\0"+
    "\1\u0155\55\0\1\u0156\55\0\1\u0157\53\0\1\u0158\44\0"+
    "\1\u0159\42\0\1\u015a\72\0\1\u015b\55\0\1\u015c\66\0"+
    "\1\u015d\14\0\2\367\2\306\1\367\1\306\3\367\1\u015e"+
    "\14\367\1\306\30\367\11\373\1\u015f\45\373\10\220\1\370"+
    "\1\u0160\45\220\2\230\1\60\1\61\4\230\1\u0161\1\376"+
    "\45\230\11\220\1\221\15\220\1\u0162\40\220\1\221\15\220"+
    "\1\u0163\40\220\1\221\37\220\1\u0164\16\220\1\221\30\220"+
    "\1\u0165\25\220\1\221\21\220\1\u0166\34\220\1\221\17\220"+
    "\1\u0167\36\220\1\221\35\220\1\u0168\20\220\1\221\36\220"+
    "\1\u0169\17\220\1\221\36\220\1\u016a\1\u016b\16\220\1\221"+
    "\25\220\1\u016c\30\220\1\221\15\220\1\u016d\40\220\1\221"+
    "\16\220\1\u016e\37\220\1\221\21\220\1\u016f\34\220\1\221"+
    "\31\220\1\u0170\24\220\1\221\36\220\1\u0171\17\220\1\221"+
    "\15\220\1\u0172\40\220\1\221\5\220\1\u0173\13\220\1\u0174"+
    "\34\220\1\221\5\220\1\u0175\50\220\1\221\5\220\1\u0176"+
    "\13\220\1\u0177\34\220\1\221\23\220\1\u0178\32\220\1\221"+
    "\21\220\1\u0179\34\220\1\221\5\220\1\u017a\50\220\1\221"+
    "\30\220\1\u017b\25\220\1\221\21\220\1\u017c\34\220\1\221"+
    "\35\220\1\u017d\20\220\1\221\41\220\1\u017e\14\220\1\221"+
    "\30\220\1\u017f\25\220\1\221\5\220\1\u0180\50\220\1\221"+
    "\40\220\1\u0181\15\220\1\221\37\220\1\u0182\16\220\1\221"+
    "\25\220\1\u0183\12\220\1\u0184\15\220\1\221\37\220\1\u0185"+
    "\16\220\1\221\36\220\1\u0186\17\220\1\221\33\220\1\u0187"+
    "\22\220\1\221\21\220\1\u0188\34\220\1\221\5\220\1\u0189"+
    "\50\220\1\221\21\220\1\u018a\34\220\1\221\20\220\1\u018b"+
    "\35\220\1\221\30\220\1\u018c\14\220\2\u012e\1\u012f\1\u0130"+
    "\5\u012e\1\u018d\45\u012e\2\306\1\u012f\6\306\1\u0131\56\306"+
    "\1\u0131\2\306\1\6\42\306\11\0\1\u0132\2\0\1\6"+
    "\103\0\1\u018e\57\0\1\u018f\47\0\1\u0190\42\0\1\u0191"+
    "\56\0\1\u0192\75\0\1\u0193\37\0\1\u0194\107\0\1\u0195"+
    "\57\0\1\u0196\44\0\1\u0197\62\0\1\u0198\65\0\1\u0199"+
    "\46\0\1\u019a\33\0\1\u019b\56\0\1\u019c\72\0\1\u019d"+
    "\74\0\1\u019e\34\0\1\u019f\76\0\1\u01a0\26\0\1\u01a1"+
    "\107\0\1\u01a2\25\0\1\u01a3\70\0\1\u01a4\74\0\1\u01a5"+
    "\36\0\1\u01a6\66\0\1\u01a7\66\0\1\u01a8\46\0\1\u01a9"+
    "\63\0\1\u01aa\43\0\1\u01ab\56\0\1\u01ac\44\0\1\u01ad"+
    "\113\0\1\u01ae\21\0\1\u01af\104\0\1\u01b0\30\0\1\u01b1"+
    "\72\0\1\u01b2\23\0\2\367\2\306\1\367\1\306\3\367"+
    "\1\u015e\2\367\1\51\11\367\1\306\30\367\10\373\1\374"+
    "\1\u015f\2\373\1\60\42\373\10\220\1\370\1\u0160\2\220"+
    "\1\60\53\220\1\221\27\220\1\u01b3\26\220\1\221\30\220"+
    "\1\u01b4\25\220\1\221\21\220\1\u01b5\34\220\1\221\5\220"+
    "\1\u01b6\50\220\1\221\5\220\1\u01b7\50\220\1\221\24\220"+
    "\1\u01b8\31\220\1\221\5\220\1\u01b9\50\220\1\221\36\220"+
    "\1\u01ba\17\220\1\221\37\220\1\u01bb\16\220\1\221\25\220"+
    "\1\u01bc\30\220\1\221\31\220\1\u01bd\24\220\1\221\40\220"+
    "\1\u01be\15\220\1\221\30\220\1\u01bf\25\220\1\221\5\220"+
    "\1\u01c0\50\220\1\221\5\220\1\u01c1\50\220\1\221\21\220"+
    "\1\u01c2\34\220\1\221\37\220\1\u01c3\16\220\1\221\15\220"+
    "\1\u01c4\40\220\1\221\35\220\1\u01c5\20\220\1\221\5\220"+
    "\1\u01c6\50\220\1\221\36\220\1\u01c7\17\220\1\221\5\220"+
    "\1\u01c8\50\220\1\221\17\220\1\u01c9\36\220\1\221\35\220"+
    "\1\u01ca\20\220\1\221\15\220\1\u01cb\40\220\1\221\25\220"+
    "\1\u01cc\30\220\1\221\35\220\1\u01cd\20\220\1\221\25\220"+
    "\1\u01ce\30\220\1\221\32\220\1\u01cf\23\220\1\221\17\220"+
    "\1\u01d0\36\220\1\221\17\220\1\u01d1\36\220\1\221\5\220"+
    "\1\u01d2\50\220\1\221\42\220\1\u01d3\13\220\1\221\5\220"+
    "\1\u01d4\50\220\1\221\33\220\1\u01d5\22\220\1\221\5\220"+
    "\1\u01d6\50\220\1\221\21\220\1\u01d7\23\220\2\u012e\1\u012f"+
    "\1\u0130\5\u012e\1\u018d\2\u012e\1\121\42\u012e\17\0\1\u01d8"+
    "\101\0\1\u01d9\45\0\1\u01da\44\0\1\u01db\56\0\1\u01dc"+
    "\56\0\1\u01dd\103\0\1\u01de\41\0\1\u01df\71\0\1\u01e0"+
    "\47\0\1\u01e1\42\0\1\u01e2\56\0\1\u01e3\70\0\1\u01e4"+
    "\61\0\1\u01e5\70\0\1\u01e6\61\0\1\u01e7\44\0\1\u01e8"+
    "\70\0\1\u01e9\36\0\1\u01ea\71\0\1\u01eb\43\0\1\u01ec"+
    "\62\0\1\u01ed\72\0\1\u01ee\43\0\1\u01ef\37\0\1\u01f0"+
    "\73\0\1\u01f1\41\0\1\u01f2\37\0\11\220\1\221\5\220"+
    "\1\u01f3\50\220\1\221\30\220\1\u01f4\25\220\1\221\17\220"+
    "\1\u01f5\36\220\1\221\5\220\1\u01f6\50\220\1\221\5\220"+
    "\1\u01f7\50\220\1\221\5\220\1\u01f8\50\220\1\221\32\220"+
    "\1\u01f9\23\220\1\221\15\220\1\u01fa\40\220\1\221\30\220"+
    "\1\u01fb\25\220\1\221\21\220\1\u01fc\34\220\1\221\5\220"+
    "\1\u01fd\50\220\1\221\5\220\1\u01fe\50\220\1\221\17\220"+
    "\1\u01ff\36\220\1\221\22\220\1\u0200\33\220\1\221\34\220"+
    "\1\u0201\21\220\1\221\37\220\1\u0202\16\220\1\221\25\220"+
    "\1\u0203\30\220\1\221\37\220\1\u0204\16\220\1\221\17\220"+
    "\1\u0205\36\220\1\221\32\220\1\u0206\23\220\1\221\17\220"+
    "\1\u0207\36\220\1\221\23\220\1\u0208\32\220\1\221\37\220"+
    "\1\u0209\16\220\1\221\24\220\1\u020a\31\220\1\221\5\220"+
    "\1\u020b\50\220\1\221\22\220\1\u020c\33\220\1\221\5\220"+
    "\1\u020d\37\220\55\0\1\u020e\52\0\1\u020f\57\0\1\u0210"+
    "\46\0\1\u0211\65\0\1\u0212\24\0\1\u0213\75\0\1\u0214"+
    "\47\0\1\u0215\56\0\1\u0216\46\0\1\u0217\71\0\1\u0218"+
    "\57\0\1\u0219\42\0\1\u021a\56\0\1\u021b\56\0\1\u021c"+
    "\56\0\1\u021d\56\0\1\u021e\56\0\1\u021f\56\0\1\u0220"+
    "\37\0\11\220\1\221\43\220\1\u0221\12\220\1\221\37\220"+
    "\1\u0222\16\220\1\221\40\220\1\u0223\15\220\1\221\30\220"+
    "\1\u0224\25\220\1\221\37\220\1\u0225\16\220\1\221\5\220"+
    "\1\u0226\50\220\1\221\24\220\1\u0227\31\220\1\221\15\220"+
    "\1\u0228\40\220\1\221\15\220\1\u0229\40\220\1\221\5\220"+
    "\1\u022a\50\220\1\221\20\220\1\u022b\35\220\1\221\21\220"+
    "\1\u022c\34\220\1\221\5\220\1\u022d\50\220\1\221\5\220"+
    "\1\u022e\50\220\1\221\5\220\1\u022f\50\220\1\221\5\220"+
    "\1\u0230\50\220\1\221\5\220\1\u0231\50\220\1\221\5\220"+
    "\1\u0232\50\220\1\221\5\220\1\u0233\37\220\17\0\1\u0234"+
    "\72\0\1\u0235\56\0\1\u0236\42\0\1\u0237\56\0\1\u0238"+
    "\56\0\1\u0239\70\0\1\u023a\56\0\1\u023b\60\0\1\u023c"+
    "\42\0\1\u023d\37\0\11\220\1\221\5\220\1\u023e\50\220"+
    "\1\221\21\220\1\u023f\34\220\1\221\21\220\1\u0240\34\220"+
    "\1\221\5\220\1\u0241\50\220\1\221\5\220\1\u0242\50\220"+
    "\1\221\5\220\1\u0243\50\220\1\221\17\220\1\u0244\36\220"+
    "\1\221\17\220\1\u0245\36\220\1\221\21\220\1\u0246\34\220"+
    "\1\221\5\220\1\u0247\37\220\32\0\1\u0248\43\0\1\u0249"+
    "\72\0\1\u024a\56\0\1\u024b\42\0\1\u024c\37\0\11\220"+
    "\1\221\20\220\1\u024d\35\220\1\221\5\220\1\u024e\50\220"+
    "\1\221\21\220\1\u024f\34\220\1\221\21\220\1\u0250\34\220"+
    "\1\221\5\220\1\u0251\37\220\17\0\1\u0252\56\0\1\u0253"+
    "\56\0\1\u0254\37\0\11\220\1\221\5\220\1\u0255\50\220"+
    "\1\221\5\220\1\u0256\50\220\1\221\5\220\1\u0257\37\220";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21949];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\2\1\1\11\40\1\1\11\1\1"+
    "\1\11\45\1\1\11\2\1\2\0\5\11\1\0\1\1"+
    "\1\11\3\1\46\0\2\1\6\11\5\0\2\1\1\0"+
    "\5\1\46\0\1\1\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\20\0\1\11\1\0\1\11\24\0\1\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\20\0\1\1\1\0\1\1\24\0"+
    "\4\1\23\0\1\11\1\0\2\11\3\0\1\11\5\0"+
    "\1\11\10\0\1\11\3\0\1\1\2\0\1\1\21\0"+
    "\1\1\1\0\2\1\3\0\1\1\5\0\1\1\10\0"+
    "\1\1\3\0\1\1\3\0\2\11\1\0\1\11\6\0"+
    "\2\11\4\0\1\11\1\0\1\11\11\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\1\1\0\1\1\6\0"+
    "\2\1\4\0\1\1\1\0\1\1\11\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\2\0\3\11\4\0"+
    "\2\11\14\0\1\11\1\0\1\11\1\1\2\0\3\1"+
    "\4\0\2\1\14\0\1\1\1\0\1\1\5\0\1\11"+
    "\3\0\1\11\2\0\7\11\5\0\1\1\3\0\1\1"+
    "\2\0\7\1\1\11\2\0\3\11\3\0\1\11\1\1"+
    "\2\0\3\1\3\0\1\1\1\0\1\11\2\0\1\11"+
    "\1\0\1\1\2\0\1\1\3\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    static int MAX_STR_CONST = 1025;
    StringBuffer stringBuffer = new StringBuffer();
    StringBuffer string = new StringBuffer();
    private int currLine = 1;
    
    int getCurrLine(){
        return currLine;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
  
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Absolutamente nada*/
            }
            // fall through
          case 78: break;
          case 2:
            { System.out.println("error");
            }
            // fall through
          case 79: break;
          case 3:
            { /*Inacción*/
            }
            // fall through
          case 80: break;
          case 4:
            { string.setLength(0);yybegin(STRING);
            }
            // fall through
          case 81: break;
          case 5:
            { string.append(yytext());
            }
            // fall through
          case 82: break;
          case 6:
            { yybegin(YYINITIAL);
                                        System.out.println("fin cadena");;
            }
            // fall through
          case 83: break;
          case 7:
            { yybegin(YYINITIAL);
                                       return 1;
            }
            // fall through
          case 84: break;
          case 8:
            { string.append('\\');
            }
            // fall through
          case 85: break;
          case 9:
            { yybegin(COMMENT);
            }
            // fall through
          case 86: break;
          case 10:
            { System.out.println("*");
            }
            // fall through
          case 87: break;
          case 11:
            { System.out.println("+");
            }
            // fall through
          case 88: break;
          case 12:
            { yybegin(LINECOMMENT);
            }
            // fall through
          case 89: break;
          case 13:
            { System.out.println("-");
            }
            // fall through
          case 90: break;
          case 14:
            { System.out.println("/");
            }
            // fall through
          case 91: break;
          case 15:
            { System.out.println("<");
            }
            // fall through
          case 92: break;
          case 16:
            { System.out.println("=");
            }
            // fall through
          case 93: break;
          case 17:
            { System.out.println(">");
            }
            // fall through
          case 94: break;
          case 18:
            { string.append('\"');
            }
            // fall through
          case 95: break;
          case 19:
            { yybegin(YYINITIAL);
                                        System.out.println("caracter nulo");
            }
            // fall through
          case 96: break;
          case 20:
            { string.append('\f');
            }
            // fall through
          case 97: break;
          case 21:
            { string.append('\n');
            }
            // fall through
          case 98: break;
          case 22:
            { string.append('\r');
            }
            // fall through
          case 99: break;
          case 23:
            { string.append('\t');
            }
            // fall through
          case 100: break;
          case 24:
            { System.out.println("!=");
            }
            // fall through
          case 101: break;
          case 25:
            { System.out.println("&&");
            }
            // fall through
          case 102: break;
          case 26:
            { System.out.println("<=");
            }
            // fall through
          case 103: break;
          case 27:
            { System.out.println("==");
            }
            // fall through
          case 104: break;
          case 28:
            { System.out.println(">=");
            }
            // fall through
          case 105: break;
          case 29:
            { System.out.println("Do");
            }
            // fall through
          case 106: break;
          case 30:
            { System.out.println("In");
            }
            // fall through
          case 107: break;
          case 31:
            { System.out.println("if");
            }
            // fall through
          case 108: break;
          case 32:
            { System.out.println("is");
            }
            // fall through
          case 109: break;
          case 33:
            { System.out.println("||");
            }
            // fall through
          case 110: break;
          case 34:
            { /*NADA DE NADA*/
            }
            // fall through
          case 111: break;
          case 35:
            { System.out.println("for");
            }
            // fall through
          case 112: break;
          case 36:
            { System.out.println("get");
            }
            // fall through
          case 113: break;
          case 37:
            { System.out.println("int");
            }
            // fall through
          case 114: break;
          case 38:
            { System.out.println("new");
            }
            // fall through
          case 115: break;
          case 39:
            { System.out.println("ref");
            }
            // fall through
          case 116: break;
          case 40:
            { System.out.println("try");
            }
            // fall through
          case 117: break;
          case 41:
            { System.out.println("bool");
            }
            // fall through
          case 118: break;
          case 42:
            { System.out.println("case");
            }
            // fall through
          case 119: break;
          case 43:
            { System.out.println("char");
            }
            // fall through
          case 120: break;
          case 44:
            { System.out.println("else");
            }
            // fall through
          case 121: break;
          case 45:
            { System.out.println("enum");
            }
            // fall through
          case 122: break;
          case 46:
            { System.out.println("long");
            }
            // fall through
          case 123: break;
          case 47:
            { System.out.println("null");
            }
            // fall through
          case 124: break;
          case 48:
            { System.out.println("this");
            }
            // fall through
          case 125: break;
          case 49:
            { System.out.println("true");
            }
            // fall through
          case 126: break;
          case 50:
            { System.out.println("void");
            }
            // fall through
          case 127: break;
          case 51:
            { System.out.println("Break");
            }
            // fall through
          case 128: break;
          case 52:
            { System.out.println("catch");
            }
            // fall through
          case 129: break;
          case 53:
            { System.out.println("class");
            }
            // fall through
          case 130: break;
          case 54:
            { System.out.println("const");
            }
            // fall through
          case 131: break;
          case 55:
            { System.out.println("false");
            }
            // fall through
          case 132: break;
          case 56:
            { System.out.println("float");
            }
            // fall through
          case 133: break;
          case 57:
            { System.out.println("throw");
            }
            // fall through
          case 134: break;
          case 58:
            { System.out.println("while");
            }
            // fall through
          case 135: break;
          case 59:
            { System.out.println("double");
            }
            // fall through
          case 136: break;
          case 60:
            { System.out.println("object");
            }
            // fall through
          case 137: break;
          case 61:
            { System.out.println("public");
            }
            // fall through
          case 138: break;
          case 62:
            { System.out.println("return");
            }
            // fall through
          case 139: break;
          case 63:
            { System.out.println("static");
            }
            // fall through
          case 140: break;
          case 64:
            { System.out.println("string");
            }
            // fall through
          case 141: break;
          case 65:
            { System.out.println("struct");
            }
            // fall through
          case 142: break;
          case 66:
            { System.out.println("switch");
            }
            // fall through
          case 143: break;
          case 67:
            { System.out.println("typeof");
            }
            // fall through
          case 144: break;
          case 68:
            { System.out.println("Finally");
            }
            // fall through
          case 145: break;
          case 69:
            { System.out.println("decimal");
            }
            // fall through
          case 146: break;
          case 70:
            { System.out.println("default");
            }
            // fall through
          case 147: break;
          case 71:
            { System.out.println("foreach");
            }
            // fall through
          case 148: break;
          case 72:
            { System.out.println("private");
            }
            // fall through
          case 149: break;
          case 73:
            { System.out.println("continue");
            }
            // fall through
          case 150: break;
          case 74:
            { System.out.println("override");
            }
            // fall through
          case 151: break;
          case 75:
            { System.out.println("Protected");
            }
            // fall through
          case 152: break;
          case 76:
            { System.out.println("interface");
            }
            // fall through
          case 153: break;
          case 77:
            { System.out.println("namespace");
            }
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
